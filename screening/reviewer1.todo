"Campos E.C., de Souza L.B.L., Maia M.D.A." $ "Searching crowd knowledge to recommend solutions for API usage tasks" $ "Stack Overflow (SO) is a question and answer service directed to issues related to software development. In SO, developers post questions related to a programming topic and other members of the site can provide answers to help them. The information available on this type of service is also known as ‘crowd knowledge’ and currently is one important trend in supporting activities related to software development. We present an approach that makes use of ‘crowd knowledge’ in SO to recommend information that can assist developer activities. This strategy recommends a ranked list of question-answer pairs from SO based on a query. The criteria for ranking are based on three main aspects: the textual similarity of the pairs with respect to the query related to the developer's problem, the quality of the pairs, and a filtering mechanism that considers only ‘how-to’ posts. We conducted an experiment considering programming problems on three different topics (Swing, Boost and LINQ) widely used by the software development community to evaluate the proposed recommendation strategy. The results have shown that for Lucene + Score + How-to approach, 77.14% of the assessed activities have at least one recommended pair proved to be useful concerning the target programming problem. Copyright © 2016 John Wiley & Sons, Ltd. Copyright © 2016 John Wiley & Sons, Ltd."
"Varley R." $ "ExoData: A Python package to handle large exoplanet catalogue data" $ "Exoplanet science often involves using the system parameters of real exoplanets for tasks such as simulations, fitting routines, and target selection for proposals. Several exoplanet catalogues are already well established but often lack a version history and code friendly interfaces. Software that bridges the barrier between the catalogues and code enables users to improve the specific repeatability of results by facilitating the retrieval of exact system parameters used in articles results along with unifying the equations and software used. As exoplanet science moves towards large data, gone are the days where researchers can recall the current population from memory. An interface able to query the population now becomes invaluable for target selection and population analysis. ExoData is a Python interface and exploratory analysis tool for the Open Exoplanet Catalogue. It allows the loading of exoplanet systems into Python as objects (Planet, Star, Binary, etc.) from which common orbital and system equations can be calculated and measured parameters retrieved. This allows researchers to use tested code of the common equations they require (with units) and provides a large science input catalogue of planets for easy plotting and use in research. Advanced querying of targets is possible using the database and Python programming language. ExoData is also able to parse spectral types and fill in missing parameters according to programmable specifications and equations. Examples of use cases are integration of equations into data reduction pipelines, selecting planets for observing proposals and as an input catalogue to large scale simulation and analysis of planets. ExoData is a Python package available freely on GitHub.1 It's open source and community contributions are encouraged. The package can be easily installed using pip install exodata, detailed setup information is provided within. Program summary Program title: ExoData Catalogue identifier: AFAL_v1_0 Program summary URL:http://cpc.cs.qub.ac.uk/summaries/AFAL_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 21884 No. of bytes in distributed program, including test data, etc.: 608434 Distribution format: tar.gz Programming language: Python 2.7, 3.4, 3.5. Computer: Any. Operating system: Any. RAM: Less than 200MB Classification: 1.7. External routines: numpy, quantities, matplotlib, requests, astropy, seaborn, pandas, six Nature of problem: Being able to use exoplanet catalogue values in code including where there may be incomplete and incorrectly formatted values. Also being able to use the whole catalogue data at once, both for user querying, visualisation and in large simulation programs. Solution method: An interface to access the catalogue including filling in missing values and parsing of the catalogue data. Creating an API useable by both humans and other code, implementation of commonly used exoplanet equations, a plotting library. Running time: A few seconds depending on task © 2016 The Author(s)"
"López-Fernández L., García B., Gallego M., Gortázar F." $ "Designing and evaluating the usability of an API for real-time multimedia services in the Internet" $ "In the last few years, multimedia technologies in general, and Real-Time multimedia Communications (RTC) in particular, are becoming mainstream among WWW and smartphone developers, who have an increasing interest in richer media capabilities for creating their applications. The engineering literature proposing novel algorithms, protocols and architectures for managing and processing multimedia information is currently overwhelming. However, most of these results do not arrive to applications due to the lack of simple and usable APIs. Interestingly, in this context in which APIs are the critical ingredient for reaching wide developer audiences, the scientific literature about multimedia APIs and their usability is scarce. In this paper we try to contribute to fill this gap by proposing the RTC Media API: a novel type of API designed with the aim of making simple for developers the use of latest trends in RTC multimedia including WebRTC, Video Content Analysis or Augmented Reality. We provide a specification of such API and discuss how it satisfies a set of design requirements including programming-language agnosticism, adaptation to cloud environments, support to multisensory multimedia, etc. After that, we describe an implementation of such an API that has been created in the context of the Kurento open source software project, and present a study evaluating the API usability performed in a group of more than 40 professional developers distributed worldwide. In the light of the obtained results, we conclude that the usability of the API is adequate across the main development activities (i.e. API learning, code creation and code maintenance), with an average usability score of 3.39 over 5 in a Likert scale, and that this result is robust with respect to developers’ profiles, cultures, professional experiences and preferred programming languages. © 2016 Springer Science+Business Media New York,Application Programming Interfaces, Cognitive dimensions of notations, Media server, Multimedia processing, Multimedia tools and applications, Real-time multimedia communications, WebRTC"
"Sawant A.A., Bacchelli A." $ "fine-GRAPE: fine-grained APi usage extractor – an approach and dataset to investigate API usage" $ "An Application Programming Interface (API) provides a set of functionalities to a developer with the aim of enabling reuse. APIs have been investigated from different angles such as popularity usage and evolution to get a better understanding of their various characteristics. For such studies, software repositories are mined for API usage examples. However, many of the mining algorithms used for such purposes do not take type information into account. Thus making the results unreliable. In this paper, we aim to rectify this by introducing fine-GRAPE, an approach that produces fine-grained API usage information by taking advantage of type information while mining API method invocations and annotation. By means of fine-GRAPE, we investigate API usages from Java projects hosted on GitHub. We select five of the most popular APIs across GitHub Java projects and collect historical API usage information by mining both the release history of these APIs and the code history of every project that uses them. We perform two case studies on the resulting dataset. The first measures the lag time of each client. The second investigates the percentage of used API features. In the first case we find that for APIs that release more frequently clients are far less likely to upgrade to a more recent version of the API as opposed to clients of APIs that release infrequently. The second case study shows us that for most APIs there is a small number of features that is actually used and most of these features relate to those that have been introduced early in the APIs lifecycle. © 2016 The Author(s)"
"Walker S., McFadden M." $ "Best practices for scalable power measurement and control" $ "There are thousands of specialized registers onmodern processors which provide useful features such as powerbudgeting, thermal monitoring, and performance counting. These registers fall into two categories, model specific registers(MSRs) and configuration space registers (CSRs). Many ofthese registers, such as those supported by PAPI, help thehigh-performance computing (HPC) community analyze theirprogram in order to maximize performance and use resourcesmore efficiently. However, there are many MSRs and CSRswhich are not supported by existing performance tools. TheMSR kernel module provides access to all MSRs, but requiresthe user to be root. Users will typically want to access a handfulof MSRs sequentially, but we found that the existing MSRmodule has far too much overhead. Just like MSRs, usersneed elevated privileges to access CSRs with utilities suchas lspci. Simply allowing users to access all of the registersis out of the question because of the security risks involved. Furthermore, using these registers requires detailed knowledgeof the architectural changes in addition to the manufacturer'sproprietary ways of encoding the data. In this paper, we will describe a group of utilities developedat Lawrence Livermore National Laboratory to address theseproblems. Our Libmsr API solves the usability issues byproviding a simplified interface to common tasks. The companionkernel module, MSR-SAFE, allows whitelisting MSRsfor userspace access, plus provides an optimized way to accessMSRs in batches. Our CSR-SAFE kernel module is a first of itskind utility to whitelist sections of the PCI configuration space, where CSRs reside, for userspace access. We demonstrate theabilities of Libmsr and MSR-SAFE by using the utilities toset various power limits on the NAS parallel benchmark MG. Experiments analyzing our optimizations show a maximumspeedup of 26X, and approximately 2-8X on average for typicalbatches versus the stock MSR kernel module. Our utilitiescurrently support most modern Intel processors. © 2016 IEEE."
"Khan S., Nauman M., Othman A.T., Musa S., Syed T.A." $ "TSSDroid: realization of an efficient and usable TSS API for the Android software stack" $ "The advancement in smartphones capabilities has attracted malware writers to build more sophisticated attacks on these devices. Traditional software-based security mechanisms have failed to provide strong security against these attacks. Similar threats on the PC have been countered using the concepts of Trusted Computing—a highly flexible trust mechanism with strong security properties. However, smartphone platforms have yet to see any Trusted Computing applications—primarily because of the difficulty in adopting this relatively new paradigm of security. In this paper, we present the design of a high-level application programming interface (API) that allows Android-based smartphone application developers to adopt Trusted Computing and use it in their applications without having to learn the intricate details of how Trusted Computing works. The API abstracts away the complexity in using Trusted Computing constructs by offering easy-to-use interfaces for complex tasks. The API has enhanced the usability of Trusted Computing development by significantly reducing the number of lines and complexity of code required to perform these diverse tasks. This paper provides a reference implementation for the proposed API in order to show that the API is efficient in terms of performance overhead. Copyright Â© 2016 John Wiley & Sons, Ltd. Copyright Â© 2016 John Wiley & Sons, Ltd."
"Otegui J., Guralnick R.P." $ "The geospatial data quality REST API for primary biodiversity data" $ "Summary: We present a REST web service to assess the geospatial quality of primary biodiversity data. It enables access to basic and advanced functions to detect completeness and consistency issues as well as general errors in the provided record or set of records. The API uses JSON for data interchange and efficient parallelization techniques for fast assessments of large datasets. Availability and implementation: The Geospatial Data Quality API is part of the VertNet set of APIs. It can be accessed at http://api-geospatial.vertnet-portal.appspot.com/geospatial and is already implemented in the VertNet data portal for quality reporting. Source code is freely available under GPL license from http://www.github.com/vertnet/api-geospatial. Supplementary information: Supplementary data are available at Bioinformatics online. © 2016 The Author 2016. Published by Oxford University Press."
"Myers B.A., Stylos J." $ "Improving API usability" $ "APPLICATION PROGRAMMING INTERFACES (APIs), including libraries, frameworks, toolkits, and software development kits, are used by virtually all code. If one includes both internal APIs (interfaces internal to software projects) and public APIs (such as the Java Platform SDK, the Windows .NET Framework, jQuery for JavaScript, and Web services like Google Maps), nearly every line of code most programmers write will use API calls. APIs provide a mechanism for code reuse so programmers can build on top of what others (or they themselves) have already done, rather than start from scratch with every program. Moreover, using APIs is often required because low-level access to system resources (such as graphics, networking, and the file system) is available only through protected APIs. Organizations increasingly provide their internal data on the Web through public APIs, for example, http://www.programmableweb.com lists almost 15,000 APIs for Web services and https://www.digitalgov. gov/2013/04/30/apis-in-government/promotes use of government data through Web APIs. © 2016 ACM."
"Nguyen T.T., Pham H.V., Vu P.M., Nguyen T.T." $ "Learning API usages from bytecode: A statistical approach" $ "Mobile app developers rely heavily on standard API frameworks and libraries. However, learning API usages is often challenging due to the fast-changing nature of API frameworks for mobile systems and the insufficiency of API documentation and source code examples. In this paper, we propose a novel approach to learn API usages from bytecode of Android mobile apps. Our core contributions include HAPI, a statistical model of API usages and three algorithms to extract method call sequences from apps' bytecode, to train HAPI based on those sequences, and to recommend method calls in code completion using the trained HAPIs. Our empirical evaluation shows that our prototype tool can effectively learn API usages from 200 thousand apps containing 350 million method sequences. It recommends next method calls with top-3 accuracy of 90% and outperforms baseline approaches on average 10-20%. © 2016 ACM."
"Raghothaman M., Wei Y., Hamadi Y." $ "SWIM: Synthesizing what i mean code search and idiomatic snippet synthesis" $ "Modern programming frameworks come with large libraries, with diverse applications such as for matching regular expres-sions, parsing XML files and sending email. Programmers often use search engines such as Google and Bing to learn about existing APIs. In this paper, we describe swim, a tool which suggests code snippets given API-related natural language queries such as\generate md5 hash code"". The query does not need to contain framework-specific trivia such as the type names or methods of interest. We translate user queries into the APIs of interest using clickthrough data from the Bing search engine. Then, based on patterns learned from open-source code repositories, we synthesize idiomatic code describing the use of these APIs. We introduce structured call sequences to capture API-usage patterns. Structured call sequences are a generalized form of method call sequences, with if-branches and while-loops to represent conditional and repeated API usage patterns, and are simple to extract and amenable to synthesis. We evaluated swim with 30 common C# API-related queries received by Bing. For 70% of the queries, the first suggested snippet was a relevant solution, and a relevant solution was present in the top 10 results for all benchmarked queries. The online portion of the workow is also very responsive, at an average of 1:5 seconds per snippet. © 2016 ACM."
"Nguyen A.T., Nguyen H.A., Nguyen T.N." $ "A large-scale study on repetitiveness, containment, and composability of routines in open-source projects" $ "Source code in software systems has been shown to have a good degree of repetitiveness at the lexical, syntactical, and API usage levels. This paper presents a large-scale study on the repetitiveness, containment, and composability of source code at the semantic level. We collected a large dataset consisting of 9,224 Java projects with 2.79M class files, 17.54M methods with 187M SLOCs. For each method in a project, we build the program dependency graph (PDG) to represent a routine, and compare PDGs with one another as well as the subgraphs within them. We found that within a project, 12.1% of the routines are repeated, and most of them repeat from 2-7 times. As entirety, the routines are quite project-specific with only 3.3% of them exactly repeating in 1-4 other projects with at most 8 times. We also found that 26.1% and 7.27% of the routines are contained in other routine(s), i.e., implemented as part of other routine(s) elsewhere within a project and in other projects, respectively. Except for trivial routines, their repetitiveness and containment is independent of their complexity. Defining a subroutine via a per-variable slicing subgraph in a PDG, we found that 14.3% of all routines have all of their subroutines repeated. A high percentage of subroutines in a routine can be found/reused elsewhere. We collected 8,764,971 unique subroutines (with 323,564 unique JDK subroutines) as basic units for code searching/synthesis. We also provide practical implications of our findings to automated tools. © 2016 ACM."
"Qiu D., Li B., Leung H." $ "Understanding the API usage in Java" $ "Context Application Programming Interfaces (APIs) facilitate the use of programming languages. They define sets of rules and specifications for software programs to interact with. The design of language API is usually artistic, driven by aesthetic concerns and the intuitions of language architects. Despite recent studies on limited scope of API usage, there is a lack of comprehensive, quantitative analyses that explore and seek to understand how real-world source code uses language APIs. Objective This study aims to understand how APIs are employed in practical development and explore their potential applications based on the results of API usage analysis. Method We conduct a large-scale, comprehensive, empirical analysis of the actual usage of APIs on Java, a modern, mature, and widely-used programming language. Our corpus contains over 5000 open-source Java projects, totaling 150 million source lines of code (SLoC). We study the usage of both core (official) API library and third-party (unofficial) API libraries. We resolve project dependencies automatically, generate accurate resolved abstract syntax trees (ASTs), capture used API entities from over 1.5 million ASTs, and measure the usage based on our defined metrics: frequency, popularity and coverage. Results Our study provides detailed quantitative information and yield insight, particularly, (1) confirms the conventional wisdom that the usage of APIs obeys Zipf distribution, (2) demonstrates that core API is not fully used (many classes, methods and fields have never been used), (3) discovers that deprecated API entities (in which some were deprecated long ago) are still widely used, (4) evaluates that the use of current compact profiles is under-utilized, (5) identifies API library coldspots and hotspots. Conclusions Our findings are suggestive of potential applications across language API design, optimization and restriction, API education, library recommendation and compact profile construction. © 2016 Elsevier B.V. All rights reserved."
"Corraya A.D., Sumi M.A., Shachi S.I., Rahman Z." $ "Guiding software developers by social networking application plug-in using the multiple bridge source repository through a data mining integrated approach" $ "In today's world social networking is an important (powerful) medium of mass communication. People of almost all classes have been interacting each other and sharing their views, moments and ideas by using enormous user friendly applications in different social networking sites. It is really unbelievable to find a person who has never heard about the social networking system. The available social networking sites usually opportune their users to develop various customized applications through particular templates and embedded sources of codes. The users with average knowledge of development often encounter difficulties to reuse those resources and eventually lack guidelines and necessary API recommendations. In our work, we have proposed a framework and model to help those apps developer through a user assistance plug-in tool that is able to provide identical API usage patterns and sequences in response to a particular user query. We have titled our system as Social Networking Application Plug-in (SNAP). It searches social networking apps repository where multiple storage are bridged and apply respective mining algorithm to find the relevant sequences to fulfill the user needs. It provides similar, most relevant and functional API usage scenarios as well as gives an option to choose, reuse and modify the recommended sources. From the investigations we have ever made, the SNAP approach is capable to recommend error-free, understandable and minimal API patterns. © 2015 IEEE."
"Haydel N., Gesing S., Taylor I., Madey G., Dakkak A., De Gonzalo S.G., Hwu W.-M.W." $ "Enhancing the Usability and Utilization of Accelerated Architectures via Docker" $ "Accelerated architectures such as GPUs (Graphics Processing Units) and MICs (Many Integrated Cores) have been proven to increase the performance of many algorithms compared to their CPU counterparts and are widely available in local, campus-wide and national infrastructures, however, their utilization is not following the same pace as their deployment. Reasons for the underutilization lay partly on the software side with proprietary and complex interfaces for development and usage. A common API providing an extra layer to abstract the differences and specific characteristics of those architectures would deliver a far more portable interface for application developers. This cloud challenge proposal presents such an API that addresses these issues using a container-based approach. The resulting environment provides Docker-based containers for deploying accelerator libraries, such as CUDA Toolkit, OpenCL and OpenACC, onto a wide variety of different platforms and operating systems. By leveraging the container approach, we can overlay accelerator libraries onto the host without needing to be concerned about the intricacies of underlying operating system of the host. Docker therefore provides the advantage of being easily applicable on diverse architectures, virtualizing the necessary environment and including libraries as well as applications in a standardized way. The novelty of our approach is the extra layer for utilization and device discovery in this layer improving the usability and uniform development of accelerated methods with direct access to resources. © 2015 IEEE."
"Yuniarti A., Atidnminanto A., Mardasatria A., Hariadi R.R., Suciati N." $ "3D ITS campus on the web: A WebGL implementation" $ "Multimedia web experience can be increased using 3D graphics on the web. Proprietary systems need specific plug-ins to download and install. Therefore, open standard methods have been used increasingly. WebGL is one of those that is a cross-platform, web standard for a 3D graphics API based on OpenGL ES 2.0. There are many other Javascript libraries that abstract WebGL and results in higher code level. One of the libraries is Three.js, the most popular library/API for WebGL-based 3D graphics. This paper proposed an implementation of WebGL and Three.js libraries for a 3D ITS Campus information system. The proposed system can be viewed using two modes: ground and free modes. In the ground view mode, users can not move in vertical direction. Whereas the free view mode enables users to move in any direction. A usability testing was performed after development. The participants consist of 12 postgraduate students who are currently studying at the Informatics Department ITS, graduated from both ITS and non-ITS campus in their previous study. Results from the experiment show that the proposed system effectively render the ITS campus (83% of participants successfully view the 3D ITS campus on their own computers) and most participants suggest to add more buildings and natural objects like trees and ponds to the system. © 2015 IEEE."
"Nakajima A., Ono Y." $ "The Prospect of Open Online e-Learning System Based on the Free Culture Movement - Development of YouTutors as an Auto-Assignment Generator by Utilizing Creative Commons Contents Online" $ "This paper is concerned with the educational potential of open-source contents online, such as the Creative Commons and open Application Programming Interface (API), with the Free Culture movement as backgrounds. As a case study, we propose an open online e-learning system 'You Tutors', which automatically generates language-training materials by utilizing Creative Commons videos and open API of YouTube. As an introduction, we discuss the copy left licensing system and Creative Commons as a representative achievement of the Free Culture movement. To understand the affinity of the interaction between education and the Free Culture movement, we investigate the history of the movement. Furthermore, we examine the concepts structures of some licensing systems born in the context of the movement. We review related case studies especially selected from among practical open educational challenges. Then, we describe the development of an online English e-learning system 'You Tutors' as an original case study. We illustrate a way to re-use the data on the web and a way to adapt the Creative Commons contents into the e-learning system by mash up techniques. We conducted a usability experiment in English classes at the University of Tsukuba and found that students evaluated the auto-generated assignment system using online resources as adequate, after their self-learning application. © 2015 IEEE."
"Nguyen A.T., Nguyen T.T., Nguyen T.N." $ "Divide-and-conquer approach for multi-phase statistical migration for source code" $ "Prior research shows that directly applying phrase-based SMT on lexical tokens to migrate Java to C# produces much semantically incorrect code. A key limitation is the use of sequences in phrase-based SMT to model and translate source code with well-formed structures. We propose mppSMT, a divide-and-conquer technique to address that with novel training and migration algorithms using phrase-based SMT in three phases. First, mppSMT treats a program as a sequence of syntactic units and maps/translates such sequences in two languages to one another. Second, with a syntax-directed fashion, it deals with the tokens within syntactic units by encoding them with semantic symbols to represent their data and token types. This encoding via semantic symbols helps better migration of API usages. Third, the lexical tokens corresponding to each sememe are mapped or migrated. The resulting sequences of tokens are merged together to form the final migrated code. Such divide-and-conquer and syntax-direction strategies enable phrase-based SMT to adapt well to syntactical structures in source code, thus, improving migration accuracy. Our empirical evaluation on several real-world systems shows that 84.8 - 97.9% and 70 - 83% of the migrated methods are syntactically and semantically correct, respectively. 26.3 - 51.2% of total migrated methods are exactly matched to the human-written C# code in the oracle. Compared to Java2CSharp, a rule-based migration tool, it achieves higher semantic accuracy from 6.6 - 57.7% relatively. Importantly, it does not require manual labeling for training data or manual definition of rules. © 2015 IEEE."
"Le Roux P.B., Kroon S., Bester W." $ "DSaaS: A cloud service for persistent data structures" $ "In an attempt to tackle shortcomings of current approaches to collaborating on the development of structured data sets, we present a prototype platform that allows users to share and collaborate on the development of data structures via a web application, or by using language bindings or an API. Using techniques from the theory of persistent linked data structures, the resulting platform delivers automatically version-controlled map and graph abstract data types as a web service. The core of the system is provided by a Hash Array Mapped Trie (HAMT) which is made confluently persistent by path-copying. The system aims to make efficient use of storage, and to have consistent access and update times regardless of the version being accessed or modified. Copyright © 2016 by SCITEPRESS-Science and Technology Publications, Lda. All rights reserved."
"Huang C.Y., Wu C.H." $ "Design and implement an interoperable Internet of Things application based on an extended OGC sensorthings API Standard" $ "The Internet of Things (IoT) is an infrastructure that interconnects uniquely-identifiable devices using the Internet. By interconnecting everyday appliances, various monitoring and physical mashup applications can be constructed to improve people's daily life. However, IoT devices created by different manufacturers follow different proprietary protocols and cannot communicate with each other. This heterogeneity issue causes different products to be locked in multiple closed ecosystems that we call IoT silos. In order to address this issue, a common industrial solution is the hub approach, which implements connectors to communicate with IoT devices following different protocols. However, with the growing number of proprietary protocols proposed by device manufacturers, IoT hubs need to support and maintain a lot of customized connectors. Hence, we believe the ultimate solution to address the heterogeneity issue is to follow open and interoperable standard. Among the existing IoT standards, the Open Geospatial Consortium (OGC) SensorThings API standard supports comprehensive conceptual model and query functionalities. The first version of SensorThings API mainly focuses on connecting to IoT devices and sharing sensor observations online, which is the sensing capability. Besides the sensing capability, IoT devices could also be controlled via the Internet, which is the tasking capability. While the tasking capability was not included in the first version of the SensorThings API standard, this research aims on defining the tasking capability profile and integrates with the SensorThings API standard, which we call the extended-SensorThings API in this paper. In general, this research proposes a lightweight JSON-based web service description, the ""Tasking Capability Description"", allowing device owners and manufacturers to describe different IoT device protocols. Through the extended-SensorThings API, users and applications can follow a coherent protocol to control IoT devices that use different communication protocols, which could consequently achieve the interoperable Internet of Things infrastructure."
"Türpe S." $ "Idea: Usable platforms for secure programming – mining Unix for insight and guidelines" $ "Just as security mechanisms for end users need to be usable, programming platforms and APIs need to be usable for programmers. To date the security community has assembled large catalogs of dos and don’ts for programmers, but rather little guidance for the design of APIs that make secure programming easy and natural. Unix with its setuid mechanism lets us study usable security issues of programming platforms. Setuid allows certain programs to run with higher privileges than the user or process controlling them. Operating across a privilege boundary entails security obligations for the program. Obligations are known and documented, yet developers often fail to fulfill them. Using concepts and vocabulary from usable security and usability of notations theory, we can explain how the Unix platform provokes vulnerabilities in such programs. This analysis is a first step towards developing platform design guidelines to address human factors issues in secure programming. © Springer International Publishing Switzerland 2016."
"Holzschuher F., Peinl R." $ "Querying a graph database - Language selection and performance considerations" $ "NoSQL and especially graph databases are constantly gaining popularity among developers as they promise to deliver superior performance when handling highly interconnected data compared to relational databases. Apache Shindig is the reference implementation for OpenSocial with a highly interconnected data model. However, it had a relational database as back-end. In this paper we describe our experiences with the graph database Neo4j as back-end and compare Cypher, Gremlin and Java as alternatives for querying data with MySQL. We consider performance as well as usability from a developer's perspective. Our results show that Cypher is a good query language in terms of code readability and has a moderate overhead for most queries (20-200%). However, it has to be supplemented with ""stored procedures"" to make up for some performance deficits in pattern matching queries (>1000%). The RESTful API is unusable slow, whereas our WebSocket connection performs significantly better (>650%). © 2015 Elsevier Inc. All rights reserved."
"Furtado L., Miranda B., Neto N., Meiguins B." $ "IVOrpheus: A proposal for interaction by voice commands in three-dimensional environments of information visualization" $ "IVOrpheus is an information visualization tool for three-dimensional data that allows user's interaction by voice commands, mouse and keyboard input. The visualization technique used was the scatterplot 3D, which was implemented using Jmathplot API, and the speech recognition in Brazilian Portuguese was performed by Coruja software. IVOrpheus was developed in Java following the architectural pattern MVC, design patterns and open technologies. In voice interaction, some usability guidelines have been set in interface building process, making it more intuitive and contributing to lower the user cognitive effort. In addition, initial usability tests with users were performed to evaluate the application interface with and without interaction by voice. The tasks with and without voice interaction have shown similar results of time and completeness. The speech recognizer achieved a word error rate of approximately 17%. © 2015 IEEE."
"Coblenz M., Seacord R., Myers B., Sunshine J., Aldrich J." $ "A course-based usability analysis of Cilk Plus and OpenMP" $ "Cilk Plus and OpenMP are parallel language extensions for the C and C++ programming languages. The CPLEX Study Group of the ISO/IEC C Standards Committee is developing a proposal for a parallel programming extension to C that combines ideas from Cilk Plus and OpenMP. We conducted a preliminary comparison of Cilk Plus and OpenMP in a master's level course on security to evaluate the design tradeoffs in the usability and security of these two approaches. The eventual goal is to inform decision-making within the committee. We found several usability problems worthy of further investigation based on student performance, including declaring and using reductions, multi-line compiler directives, and the understanda-bility of task assignment to threads. © 2015 IEEE."
"Godwin A., Scott T.D., Potvin G., Sonnert G., Sadler P.M." $ "The academic performance index: Creating a more robust and less biased measure of student academic performance" $ "This paper introduces an alternative to singular performance measures through the creation of a scaled index incorporating a variety of performance factors indicating overall student success as well as the creation of similar sub-indices for performances in the particular areas of math, English, and science. These indices have been used in two studies based on nationally representative college student data: the Sustainability and Gender in Engineering (SaGE) and the Outreach Programs and Science Career Intentions (OPSCI) projects. The Academic Performance Index (API) is a scale constructed out of students' weighted high school GPA, available standardized test scores (ACT/SAT), AP test scores (if any), highest levels of various high school coursework taken, and college credit hours earned prior to enrolling in college. Importantly, the API uses any and all available data in these domains, which can be up to 42 different indicators for an individual student in the case of the SaGE project. This index shows less bias regarding race and gender, when compared with commonly-used standardized tests scores. Additionally, this item is psychometrically better at indicating variation across students' performance. © 2015 IEEE."
"Serrano M.A., Melani A., Vargas R., Marongiu A., Bertogna M., Quiñones E." $ "Timing characterization of OpenMP4 tasking model" $ "OpenMP is increasingly being supported by the newest high-end embedded many-core processors. Despite the lack of any notion of real-time execution, the latest specification of OpenMP (v4.0) introduces a tasking model that resembles the way real-time embedded applications are modeled and designed, i.e., as a set of periodic task graphs. This makes OpenMP4 a convenient candidate to be adopted in future real-time systems. However, OpenMP4 incorporates as well features to guarantee backward compatibility with previous versions that limit its practical usability in real-time systems. The most notable example is the distinction between tied and untied tasks. Tied tasks force all parts of a task to be executed on the same thread that started the execution, whereas a suspended untied task is allowed to resume execution on a different thread. Moreover, tied tasks are forbidden to be scheduled in threads in which other non-descendant tied tasks are suspended. As a result, the execution model of tied tasks, which is the default model in OpenMP to simplify the coexistence with legacy constructs, clearly restricts the performance and has serious implications on the response time analysis of OpenMP4 applications, making difficult to adopt it in real-time environments. In this paper, we revisit OpenMP design choices, introducing timing predictability as a new and key metric of interest. Our first results confirm that even if tied tasks can be timing analyzed, the quality of the analysis is much worse than with untied tasks. We thus reason about the benefits of using untied tasks, deriving a response time analysis for this model, and so allowing OpenMP4 untied model to be applied to real-time systems. © 2015 IEEE."
"Chen X., Sime G., Lutteroth C., Weber G." $ "OAuthHub-A Service for Consolidating Authentication Services" $ "OAuth has become a widespread authorization protocol to allow inter-enterprise sharing of user preferences and data: A Consumer that wants access to a user's protected resources held by a Service Provider can use OAuth to ask for the user's authorization for access to these resources. However, it can be tedious for a Consumer to use OAuth as a way to organize user identities, since doing so requires supporting all Service Providers that the Consumer would recognize as users' 'identity providers'. Each Service Provider added requires extra work, at the very least, registration at that Service Provider. Different Service Providers may differ slightly in the API they offer, their authentication/authorization process or even their supported version of OAuth. The use of different OAuth Service Providers also creates privacy, security and integration problems. Therefore OAuth is an ideal candidate for Software as a Service, while posing interesting challenges at the same time. We use conceptual modelling to derive new high-level models and provide an analysis of the solution space. We address the aforementioned problems by introducing a trusted intermediary-OAuth Hub-into this relationship and contrast it with a variant, OAuth Proxy. Instead of having to support and control different OAuth providers, Consumers can use OAuth Hub as a single trusted intermediary to take care of managing and controlling how authentication is done and what data is shared. OAuth Hub eases development and integration issues by providing a consolidated API for a range of services. We describe how a trusted intermediary such as OAuth Hub can fit into the overall OAuth architecture and discuss how it can satisfy demands on security, reliability and usability. © 2015 IEEE."
"Nguyen H.A., Dyer R., Nguyen T.N., Rajan H." $ "Consensus-based mining of API preconditions in big code" $ "Formal specifications for APIs help developers correctly use them and enable checker tools automatically verify their uses. However, formal specifications are not always available with released APIs. In this work, we demonstrate an approach for mining API preconditions from a large-scale corpus of open-source software. It considers conditions guarding API calls in client code as potential preconditions of the corresponding APIs. Then it uses consensus among a large number of API usages to keep the ones appearing in the majority. Finally, the mined preconditions are ranked based on their frequencies and reported to users. © 2015 ACM."
"Fischer L., Hanenberg S." $ "An empirical investigation of the effects of type systems and code completion on API usability using TypeScript and JavaScript in MS visual studio" $ "Recent empirical studies that compared static and dynamic type systems on API usability showed a positive impact of static type systems on developer productivity in most cases. Nevertheless, it is unclear how large this effect is in comparison to other factors. One obvious factor in programming is tooling: It is commonly accepted that modern IDEs have a large positive impact on developers, although it is not clear which parts of modern IDEs are responsible for that. One possible- and for most developers obvious candidate-is code completion. This paper describes a 2×2 randomized trial that compares JavaScript and Microsoft's statically typed alternative TypeScript with and without code completion in MS Visual Studio. While the experiment shows (in correspondence to previous experiments) a large positive effect of the statically typed language TypeScript, the code completion effect is not only marginal, but also just approaching statistical significance. This seems to be an indicator that the effect of static type systems is larger than often assumed, at least in comparison to code completion."
"Kim B., Jung H." $ "LW-RDMA: Design and implementation of a lightweight RDMA API for InfiniBand-based clusters" $ "Due to the development of low-latency networks such as InfiniBand and Myrinet, cluster-based computing systems are now commonly used when implementing computing-intensive applications. InfiniBand is the de-facto standard for highperformance cluster-based computing systems. InfiniBand supports RDMA (Remote Direct Memory Access) features and provides a native API for these features. The use of the native-API-like VPI Verbs API is not easy owing to its complexity. However, customizing and optimizing can be done to improve the development efficiency. In this paper, we design and implement a lightweight RDMA API to improve the usability and applicability of InfiniBand-based clusters. The proposed method is termed LW-RDMA. The LW-RDMA API is lightweight and simple to use by those without expertise in the area of InfiniBand architecture and/or related details. In the experimental results, the implemented LW-RDMA showed better data transfer efficiency performance in some cases when compared to other RDMA techniques. © 2015 ACM."
"Papadopoulos P., Loukopoulos T., Anagnostopoulos I., Tziritas N., Vassilakopoulos M." $ "RAC: A remote application calling framework for coordination of mobile apps" $ "Mobile applications (apps) have become part of our everyday life with a constantly increasing market. Of particular interest are apps aiding planning and collaboration among family members, or between co-workers. The architecture of such apps usually involves some Cloud storage medium, through which group members post and retrieve data. Naturally, all participants must have the same app installed in their devices for collaboration to be possible. In this paper we investigate an alternative option instead of app collaboration which is based on remote application calling (RAC). Under the RAC framework, a trusted source is able to invoke application actions at other people's devices, without necessarily owning himself the application it handles. We discuss RAC design and implementation related issues, focusing on Android devices. The usability of our approach is demonstrated through two widely used apps: alarm clock and map. © 2015 ACM."
"Favario L., Meo A.R., Masala E." $ "A New Platform for Cross-Repository Creation and Sharing of Educational Resources: Architecture and a Case Study" $ "Currently there is a large amount of educational resources available, developed by many educational institutions at all level. One of the main challenges is to make use of such wealth of material in a simple and effective way, especially when pre-university education is involved, ranging from primary schools to high schools. The main difficulties experienced by the teachers willing to tailor the available material to the specific needs of their class are typically the lack of available time and the difficulties in learning the peculiar procedures that each repository system (including CMS, LMS etc.) requires. This work presents an architecture to integrate different repository systems using the Content Management Interoperability Services (CMIS) API, as well as an integration layer that provides a much more simplified interface suitable for the needs of the content creators (i.e., Teachers), and the users of the contents (i.e., The learners). Both the technical aspects of integration and the usability issues from the point of view of the teachers are described and considered in the design. The first experiments, evaluated by means of performance indicators and some user feedbacks, show that the platform has the potential for widespread adoption in the Italian educational environment. © 2015 IEEE."
"Ono Y., Ishii T., Ohnishi A." $ "Construction of a voice-based asynchronous communication system utilizing speech recognition and its potential for EFL learners' speaking ability: A pilot study" $ "The present paper deals with the construction of an asynchronous voice-based computer-mediated communication (CMC) system for less confident English as a Foreign Language learners. The results from this pilot evaluation of the system are discussed in terms of its usability and effectiveness at reducing foreign language anxiety. The proposed system incorporates a browser-driven Automatic Speech Recognition (ASR) into a blog to provide real-time feedback on their pronunciation before posting. With the results from the questionnaire survey conducted in this pilot study, we demonstrate that this system reduces foreign language anxiety in speaking and increases motivation for less motivated learners. © 2015 IEEE."
"Kuznetsov K., Gorla A., Tavecchia I., Groß F., Zeller A." $ "Mining Android Apps for Anomalies" $ "How do we know a program does what it claims to do? Our CHABADA prototype can cluster Android™ apps by their description topics and identify outliers in each cluster with respect to their API usage. A ""weather"" app that sends messages thus becomes an anomaly, likewise, a ""messaging"" app would typically not be expected to access the current location and would also be identified. In this paper we present a new approach for anomaly detection that improves the classification results of our original CHABADA paper [. 1]. Applied on a set of 22,500+ Android applications, our CHABADA prototype can now predict 74% of novel malware and as such, without requiring any known malware patterns, maintains a false positive rate close to 10%. © 2015 Elsevier Inc. All rights reserved."
"Bernal-Cárdenas C." $ "Improving energy consumption in android apps" $ "Mobile applications sometimes exhibit behaviors that can be attributed to energy bugs depending on developer implementation decisions. In other words, certain design decisions that are technically ""correct"" might affect the energy performance of applications. Such choices include selection of color palettes, libraries used, API usage and task scheduling order. We study the energy consumption of Android apps using a power model based on a multi-objective approach that minimizes the energy consumption, maximizes the contrast, and minimizes the distance between the chosen colors by com- paring the new options to the original palette. In addition, the usage of unnecessary resources can also be a cause of energy bugs depending on whether or not these are implemented correctly. We present an opportunity for continuous investigation of energy bugs by analyzing components in the background during execution on Android applications. This includes a potential new taxonomy type that is not covered by state-of-the-art approaches. © 2015 ACM."
"Saied M.A., Abdeen H., Benomar O., Sahraoui H." $ "Could We Infer Unordered API Usage Patterns Only Using the Library Source Code?" $ "Learning to use existing or new software libraries is a difficult task for software developers, which would impede their productivity. Much existing work has provided different techniques to mine API usage patterns from client programs in order to help developers on understanding and using existing libraries. However, considering only client programs to identify API usage patterns is a strong constraint as the client programs source code is not always available or the clients themselves do not exist yet for newly released APIs. In this paper, we propose a technique for mining Non Client-based Usage Patterns (NCBUP miner). We detect unordered API usage patterns as distinct groups of API methods that are structurally and semantically related and thus may contribute together to the implementation of a particular functionality for potential client programs. We evaluated our technique through four APIs. The obtained results are comparable to those of client-based approaches in terms of usage-patterns cohesion. © 2015 IEEE."
"Sushine J., Herbsleb J.D., Aldrich J." $ "Searching the State Space: A Qualitative Study of API Protocol Usability" $ "Application Programming Interfaces (APIs) often define protocols - restrictions on the order of client calls to API methods. API protocols are common and difficult to use, which has generated tremendous research effort in alternative specification, implementation, and verification techniques. However, little is understood about the barriers programmers face when using these APIs, and therefore the research effort may be misdirected. To understand these barriers better, we perform a two-part qualitative study. First, we study developer forums to identify problems that developers have with protocols. Second, we perform a think-aloud observational study, in which we systematically observe professional programmers struggle with these same problems to get more detail on the nature of their struggles and how they use available resources. In our observations, programmer time was spent primarily on four types of searches of the protocol state space. These observations suggest protocol-targeted tools, languages, and verification techniques will be most effective if they enable programmers to efficiently perform state search. © 2015 IEEE."
"Wang W., Malik H., Godfrey M.W." $ "Recommending posts concerning API issues in developer Q&A sites" $ "API design is known to be a challenging craft, as API designers must balance their elegant ideals against 'real-world' concerns, such as utility, performance, backwards compatibility, and unforeseen emergent uses. However, to date, there is no principled method to collect or analyze API usability information that incorporates input from typical developers. In practice, developers often turn to Q&A websites such as stackoverflow.com (SO) when seeking expert advice on API use, the popularity of such sites has thus led to a very large volume of unstructured information that can be searched with diligence for answers to specific questions. The collected wisdom within such sites could, in principle, be of great help to API designers to better support developer needs, if only it could be collected, analyzed, and distilled for practical use. In this paper, we present a methodology that combines several techniques, including social network analysis and topic mining, to recommend SO posts that are likely to concern API design-related issues. To establish a comparison baseline, we introduce two more recommendation approaches: a reputation-based recommender and a random recommender. We have found that when applied to Q&A discussion of two popular mobile platforms, Android and iOS, our methodology achieves up to 93% accuracy and is more stable with its recommendations when compared to the two baseline techniques. © 2015 IEEE."
"Perakakis E., Ghinea G." $ "HTML5 Technologies for Effective Cross-Platform Interactive/Smart TV Advertising" $ "Developing an interactive TV Commercial (iTVC) for Internet connected TVs is complicated by the number of different platforms, each with its own operating system and application programming interface (API). To achieve cross-platform compatibility, we propose to use standard web technologies, instead of proprietary APIs for each device. With our approach, only one iTVC was developed, which contained commonly used features of these kinds of advertisements, and used only web technologies (HTML5, CSS, and JavaScript). The iTVC was first developed on a desktop personal computer and was tested on three different smart TV platforms for feature compatibility. After achieving compatibility, a user study with 36 participants evaluated how platform-related differences affect aspects of user experience (UX) and effectiveness of the interactive ad. The measured UX/effectiveness aspects and usability were consistent regardless of the iTVC performance on each device. These results show the potential of web technologies to deliver a uniform (and effective) interactive Ad across a range of heterogeneous devices. © 2013 IEEE."
"Mitra R." $ "Rapido: A sketching tool for web API designers" $ "Well-designed Web APIs must provide high levels of usability and must ""get it right"" on the first release. One strategy for accomplishing this feat is to identify usability issues early in the design process before a public release. Sketching is a useful way of improving the user experience early in the design phase. Designers can create many sketches and learn from them. The Rapido tool is designed to automate the Web API sketching process and help designers improve usability in an iterative fashion."
"Schäfer T., Scheck A., Bruneß D., May P., Koch I." $ "The new protein topology graph library web server" $ "Summary: We present a new, extended version of the Protein Topology Graph Library web server. The Protein Topology Graph Library describes the protein topology on the super-secondary structure level. It allows to compute and visualize protein ligand graphs and search for protein structural motifs. The new server features additional information on ligand binding to secondary structure elements, increased usability and an application programming interface (API) to retrieve data, allowing for an automated analysis of protein topology. © The Author 2015. Published by Oxford University Press."
"Lamba Y., Khattar M., Sureka A." $ "Pravaaha: Mining android applications for discovering API call usage patterns and trends" $ "Software libraries and frameworks, consisting of a collection of Class and Interface definitions, provide a mechanism for code reuse by providing methods, APIs, components (generic functionality) and a support structure for developers to build applications, products and solutions. KitKat, Jelly Bean, Ice Cream Sandwich, Honeycomb and Gingerbread are different versions (open-source) of Android, one of the most popular mobile platforms in the world. In this paper, we present the results of our large-scale (consisting of 1, 120 open-source applications and 17:4 million lines of code) API usage analysis of Android applications. Our work is motivated by the need to mine actual Android API usage, frequent API call usage patterns and trends to understand and generate empirical data on how developers are using the mobile platform in their applications. Extracting popular and frequently-invoked methods, API packages and API call-usage patterns is useful to both the API Producers and API Consumers. For example, API Producers can view the quantitative data on API usage as a feedback from users on the relevance, usability and applicability of the respective APIs. We conduct a series of experiments on analysing the Android platform API usage (usage of different packages, usage of methods, usage across categories) and present the results of our analysis using graphs such as Bubble Chart, Radar Chart, Heat-Map for effective visualization of the results and for extraction of actionable information. Copyright 2015 ACM."
"Niu H., Keivanloo I., Zou Y." $ "API usage pattern recommendation for software development" $ "Application Programming Interfaces (APIs) facilitate pragmatic reuse and improve the productivity of software development. An API usage pattern documents a set of method calls from multiple API classes to achieve a reusable functionality. Existing approaches often use frequent-sequence mining to extract API usage patterns. However, as reported by earlier studies, frequent-sequence mining may not produce a complete set of usage patterns. In this paper, we explore the possibility of mining API usage patterns without relying on frequent-pattern mining. Our approach represents the source code as a network of object usages where an object usage is a set of method calls invoked on a single API class. We automatically extract usage patterns by clustering the data based on the co-existence relations between object usages. We conduct an empirical study using a corpus of 11,510 Android applications. The results demonstrate that our approach can effectively mine API usage patterns with high completeness and low redundancy. We observe 18% and 38% improvement on F-measure and response time respectively comparing to usage pattern extraction using frequent-sequence mining. © 2016 Elsevier Inc."
"Saied M.A., Sahraoui H., Dufour B." $ "An observational study on API usage constraints and their documentation" $ "Nowadays, APIs represent the most common reuse form when developing software. However, the reuse benefits depend greatly on the ability of client application developers to use correctly the APIs. In this paper, we present an observational study on the API usage constraints and their documentation. To conduct the study on a large number of APIs, we implemented and validated strategies to automatically detect four types of usage constraints in existing APIs. We observed that some of the constraint types are frequent and that for three types, they are not documented in general. Surprisingly, the absence of documentation is, in general, specific to the constraints and not due to the non documenting habits of developers. © 2015 IEEE."
"Saied M.A., Benomar O., Abdeen H., Sahraoui H." $ "Mining multi-level API usage patterns" $ "Software developers need to cope with complexity of Application Programming Interfaces (APIs) of external libraries or frameworks. However, typical APIs provide several thousands of methods to their client programs, and such large APIs are difficult to learn and use. An API method is generally used within client programs along with other methods of the API of interest. Despite this, co-usage relationships between API methods are often not documented. We propose a technique for mining Multi-Level API Usage Patterns (MLUP) to exhibit the co-usage relationships between methods of the API of interest across interfering usage scenarios. We detect multi-level usage patterns as distinct groups of API methods, where each group is uniformly used across variable client programs, independently of usage contexts. We evaluated our technique through the usage of four APIs having up to 22 client programs per API. For all the studied APIs, our technique was able to detect usage patterns that are, almost all, highly consistent and highly cohesive across a considerable variability of client programs. © 2015 IEEE."
"Kapros E., Peirce N." $ "Usability of educational technology APIs: Findings and guidelines" $ "This paper describes a project that reviewed the usability of existing Educational Technology Application Programming Interfaces (EdTech APIs). The focus was on web-based APIs and the portals through which these are offered to developers. After analysing the state of art with regard to existing EdTech APIs and after conducting a literature review on API usability, a survey was circulated among developers and CTOs of EdTech organisations. The results of the aforementioned three steps were triangulated and resulted in usability guidelines for EdTech APIs. The contribution of this project is twofold: firstly, the production of a concrete set of EdTech API usability guidelines and, secondly, their implementation in a proof-of-concept a portal for two different EdTech offerings. © Springer International Publishing Switzerland 2015."
"Kinash N., Tikhomirov A., Trufanov A., Berestneva O., Boukhanovsky A., Ashurova Z." $ "Analysis of large-scale networks using high performance technology (vkontakte case study)" $ "Case study Vkontakte presents an approach to the analysis of large-scale social networks. The paper describes the API usage to design the friend lists for construction of massive social network. It will avoid errors during the building process and select the most efficient parallel graph frameworks for the large network analysis. The case studied the basic parameters of the network Vkontakte, and determined its topology different from scale-free character. The collected dataset is opened for free public download. © Springer International Publishing Switzerland 2015."
"Tsouroplis R., Petychakis M., Alvertis I., Biliri E., Lampathaki F., Askounis D." $ "Internet-based enterprise innovation through a community-based API builder to manage APIs" $ "More and more users, these days, keep fragmented data across the web in different applications, through various types of devices, PC, mobiles, wearable devices, etc. By taking advantage of an aggregative Graph Application Programming Interface (API), users have the ability to harness shattered data and keep them into a privacy-aware platform (Cloudlet) where permissions can be applied, and therefore let developers build useful applications from it. To make this unifying Graph API, the API Builder is proposed, as a tool for easily creating new APIs and connecting them with existing ones from Cloud-based Services (CBS), thus providing integration among services and making it easier for users and/or enterprises to reach a larger audience while conveying their message. Typical obstacles, like keeping up to date with CBS API versioning, that seems daunting for developers, are also tackled through semi-automation and the help of the community empowering the API Builder. In that way, application developers do not have to worry for merging various APIs or if the application-generated data are locked in silos of companies, now the user is the judge who gives access to their data and meta-data (i.e. especially context), to enable smarter, context-adaptive and richer in content applications. © 2015 Springer International Publishing Switzerland."
"Rizzardini R.H." $ "Cloud interoperability service architecture for education environments" $ "MOOC adoption is growing, and several challenges are presented with it. One of them is the use of innovative tools for learning, with a special emphasis in having learners to represent their acquired knowledge in creative forms, therefore, some experiences in that regard will be introduced. Thus, orchestrating the learning experience with cloud-based external tools (realized as Web 2.0 tools) brings interoperability issues such as automated management of tools and interoperability scalability. This paper presents a new version of an architecture that is capable of interoperability with external tools by defining a semantic description of the tools' Web API using linked data. This creates the next generation of tool interoperability for educational environments. Furthermore, it makes machine discovery of the Web API possible, therefore, it does not require custom system interfaces to interoperate. It simplifies the plugging in of new external tools and maintenance of integrated services. Additionally, the architecture makes it possible to automate simple and complex tasks to be performed with the external tools, such as creating thousands of tool instances to be used by MOOC learners. The results are very promising and demonstrate that this approach is innovative, scalable and highly accurate. Currently, no standard, specification or framework has the same type of flexibility, integration simplicity and robust management for external tools. © J.UCS."
"Abbasi A.A., Jin H., Wu S." $ "A software-defined cloud resource management framework" $ "Network systems employ policies that are inherently dynamic in nature and that depend on temporal conditions defined in terms of external events such as the measurement of bandwidth, use of hosts, intrusion detection or specific time events. Software-defined networking (SDN) offers the opportunity to make networks easier to configure by providing richer configuration methods. To reduce network monitoring costs and traffic overheads, herein, we propose a softwaredefined cloud resource management framework that uses a Fuzzy Analytical Hierarchy Process (Fuzzy-AHP) to customize the network resource allocation. The framework can be incorporated into SDN-enabled cloud infrastructures by using an Application Program Interface (API). Using real-time data, we demonstrate that our framework can improve network resource management and is capable of handling increasing traffic requests. We also validate our framework efficiency through simulations. © Springer International Publishing Switzerland 2015."
"Lozano A., Mens K., Kellens A." $ "Usage contracts: Offering immediate feedback on violations of structural source-code regularities" $ "Developers often encode design knowledge through structural regularities such as API usage protocols, coding idioms and naming conventions. As these regularities express how the source code should be structured, they provide vital information for developers using or extending that code. Adherence to such regularities tends to deteriorate over time because they are not documented and checked explicitly. This paper introduces uContracts, an internal DSL to codify and verify such regularities as 'usage contracts'. Our DSL aims at covering most common usage regularities, while still providing a means to express less common ones. Common regularities are identified based on regularities supported by existing approaches to detect bugs or suggest missing code fragments, techniques that mine for structural regularities, as well as on the analysis of an open-source project. We validate our DSL by documenting the structural regularities of an industrial case study, and analyse how useful the information provided by checking these regularities is for the developers of that case study. © 2015 Elsevier B.V. All rights reserved."
"Zheng M., Xue H., Zhang Y., Wei T., Lui J.C.S." $ "Enpublic apps: Security threats using iOS enterprise and developer certificates" $ "Compared with Android, the conventional wisdom is that iOS is more secure. However, both jailbroken and nonjailbroken iOS devices have number of vulnerabilities. For iOS, apps need to interact with the underlying system using Application Programming Interfaces (APIs). Some of these APIs remain undocumented and Apple forbids apps in App Store from using them. These APIs, also known as ""private APIs"", provide powerful features to developers and yet they may have serious security consequences if misused. Furthermore, apps which use private APIs can bypass the App Store and use the ""Apple's Enterprise/Developer Certificates"" for distribution. This poses a significant threat to the iOS ecosystem. So far, there is no formal study to understand these apps and how private APIs are being encapsulated. We call these iOS apps which distribute to the public using enterprise certificates as ""enpublic"" apps. In this paper, we present the design and implementation of iAnalytics, which can automatically analyze ""enpublic"" apps' private API usages and vulnerabilities. Using iAnalytics, we crawled and analyzed 1,408 enpublic iOS apps. We discovered that: 844 (60%) out of the 1408 apps do use private APIs, 14 (1%) apps contain URL scheme vulnerabilities, 901 (64%) enpublic apps transport sensitive information through unencrypted channel or store the information in plaintext on the phone. In addition, we summarized 25 private APIs which are crucial and security sensitive on iOS 6/7/8, and we have filed one CVE (Common Vulnerabilities and Exposures) for iOS devices. Copyright © 2015 ACM."
"De Benedictis A., Rak M., Turtur M., Villano U." $ "REST-based SLA management for cloud applications" $ "In cloud computing, possible risks linked to availability, performance and security can be mitigated by the adoption of Service Level Agreements (SLAs) formally agreed upon by cloud service providers and their users. This paper presents the design of services for the management of cloud-oriented SLAs that hinge on the use of a REST-based API. Such services can be easily integrated into existing cloud applications, platforms and infrastructures, in order to support SLA-based cloud services delivery. After a discussion on the SLA life-cycle, an agreement protocol state diagram is introduced. It takes explicitly into account negotiation, remediation and renegotiation issues, is compliant with all the active standards, and is compatible with the WS-Agreement standard. The requirement analysis and the design of a solution able to support the proposed SLA protocol is presented, introducing the REST API used. This API aims at being the basis for a framework to build SLA-based applications. © 2015 IEEE."
"Honko H., Andalibi V., Aaltonen T., Parak J., Saaranen M., Viik J., Korhonen I." $ "W2E-Wellness warehouse engine for semantic interoperability of consumer health data" $ "Novel health monitoring devices and applications allow consumers easy and ubiquitous ways to monitor their health status. However, technologies from different providers lack both technical and semantic interoperability and hence the resulting health data is often deeply tied to a specific service, which is limiting its re-usability and utilization in different services. We have designed a Wellness Warehouse Engine (W2E) that bridges this gap and enables seamless exchange of data between different services. W2E provides interfaces to various data sources and makes data available via unified Representational State Transfer Application Programming Interface (REST API) to other services. Importantly, it includes Unifier - an engine that allows transforming input data into generic units re-usable by other services, and Analyzer - an engine that allows advanced analysis of input data, such as combining different data sources into new output parameters. In this paper, we describe the architecture of W2E and demonstrate its applicability by using it for unifying data from four consumer activity trackers, using a test base of 20 subjects each carrying out three different tracking sessions. Finally, we discuss challenges of building a scalable Unifier engine for the ever-enlarging number of new devices. © 2015 IEEE."
"Weiss J.M." $ "Comparison of POSIX threads, OpenMP and C++11 concurrency frameworks" $ "Multi-core architectures have become the norm on highend computing devices, from desktop computers to tablets to cell phones. In order to take full advantage of parallelism, it is essential to write multithreaded applications. In the past, parallel processing in C++ was been restricted to external libraries. But the C++11 release introduces concurrency constructs into the language itself, providing benefits to software development, optimization, and portability. This paper compares performance and usability of the new C++11 concurrency interface to two widely-used external parallel processing libraries: POSIX threads and OpenMP. Copyright © 2015 by The International Society for Computers and Their Applications (ISCA)."
"Chakroun I., Vander Aa T., De Fraine B., Haber T., Wuyts R., Demeuter W." $ "ExaShark: A scalable hybrid array kit for exascale simulation" $ "Many problems in high-performance computing, such as stencil applications in iterative solvers or in particle-based simulations, have a need for regular distributed grids. Libraries offering such n-dimensional regular grids need to take advantage of the latest high-performance computing technologies and scale to exascale systems, but also need to be usable by non HPC experts. This paper presents ExaShark: a library for handling n-dimensional distributed data structures that strikes a balance between performance and usability. ExaShark is an open source middleware, offered as a library, targeted at reducing the increasing programming burden on heterogeneous current and future exascale architectures. It offers its users a global-array-like usability while its runtime can be configured to use shared memory threading techniques (Pthreads, OpenMP, TBB), inter-node distribution techniques (MPI, GPI), or combinations of both. ExaShark has been used to develop applications such as a Jacobian 2D heat simulation and advanced pipelined conjugate gradient solvers. These applications are used to demonstrate the performance and usability of ExaShark. Copyright © 2015 Society for Modeling & Simulation International (SCS)."
"Chen L., Chen K., Shao C., Zhu P." $ "SocAware: A middleware for social applications in online social networks" $ "The popularity of online social network (OSN) services has given rise to a variety of social network applications. However these applications lack a common platform for information sharing and people interoperating. In this paper, we propose SocAware, a middleware designed for OSN services. SocAware extracts social relation from heterogeneous networks, and builds a uniform knowledge base to manage the social information. SocAware distinguishes itself from other OSN middlewares by analyzing the OSN activities to classify the social relations, and by calculating the strength of social relations to provide reusability between social applications. We also provide a set of API to facilitate third-party application development and the effective utilization of these relations. In order to validate SocAware, we developed two prototype applications above the middleware. The experimental results demonstrate the usability and expansibility of the middleware. © 2014 IEEE."
"Murukannaiah P.K., Singh M.P." $ "Platys: An active learning framework for place-aware application development and its evaluation" $ "We introduce a high-level abstraction of location called place. A place derives its meaning from a user's physical space, activities, or social context. In this manner, place can facilitate improved user experience compared to the traditional representation of location, which is spatial coordinates. We propose the Platys framework as a way to address the special challenges of place-aware application development. The core of Platys is a middleware that (1) learns a model of places specific to each user via active learning, a machine learning paradigm that seeks to reduce the user-effort required for training the middleware, and (2) exposes the learned user-specific model of places to applications at run time, insulating application developers from dealing with both low-level sensors and user idiosyncrasies in perceiving places. We evaluated Platys via two studies. First, we collected place labels and Android phone sensor readings from 10 users. We applied Platys' active learning approach to learn each user's places and found that Platys (1) requires fewer place labels to learn a user's places with a desired accuracy than do two traditional supervised approaches, and (2) learns places with higher accuracy than two unsupervised approaches. Second, we conducted a developer study to evaluate Platys' efficiency in assisting developers and its effectiveness in enabling usable applications. In this study, 46 developers employed either Platys or the Android location API to develop a place-aware application. Our results indicate that application developers employing Platys, when compared to those employing the Android API, (1) develop a place-aware application faster and perceive reduced difficulty and (2) produce applications that are easier to understand (for developers) and potentially more usable and privacy preserving (for application users). © 2015 ACM."
"Lemic F., Handziski V., Wirström N., Van Haute T., De Poorter E., Voigt T., Wolisz A." $ "Web-based platform for evaluation of RF-based indoor localization algorithms" $ "The experimental efforts for optimizing the performance of RF-based indoor localization algorithms for specific environments and scenarios is time consuming and costly. In this work, we address this problem by providing a publicly accessible platform for streamlined experimental evaluation of RF-based indoor localization algorithms, without the need of a physical testbed infrastructure. We also offer an extensive set of raw measurements that can be used as input data for indoor localization algorithms. The datasets are collected in multiple testbed environments, with various densities of measurement points, using different measuring devices and in various scenarios with controlled RF interference. The platform encompasses two core services: one focused on storage and management of raw data, and one focused on automated calculation of metrics for performance characterization of localization algorithms. Tools for visualization of the raw data, as well as software libraries for convenient access to the platform from MATLAB and Python, are also offered. By contrasting its fidelity and usability with respect to remote experiments on dedicated physical testbed infrastructure, we show that the virtual platform produces comparative performance results while offering significant reduction in the complexity, time and labor overheads. © 2015 IEEE."
"Rosoiu M.-E., David J., Euzenat J." $ "A linked data framework for android" $ "Mobile devices are becoming major repositories of personal information. Still, they do not provide a uniform manner to deal with data from both inside and outside the device. Linked data provides a uniform interface to access structured interconnected data over the web. Hence, exposing mobile phone information as linked data would improve the usability of such information. We present an API that provides data access in RDF, both within mobile devices and from the outside world. This API is based on the Android content provider API which is designed to share data across Android applications. Moreover, it introduces a transparent URI dereferencing scheme, exposing content outside of the device. As a consequence, any application may access data as linked data without any a priori knowledge of the data source. © Springer-Verlag Berlin Heidelberg 2015."
"[No author name available]" $ "CEUR Workshop Proceedings" $ "The proceedings contain 31 papers. The topics discussed include: trusted, fair multi-segment business models, enabled by a user-centric, privacy-aware platform, for a data-driven era, gamifying software development environments using cognitive principles, community-based API builder to manage APIs and their connections with cloud-based services, applying idea management system (IMS) approach to design and implement a collaborative environment in public service related open innovation processes, towards visually monitoring multiple perspectives of business process compliance, the influence of syntactic quality of enterprise process models on model comprehension, KPI-based activity planning for people working in flexible processes, usability evaluation of variability modeling by means of common variability language, patterns for identifying and structuring features from textual descriptions: an exploratory study, and a resource oriented architecture to handle data volume diversity."
"Hastings J., Haug K., Steinbeck C." $ "Ten recommendations for software engineering in research" $ "Research in the context of data-driven science requires a backbone of well-written software, but scientific researchers are typically not trained at length in software engineering, the principles for creating better software products. To address this gap, in particular for young researchers new to programming, we give ten recommendations to ensure the usability, sustainability and practicality of research software. © 2014 Hastings et al., licensee BioMed Central Ltd."
"Demangeon R., Honda K., Hu R., Neykova R., Yoshida N." $ "Practical interruptible conversations: distributed dynamic verification with multiparty session types and Python" $ "The rigorous and comprehensive verification of communication-based software is an important engineering challenge in distributed systems. Drawn from our industrial collaborations (Ocean Observatories Initative, http://www.oceanobservatories.org/, JBoss Savara Project, http://www.jboss.org/savara) on Scribble, a choreography description language based on multiparty session types, and its theoretical foundations (Honda et al., in POPL, pp 273–284, 2008), this article proposes a dynamic verification framework for structured interruptible conversation programming. We first present our extension of Scribble to support the specification of asynchronously interruptible conversations. We then implement a concise API for conversation programming with interrupts in Python that enables session types properties to be dynamically verified for distributed processes. Finally, we expose the underlying theory of our interrupt mechanism, studying its syntax and semantics, its integration in MPST theory and proving the correctness of our design. Our framework ensures the global safety of a system in the presence of asynchronous interrupts through independent runtime monitoring of each endpoint, checking the conformance of the local execution trace to the specified protocol. The usability of our framework for describing and verifying choreographic communications has been tested by integration into the large scientific cyberinfrastructure developed by the Ocean Observatories Initiative. Asynchronous interrupts have proven expressive enough to represent and verify their main classes of communication patterns, including asynchronous streaming and various timeout-based protocols, without introducing any implicit synchronisations. Benchmarks show conversation programming and monitoring can be realised with little overhead. © 2014, Springer Science+Business Media New York."
"Pozhidaev M." $ "The framework for accessible applications: Text-based case for blind people" $ "This paper offers a Java framework for creating accessible applications for blind and visually impaired people as part of a proposed general conception based on the maximum use of objects filled with text data only. It offers new types of applications more easily recognizable by disabled persons, helping them to do their work faster and more comfortably. Strong and weak points are analyzed. The published prototype of the proposed platform is described as well as the conclusions of the performed experiments. The prototype is implemented on Java SE and wrapped by a GNU/Linux environment as a bootable ISO-image. Copyright 2014 ACM."
"Bodden E." $ "TS4J: A fluent interface for defining and computing typestate analyses" $ "Typestate analyses determine whether a program's use of a given API obeys this API's usage constraints in the sense that the right methods are called on the right objects in the right order. Previously, we and others have described approaches that generate typestate analyses from textual finitestate property definitions written in specialized domainspecific languages. While such an approach is feasible, it requires a heavyweight compiler, hindering an effective integration into the programmer's development environment and thus often also into her software-development practice. Here we explain the design of a pure-Java interface facilitating both the definition and evaluation of typestate analyses. The interface is fluent, a term coined by Eric Evans and Martin Fowler. Fluent interfaces provide the user with the possibility to write method-invocation chains that almost read like natural-language text, in our case allowing for a seemingly declarative style of typestate definitions. In all previously described approaches, however, fluent APIs are used to build configuration objects. In this work, for the first time we show how to design a fluent API in such a way that it also encapsulates actual computation, not just configuration. We describe an implementation on top of Soot, Heros and Eclipse, which we are currently evaluating together with pilot customers in an industrial context at Fraunhofer SIT. © Copyright 2014 ACM."
"Watson R." $ "Applying the cognitive dimensions of API usability to improve API documentation planning" $ "This interactive poster explores the application of the 12 cognitive dimensions of API usability to API documentation planning by using the dimensions to identify and characterize the factors that influence the documentation that the users of an API require. Many factors can complicate estimating and planning the documentation an API requires. Even when an API's documentation requirements can be estimated, it can be difficult to present to stakeholders an objective basis for the estimate. The cognitive dimensions of API usability have characterized APIs and their users successfully and they have been used to communicate these characterizations to stakeholders. It follows that the same dimensions could also help identify the documentation that an API requires to provide a satisfactory and successful experience for the software developers who use the API. © Copyright 2014 ACM."
"Ko D., Ma K., Park S., Kim S., Kim D., Traon Y.L." $ "API document quality for resolving deprecated APIs" $ "Using deprecated APIs often results in security vulnerability or performance degradation. Thus, invocations to deprecated APIs should be immediately replaced by alternative APIs. To resolve deprecated APIs, most developers rely on API documents provided by service API libraries. However, the documents often do not have sufficient information. This makes many deprecated API usages remain unresolved, which leads programs to vulnerable states. This paper reports a result of studying document quality for deprecated APIs. We first collected 260 deprecated APIs of eight Java libraries as well as the corresponding API documents. These documents were manually investigated to figure out whether it provides alternative APIs, rationales, or examples. Then, we examined 2,126 API usages in 249 client applications and figured out whether those were resolved in the subsequent versions. This study revealed that 1) 3.6 APIs was deprecated and 3.6 deprecated APIs are removed from the library a month on average, 2) only 61% of API documents provided alternative APIs while rationale and examples were rarely documented, and 3) 62% of deprecate API usages in client applications were resolved if the corresponding API documents provided alternative APIs while 49% were resolved when the documents provided no alternative APIs. Based on these results, we draw future directions to encourage resolving deprecated APIs. © 2014 IEEE."
"Nguyen A.T., Nguyen H.A., Nguyen T.T., Nguyen T.N." $ "Statistical learning of API mappings for language migration" $ "The process of migrating software between languages is called language migration or code migration. To reduce manual ef-fort in defining the rules of API mappings for code migra-tion, in this work, we investigate a data-driven model that statistically learns the mappings between API usages from the corpus of the corresponding methods in the client code of the APIs in two languages. Copyright © 2014 ACM."
"Ghafari M., Heydarnoori A." $ "Towards a visualized code recommendation for APIs enriched with specification mining" $ "This paper positions an idea for an interactive code recommendation system. In this work, candidate recommendations are abstracted as a graph-based visualization of the API usages that are decorated with the API specifications and the usage rules mined from the unit test cases of the given API and its usage examples. The user can then progressively explore this graph to obtain her desired code with- out delving into the implementation details. © 2014 ACM."
"Mijailović Ž., Milićev D." $ "Empirical analysis of GUI programming concerns" $ "The focus of this paper is on identification of typical graphical user interface (GUI) programming concerns. As opposed to some other proposals available in the literature that indicate GUI programming concerns by simple intuition, we have conducted a systematic empirical analysis to derive our proposal. It included an analysis of an existing application programming interface (API), its use in industrial projects, and an analysis of the requirements and issues reported during software maintenance. In addition, we have evaluated more than 50 GUI frameworks and APIs and proved usefulness and generality of our classification of concerns. As an additional proof of applicability of the proposed classification, we have refactored the inheritance hierarchy of the selected GUI API using concern-oriented interfaces. We have implemented a supporting tool that complements the developed API and supports its concern-oriented use. The evaluation of the refactored API showed positive effects on API usability. © 2014 Elsevier Ltd."
"Ghafari M." $ "Extracting code examples from unit test cases" $ "Understanding how to properly use APIs of large libraries is difficult, error prone, and time consuming. Software developers resort to study to learn APIs. Several approaches have been proposed to mine these examples, but the sources from which they mine examples as well as their mining approaches hamper their applicability in some practical scenarios. Unit test cases seem to be an additional source of significant API examples, which may overcome the aforementioned difficulties. Synthesizing meaningful examples from tests not only improves the applicability of current code recommendation systems, but also facilitates providing up to date API examples to augment documentation. However, mining examples of API use from unit tests is a non trivial task and arises several research challenges summarized in this paper. © 2014 IEEE."
"Asaduzzaman M., Roy C.K., Schneider K.A., Hou D." $ "Context-sensitive code completion tool for better API usability" $ "Developers depend on APIs of frameworks and libraries to support the development process. Due to the large number of existing APIs, it is difficult to learn, remember, and use them during the development of a software. To mitigate the problem, modern integrated development environments provide code completion facilities that free developers from remembering every detail. In this paper, we introduce CSCC, a simple, efficient context-sensitive code completion tool that leverages previous code examples to support method completion. Compared to other existing code completion tools, CSCC uses new sources of contextual information together with lightweight source code analysis to better recommend API method calls. © 2014 IEEE."
"Pandit M.R., Bhardwaj T., Khatri V." $ "Steps towards web ubiquitous computing" $ "With evasion of digital convergence [1], computing has by and large pervaded into our environment. WWW has enhanced day-to-day life by utilizing information such as Location awareness, User-context awareness, touch API, mutation observer [2], and many more. The future [3] trends in ubiquitous computing [4] provide a great scope for innovation and value-added services.With approach of “computing being embedded,” the future sees its usage more pervasive and appealing. Web is evolving and so are supporting technologies (in terms of hardware technologies). Many real-life examples including augmented-reality, wearable technologies, gesture-based recognition systems, etc., are already in place illustrating its high-end usage. Such diverse future targeting billions of people and devices need streamlined approach. Some steps have already been taken care by World Wide Web consortium (W3C) to provide standards relating to API usage. In this paper, we highlight various aspects of web-ubiquitous computing and how they can be dealt w.r.t to their implementation. © Springer India 2014."
"Kashyap V., Hardekopf B." $ "Security signature inference for javascript-based browser addons" $ "JavaScript-based browser addons are a tempting target for malicious developers|addons have high privileges and ready access to a browser user's confidential information, and they have none of the usual sandboxing or other security restric- Tions used for client-side webpage JavaScript. Therefore, vetting third-party addons is important both for addon users and for the browser providers that host oficial addon repos- itories. The current state-of-the-art vetting methodology is manual and ad-hoc, which makes the vetting process diffi- cult, tedious, and error-prone. In this paper, we propose a method to help automate this vetting process. We describe a novel notion of addon se- curity signatures, which provide detailed information about an addon's information ows and API usage, along with a novel static analysis to automatically infer these signatures from the addon code. We implement our analysis and em- pirically evaluate it on a benchmark suite consisting of ten real browser addons taken from the oficial Mozilla addon repository. Our results show that our analysis is practical and useful for vetting browser addons. Copyright © 2014 by the Association for Computing Machinery, Inc. (ACM)."
"Acretoaie V., Störrle H." $ "Hypersonic: Model analysis and checking in the cloud" $ "Modeling tools are traditionally delivered as monolithic desktop applications, optionally extended by plug-ins or special purpose central servers. This delivery model suffers from several drawbacks, ranging from poor scalability to difficult maintenance and the proliferation of shelfware"". Objective: In this paper we investigate the conceptual and technical feasibility of a new software architecture for modeling tools, where certain advanced features are factored out of the client and moved towards the Cloud. With this approach we plan to address the above mentioned drawbacks of existing modeling tools. Method: We base our approach on RESTful Web services. Using features implemented in the existing Model Analysis and Checking (MACH) tool, we create a RESTful Web service API offering model analysis facilities. We refer to it as the Hypersonic API. We provide a proof of concept implementation for the Hypersonic API using model clone detection as our example case. We also implement a sample Web application as a client for these Web services. Results: Our initial experiments with Hypersonic demonstrate the viability of our approach. By applying standards such as REST and JSON in combination with Prolog as an implementation language, we are able to transform MACH from a command line tool into the first Web-based model clone detection service with remarkably little effort."
"Bianchini D." $ "Deriving folksonomies for improving web API search" $ "Web APIs, that is, software components made available by third parties through web interfaces, can be aggregated to develop web applications, also known as mashups. Also in this application domain, tagging performed by other mashup designers, who used available Web APIs and mashups composed of them, might be exploited as knowledge that progressively emerges from the community of designers. Web API tagging has some peculiar aspects that will be analyzed in this paper. On the other hand, folksonomies are Web 2.0 tools for conceptualizing knowledge emerging from the bottom. In this paper, we discuss the adoption of folksonomy concepts in modeling Web API use for mashup development. We motivate the adoption of folksonomies in this context and we present the differences with other models that represent very close information. Our folksonomy model is meant to be fully compliant with existing and commonly used public Web API repositories. It is not intended to substitute them, but to complement their contents in order to enable advanced Web API search facilities in such a collaborative environment. © Springer-Verlag Berlin Heidelberg 2014."
"Shin J." $ "Investigating the accuracy of the openFDA API using the FDA Adverse Event Reporting System (FAERS)" $ "The US Food and Drug Administration (FDA) Adverse Event Reporting System (FAERS) is a database that contains information on adverse event and medication error reports submitted to the FDA. Each quarter the FDA releases the data to the public, but accessing the data requires researchers to download, import, and consolidate data for every quarter starting from 2004. In an effort to provide easier access to this, the FDA launched the openFDA initiative in June 2014, which gives the public API access to information about adverse events reports. Although the API enables easier access to the FAERS data, the quality of the API design and the features of the data set will determine the reliability of the information retrieved. Thus, errors in the API can result in inaccurate and unreliable data analysis. Furthermore, the number of adverse events reports retrieved by the API for a particular drug can differ from the FAERS data files due to the openFDA harmonization process and the existence of multiple entries and variations for any given drug name in the FAERS data files. Since there are no universal rule that can be used to identify errors or potential issues, we propose evaluating the openFDA API by searching for a particular drug (brand name), Yaz, and the generic name, Drospirenone Ethinyl Estradiol, and comparing the results against the FAERS data files. Our results show that in the case of Yaz, the openFDA API and the drug harmonization process is inaccurate and inconsistent. © 2014 IEEE."
"Sainz F., Mateo S., Beltran V., Bosque J.L., Martorell X., Ayguadé E." $ "Leveraging OmpSs to exploit hardware accelerators" $ "CUDA and OpenCL are the most widely used programming models to exploit hardware accelerators. Both programming models provide a C-based programming language to write accelerator kernels and a host API used to glue the host and kernel parts. Although this model is a clear improvement over a low-level and ad-hoc programming model for each hardware accelerator, it is still too complex and cumbersome for general adoption. For large and complex applications using several accelerators, the main problem becomes the explicit coordination and management of resources required between the host and the hardware accelerators that introduce a new family of issues (scheduling, data transfers, synchronization,...) that the programmer must take into account. In this paper, we propose a simple extension to OmpSs - a data-flow programming model - that dramatically simplifies the integration of accelerated code, in the form of CUDA or OpenCL kernels, into any C, C++ or Fortran application. Our proposal fully replaces the CUDA and OpenCL host APIs with a few pragmas, so we can leverage any kernel written in CUDA C or OpenCL C without any performance impact. Our compiler generates all the boilerplat code while our runtime system takes care of kernels scheduling, data transfers between host and accelerators and synchronizations between host and kernels parts. To evaluate our approach, we have ported several native CUDA and OpenCL applications to OmpSs by replacing all the CUDA or OpenCL API calls by a few number of pragmas. The OmpSs versions of these applications have competitive performance and scalability but with a significantly lower complexity than the original ones. © 2014 IEEE."
"Steele G.L., Jr., Lea D., Flood C.H." $ "Fast splittable pseudorandom number generators" $ "We describe a new algorithm SPLITMIX for an object-oriented and splittable pseudorandom number generator (PRNG) that is quite fast: 9 64-bit arithmetic/logical operations per 64 bits generated. A conventional linear PRNG object provides a generate method that returns one pseudorandom value and updates the state of the PRNG, but a splittable PRNG object also has a second operation, split, that replaces the original PRNG object with two (seemingly) independent PRNG objects, by creating and returning a new such object and updating the state of the original object. Splittable PRNG objects make it easy to organize the use of pseudorandom numbers in multithreaded programs structured using fork-join parallelism. No locking or synchronization is required (other than the usual memory fence immediately after object creation). Because the generate method has no loops or conditionals, it is suitable for SIMD or GPU implementation. We derive SPLITMIX from the DOTMIX algorithm of Leiserson, Schardl, and Sukha by making a series of program transformations and engineering improvements. The end result is an object-oriented version of the purely functional API used in the Haskell library for over a decade, but SPLITMIX is faster and produces pseudorandom sequences of higher quality, it is also far superior in quality and speed to java.util. Random, and has been included in Java JDK8 as the class java.util. SplittableRandom. We have tested the pseudorandom sequences produced by SPLITMIX using two standard statistical test suites (DieHarder and TestU01) and they appear to be adequate for ""everyday"" use, such as in Monte Carlo algorithms and randomized data structures where speed is important. Copyright © 2014 ACM."
"Diprose J.P." $ "Tools for programming human robot interaction" $ "Whilst robots are increasingly being used in scenarios that involve human-robot interaction, it is still difficult to program them to interact with humans. This is because current programming tools either require programmers to work at low abstraction levels or they lack features needed to implement particular aspects of human-robot interaction. Our goal is to create an API that is both capable of programming a wide range of human-robot interaction scenarios and is easy to use by the various users of human-robot interaction programming tools. We have taken a first step toward this API by developing an exemplar, high level API for programming social interaction and evaluating it with the Cognitive Dimensions framework. We plan to explore other aspects of human-robot interaction, including navigation and manipulation and exploring how they should be integrated with our existing primitives for programming social interaction. © 2014 IEEE."
"Lu H.K." $ "Keeping your API keys in a safe" $ "Cloud API (Application Programming Interface) enables client applications to access services and manage resources hosted in the Cloud. To protect themselves and their customers, Cloud service providers (CSP) often require client authentication for each API call. The authentication usually depends on some kind of secret (or called API key), for example, secret access key, password, or access token. As such, the API key unlocks the door to the treasure inside the Cloud. Hence, protecting these keys is critical. It is a difficult task especially on the client side, such as users' computers or mobile devices. How do CSPs authenticate client applications? What are security risks of managing API keys in common practices? How can we mitigate these risks? This paper focuses on finding answers to these questions. By reviewing popular client authentication methods that CSPs use and using Cloud APIs as software developers, we identified various security risks associated with API keys. To mitigate these risks, we use hardware secure elements for secure key provisioning, storage, and usage. The solution replaces the manual key handling with end-to-end security between CSP and its customers' secure elements. This removes the root causes of the identified risks and enhances API security. It also enhances the usability by eliminating manual key operations and alleviating software developers' worries of working with cryptography. © 2014 IEEE."
"Park J.H., Hung J.C., Yen N.Y., Jeong Y.-S." $ "Guest editorial: Advanced convergence technologies: Big data, IoT, cloud computing" $ "The special issue 2014, Volume 15 of Journal of Internet Technology presents an overview of the state-of-the-art of issues and solution guidelines for the Advanced Convergence Technologies, Big Data, IoT and Cloud Computing. Joon-Min Gil and co-researchers presented a user-created computing framework for desktop grids as entitled 'Organizing a User-Created Computing Environment by RESTful Web Service Open APIs in Desktop Grids.' Using the framework, application developers can utilize DGSs easily and conveniently as computational tools in order to solve their own applications. Sadiq Almuairfi and co-researchers compared IPAS with other authentication schemes by performing two experiments and asking participants to answer a questionnaire as entitled 'A Comparative Study of Authentication Schemes with Security and Usability of IPAS.' They explained the usability and security of IPAS from the users' point of view. Prosper Mafole et al. proposed a novel fragmentation scheme called backoff-free fragment retransmission (BFFR)."
"Ertugrul A.M., Onal I." $ "RemindMe: An enhanced mobile location-based reminder application" $ "In this study, a location based reminder application RemindMe, enhanced with various location tagging options using social networking APIs is proposed. Main purpose of this application is to allow users to create reminders based on the location besides time and to notify users with those reminders automatically. In terms of ease of use, a hybrid structure consisting of various components is formed for location tagging. First of all, the user tags the locations using the applications such as Google Maps or Foursquare or via the embedded sensors of the Android device. Then, he creates reminders for the tagged locations and when he gets close to this location, the system notifies the user. Our application is separated from similar applications with its enhanced location tagging feature. Moreover, by consisting of various services, it is open to innovations on the way to become a social reminder application. The usability test results indicate that RemindMe is an effective location based reminder application. © 2014 IEEE."
"Kumar V., Zheng Y., Cavé V., Budimlić Z., Sarkar V." $ "HabaneroUPC++: A compiler-free PGAS library" $ "The Partitioned Global Address Space (PGAS) programming models combine shared and distributed memory features, providing the basis for high performance and high productivity parallel programming environments. UPC++ [39] is a very recent PGAS implementation that takes a library-based approach and avoids the complexities associated with compiler transformations. However, this implementation does not support dynamic task parallelism and only relies on other threading models (e.g., OpenMP or pthreads) for exploiting parallelism within a PGAS place. In this paper, we introduce a compiler-free PGAS library called HabaneroUPC++, which supports a tighter integration of intraplace and inter-place parallelism than standard hybrid programming approaches. The library makes heavy use of C++11 lambda functions in its APIs. C++11 lambdas avoid the need for compiler support while still retaining the syntactic convenience of languagebased approaches. The HabaneroUPC++ library implementation is based on a tight integration of the UPC++ library and the Habanero-C++ library, with new extensions to support the integration. The UPC++ library is used to provide PGAS communication and function shipping support using GASNet, and the Habanero-C++ library is used to provide support for intra-place work-stealing integrated with function shipping. We demonstrate the programmability and performance of our implementation using two benchmarks, scaled up to 6K cores. The insights developed in this paper promise to further enhance the usability and popularity of PGAS programming models. (c) 2014 Association for Computing Machinery. Copyright 2014 ACM 978-1-4503-3247-7/14/10...$15.00."
"Zaghi S." $ "OFF, Open source Finite volume Fluid dynamics code: A free, high-order solver based on parallel, modular, object-oriented Fortran API" $ "OFF, an open source (free software) code for performing fluid dynamics simulations, is presented. The aim of OFF is to solve, numerically, the unsteady (and steady) compressible Navier-Stokes equations of fluid dynamics by means of finite volume techniques: the research background is mainly focused on high-order (WENO) schemes for multi-fluids, multi-phase flows over complex geometries. To this purpose a highly modular, object-oriented application program interface (API) has been developed. In particular, the concepts of data encapsulation and inheritance available within Fortran language (from standard 2003) have been stressed in order to represent each fluid dynamics ""entity"" (e.g. the conservative variables of a finite volume, its geometry, etc...) by a single object so that a large variety of computational libraries can be easily (and efficiently) developed upon these objects. The main features of OFF can be summarized as follows: Programming LanguageOFF is written in standard (compliant) Fortran 2003, its design is highly modular in order to enhance simplicity of use and maintenance without compromising the efficiency, Parallel Frameworks Supported the development of OFF has been also targeted to maximize the computational efficiency: the code is designed to run on shared-memory multi-cores workstations and distributed-memory clusters of shared-memory nodes (supercomputers), the code's parallelization is based on Open Multiprocessing (OpenMP) and Message Passing Interface (MPI) paradigms, Usability, Maintenance and Enhancement in order to improve the usability, maintenance and enhancement of the code also the documentation has been carefully taken into account, the documentation is built upon comprehensive comments placed directly into the source files (no external documentation files needed): these comments are parsed by means of doxygen free software producing high quality html and latex documentation pages, the distributed versioning system referred as git has been adopted in order to facilitate the collaborative maintenance and improvement of the code, CopyrightsOFF is a free software that anyone can use, copy, distribute, study, change and improve under the GNU Public License version 3. The present paper is a manifesto of OFF code and presents the currently implemented features and ongoing developments. This work is focused on the computational techniques adopted and a detailed description of the main API characteristics is reported. OFF capabilities are demonstrated by means of one and two dimensional examples and a three dimensional real application."
"Popelka S., Dedkova P." $ "Extinct village 3D visualization and its evaluation with eye-movement recording" $ "The objective of the project was to create 3D visualization of extinct village and its evaluation using eye-tracking. As an area of interest, extinct village Čistá was selected. The village was located in Karlovy Vary Region in Czech Republic and was destroyed in 1948. The purpose of destroying the village was emerging of military training area. Second purpose was to create instructional video for military purposes ""Fight in the settlement"". During the creation of this video, the village was destroyed. The main content of the project was to create an interactive web application that includes 3D model of the extinct village Čistá. As underlying data, aerial photos made in 1947 and stable cadastre from 1841 were used. Buildings were made according to historical photographs and screen shots from instruction video ""Fight in a settlement"". Resulting 3D model and underlying data were loaded into Google Earth API and are available for the general public now. The last part was to test the model usability using eye-tracking. In total, 28 respondents participated in the experiment. The experiment contained three parts - the overall views of the village, details of the model and tasks, where users were searching for particular building. Results from testing were of statistical and graphical nature. Link to the application was placed on the web site of the project of an educational trail about extinct villages in Slavkov forest area. Created 3D model and application present the extinct village Čistá to potential visitors the educational trail. © 2014 Springer International Publishing."
"Spiza S., Hanenberg S." $ "Type names without static type checking already improve the usability of APIs (As Long as the Type Names are Correct): An Empirical Study" $ "In the discussion about the usefulness of static or dynamic type systems there is often the statement that static type systems improve the documentation of software. In the meantime there exists even some empirical evidence for this statement. One of the possible explanations for this positive influence is that the static type system of programming languages such as Java require developers to write down the type names, i.e. lexical representations which potentially help developers. Because of that there is a plausible hypothesis that the main benefit comes from the type names and not from the static type checks that are based on these names. In order to argue for or against static type systems it is desirable to check this plausible hypothesis in an experimental way. This paper describes an experiment with 20 participants that has been performed in order to check whether developers using an unknown API already benefit (in terms of development time) from the pure syntactical representation of type names without static type checking. The result of the study is that developers do benefit from the type names in an API's source code. But already a single wrong type name has a measurable significant negative impact on the development time in comparison to APIs without type names. Copyright © 2014 ACM. Copyright © 2014 ACM."
"Khan H., Atwater A., Hengartner U." $ "Itus: An implicit authentication framework for android" $ "Security and usability issues with pass-locks on mobile devices have prompted researchers to develop implicit authentication (IA) schemes, which continuously and transparently authenticate users using behavioural biometrics. Contemporary IA schemes proposed by the research community are challenging to deploy, and there is a need for a framework that supports: different behavioural classifiers, given that different apps have different requirements, app developers using IA without becoming domain experts, and real-time classification on resource-constrained mobile devices. We present Itus, an IA framework for Android that allows the research community to improve IA schemes incrementally, while allowing app developers to adopt these improvements at their own pace. CopyrightWe describe the Itus framework and how it provides: ease of use: Itus allows app developers to use IA by changing as few as two lines of their existing code|on the other hand, Itus provides an oracle capable of making advanced recommendations should developers wish to fine-tune the classifiers, exibility: developers can deploy Itus in an application-specific manner, adapting to their unique needs, extensibility: researchers can contribute new behavioural features and classifiers without worrying about deployment particulars, low performance overhead: Itus operates with minimal performance overhead, allowing app developers to deploy it without compromising end-user experience. These goals are accomplished with an API allowing individual stakeholders to incrementally improve Itus without reengineering new systems. We implement Itus in two demo apps and measure its performance impact. To our knowledge, Itus is the first open-source extensible IA framework for Android that can be deployed off-the-shelf. © 2014 by the Association for Computing Machinery, Inc. (ACM)."
"Stroggylos K., Mitropoulos D., Tzermias Z., Papadopoulos P., Rafailidis F., Spinellis D., Ioannidis S., Katsaros P." $ "TRACER: A platform for securing legacy code" $ "A security vulnerability is a programming error that introduces a potentially exploitable weakness into a computer system. Such a vulnerability can severely affect an organization's infrastructure and cause significant financial damage to it. Hence, one of the basic pursuits in every new software release should be to mitigate such defects. A number of tools and techniques are available for performing vulnerability detection in software written in various programming platforms. One of the most common approaches to identify software vulnerabilities is static analysis [1]. This kind of analysis is performed by automated tools either on the program's source or object code and without actually executing it. However, since the formats in which static analysis tools store and present their results vary wildly, it is typically difficult to utilize many of them in the scope of a project. By automating the process of running a variety of vulnerability detectors and collecting their results in an efficient manner during development, the task of tracking security defects throughout the evolution history of software projects can be simplified. In this paper we present TRACER, a framework to support the development of secure applications by constantly monitoring software projects for vulnerabilities. TRACER simplifies the integration of existing tools that detect software vulnerabilities and promotes their use during development and maintenance. Instead of designing and implementing TRACER from the ground up, we built it on top of the open source Alitheia Core [2] platform, which is designed for facilitating large scale quantitative software engineering studies. While Alitheia Core aims for efficient estimation of the quality of software projects, TRACER was designed with a focus on software security. To support the specific objectives of TRACER, a set of new components was added at each level of the Alitheia Core architecture. These include a model for representing software vulnerabilities, a mechanism for automatic vulnerability detection triggering, a REST API for accessing the analysis results, and an archetype for plug-ins to integrate new vulnerability detection tools in the platform. Like Alitheia Core, TRACER monitors multiple data sources associated with the development of a software project, such as the source code repository and bug tracking system, and automatically analyzes each revision. Therefore it can be used to track security defects throughout the evolution of a project. In most cases, the detection of vulnerabilities on a software artifact involves only two steps: invoking an external tool created for this purpose with specific arguments as required, and evaluating the results it generates. There is a vast number of software vulnerability detection tools available, each one having different operating requirements. Such a tool can be integrated in TRACER by creating a corresponding driver that implements these two steps and stores the results using the data model provided by the platform. Thus we can leverage the functionality provided by existing tools, without duplicating it. Such an external tool driver is called a vulnerability detector plug-in, and it uses the Alitheia Core infrastructure to handle automatic activation, as well as storage and retrieval of results. Each vulnerability detector is associated with the set of vulnerability types it can detect and the different types of software artifacts or programming constructs that it can analyze. This allows the platform to automatically trigger it when needing to check if a software project or artifact is vulnerable to a specific type of attacks or a new artifact is submitted to the system for evaluation. To demonstrate the efficiency and usability of the platform, we have created plug-ins to integrate two different tools for vulnerability detection, namely: FindBugs [3], and Frama-c [4]. The former analyzes applications written in Java, while the latter examines applications written in c. This highlights the fact that our platform does not depend on the programming language used to develop the project that is being analyzed, and that the simplicity of integrating third party tools leads to high levels of expandability of the platform. © 2014 Springer International Publishing."
"Wang W., Godfrey M.W." $ "Detecting API usage obstacles: A study of iOS and android developer questions" $ "Software frameworks provide sets of generic functionalities that can be later customized for a specific task. When developers invoke API methods in a framework, they often encounter obstacles in finding the correct usage of the API, let alone to employ best practices. Previous research addresses this line of questions by mining API usage patterns to induce API usage templates, by conducting and compiling interviews of developers, and by inferring correlations among APIs. In this paper, we analyze API-related posts regarding iOS and Android development from a Q&A website, stackoverflow.com. Assuming that API-related posts are primarily about API usage obstacles, we find several iOS and Android API classes that appear to be particularly likely to challenge developers, even after we factor out API usage hotspots, inferred by modelling API usage of open source iOS and Android applications. For each API with usage obstacles, we further apply a topic mining tool to posts that are tagged with the API, and we discover several repetitive scenarios in which API usage obstacles occur. We consider our work as a stepping stone towards understanding API usage challenges based on forum-based input from a multitude of developers, input that is prohibitively expensive to collect through interviews. Our method helps to motivate future research in API usage, and can allow designers of platforms - such as iOS and Android - to better understand the problems developers have in using their platforms, and to make corresponding improvements. © 2013 IEEE."
"Wang J., Dang Y., Zhang H., Chen K., Xie T., Zhang D." $ "Mining succinct and high-coverage API usage patterns from source code" $ "During software development, a developer often needs to discover specific usage patterns of Application Programming Interface (API) methods. However, these usage patterns are often not well documented. To help developers to get such usage patterns, there are approaches proposed to mine client code of the API methods. However, they lack metrics to measure the quality of the mined usage patterns, and the API usage patterns mined by the existing approaches tend to be many and redundant, posing significant barriers for being practical adoption. To address these issues, in this paper, we propose two quality metrics (succinctness and coverage) for mined usage patterns, and further propose a novel approach called Usage Pattern Miner (UP-Miner) that mines succinct and high-coverage usage patterns of API methods from source code. We have evaluated our approach on a large-scale Microsoft codebase. The results show that our approach is effective and outperforms an existing representative approach MAPO. The user studies conducted with Microsoft developers confirm the usefulness of the proposed approach in practice. © 2013 IEEE."
"Moritz E., Linares-Vasquez M., Poshyvanyk D., Grechanik M., McMillan C., Gethers M." $ "ExPort: Detecting and visualizing API usages in large source code repositories" $ "This paper presents a technique for automatically mining and visualizing API usage examples. In contrast to previous approaches, our technique is capable of finding examples of API usage that occur across several functions in a program. This distinction is important because of a gap between what current API learning tools provide and what programmers need: current tools extract relatively small examples from single files/functions, even though programmers use APIs to build large software. The small examples are helpful in the initial stages of API learning, but leave out details that are helpful in later stages. Our technique is intended to fill this gap. It works by representing software as a Relational Topic Model, where API calls and the functions that use them are modeled as a document network. Given a starting API, our approach can recommend complex API usage examples mined from a repository of over 14 million Java methods. © 2013 IEEE."
"Piccioni M., Furia C.A., Meyer B." $ "An empirical study of API usability" $ "Modern software development extensively involves reusing library components accessed through their Application Programming Interfaces (APIs). Usability is therefore a fundamental goal of API design, but rigorous empirical studies of API usability are still relatively uncommon. In this paper, we present the design of an API usability study which combines interview questions based on the cognitive dimensions framework, with systematic observations of programmer behavior while solving programming tasks based on ''tokens''. We also discuss the implementation of the study to assess the usability of a persistence library API (offering functionalities such as storing objects into relational databases). The study involved 25 programmers (including students, researchers, and professionals), and provided additional evidence to some critical features evidenced by related studies, such as the difficulty of finding good names for API features and of discovering relations between API types. It also discovered new issues relevant to API design, such as the impact of flexibility, and confirmed the crucial importance of accurate documentation for usability. © 2013 IEEE."
"Amini R., Lisetti C." $ "HapFACS: An open source API/Software to generate FACS-based expressions for ECAs animation and for corpus generation" $ "We present HapFACS (ver. beta), a new open source software and API for generating FACS-based facial expressions on 3D virtual characters that have accompanying lip-synchronized animation abilities. HapFACS has two main usage scenarios: First, with the HapFACS software, users can generate repertoires of realistic FACS-validated facial expressions, either as static images or as videos, Second, with the accessible HapFACS API, users can animate speaking virtual characters with real-time realistic facial expressions, and embed these expressive characters in their own application(s) without any prior experience in computer graphics and modeling. We describe how HapFACS (1) provides control over 49 FACS Action Units at all levels of intensity, (2) enables the animation of faces with a single AU or a composition of AUs, activated unilaterally or bilaterally, and (3) can be applied to any supported character in the underlying 3D-character system. Finally, we provide details of evaluation experiments we conducted with FACS-certified scorers to validate the facial expressions generated by HapFACS. © 2013 IEEE."
"Cardoso J.C.S., José R." $ "Evaluation of a programming toolkit for interactive public display applications" $ "Interaction is repeatedly pointed out as a key enabling element towards more engaging and valuable public displays. Still, most digital public displays today do not support any interactive features. We argue that this is mainly due to the lack of efficient and clear abstractions that developers can use to incorporate interactivity into their applications. As a consequence, interaction represents a major overhead for developers, and users are faced with inconsistent interaction models across different displays. This paper describes the results of the evaluation of a widget toolkit for generalized interaction with public displays. Our toolkit was developed for web-based applications and it supports multiple interaction mechanisms, automatically generated graphical interfaces, asynchronous events and concurrent interaction. We have evaluated the toolkit along various dimensions - system performance, API usability, and real-world deployment - and we present and discuss the results in this paper. © 2013 ACM."
"Fujimoto T., Nishimura K., Takahashi K., Yachi M., Takahashi K., Yamauchi Y." $ "Global math: Development of online platform for mathematical thinking games" $ "While some gaming portals provide learning-based games, most of them either merely showcase games without offering any function for user feedback for the developers or do not provide open access to individual developers, even if a website has functions for data collection. Therefore, it is difficult for individual developers and small independent teams to obtain user feedback for making enhancements in their games in the prototyping phase. The purpose of this research is to develop and evaluate an open online platform system to host mathematical thinking games. Through a joint research project in collaboration with the University of Tokyo and Benesse Corporation, we have developed the 'Global Math' platform, which is an open online platform to host mathematical thinking games for Indie game developers and students interested in developing learning games. The platform features the 'Global Math API', which enables game developers to obtain play log data by simply registering and embedding certain JavaScript codes. The API offers an interface that stores play log data in the Global Math platform database. The platform offers data-analytic functions to monitor how the games are played and received by audiences. As a formative assessment of the platform in terms of usability and effectiveness, four teams of undergraduate students who study game design participated in a game design project using the platform. The teams worked on the project for two months and uploaded four game prototypes successfully. The survey findings indicate that the students found that this project offered them an opportunity to think about different aspects of game design that they had not considered previously, and they found it appealing to develop mathematical learning games. It showed that developing mathematical games can be engaging for students as long as they are provided with the necessary resources. The survey also indicates that more instructional and technical support for developers is necessary to use the functions of the platform."
"Dayarathna M., Suzumura T." $ "A first view of exedra: A domain-specific language for large graph analytics workflows" $ "In recent years, many programming models, software libraries, and middleware have appeared for processing large graphs of various forms. However, there exists a significant usability gap between the graph analysis scientists, and High Performance Computing (HPC) application programmers due to the complexity of HPC graph analysis software. In this paper we provide a basic view of Exedra, a domain-specific language (DSL) for large graph analysis in which we aim to eliminate the aforementioned complexities. Exedra consists of high level language constructs for specifying different graph analysis tasks on distributed environments. We implemented Exedra DSL on a scalable graph analysis platform called Dipper. Dipper uses Igraph/R interface for creating graph analysis workflows which in turn gets translated to Exedra statements. Exedra statements are interpreted by Dipper interpreter, and gets mapped to user specified libraries/ middleware. Exedra DSL allows for synthesize of graph algorithms that are more efficient compared to bare use of graph libraries while maintaining a standard interface that could use even future graph analysis software. We evaluated Exedra's feasibility for expressing graph analysis tasks by running Dipper on a cluster of four nodes. We observed that Dipper has the ability of reducing the time taken for graph analysis when the workflow was distributed on all four nodes despite the communication, and data format conversion overhead of the Dipper framework."
"Hu R., Neykova R., Yoshida N., Demangeon R., Honda K." $ "Practical interruptible conversations: Distributed dynamic verification with session types and Python" $ "The rigorous and comprehensive verification of communication-based software is an important engineering challenge in distributed systems. Drawn from our industrial collaborations [33,28] on Scribble, a choreography description language based on multiparty session types, this paper proposes a dynamic verification framework for structured interruptible conversation programming. We first present our extension of Scribble to support the specification of asynchronously interruptible conversations. We then implement a concise API for conversation programming with interrupts in Python that enables session types properties to be dynamically verified for distributed processes. Our framework ensures the global safety of a system in the presence of asynchronous interrupts through independent runtime monitoring of each endpoint, checking the conformance of the local execution trace to the specified protocol. The usability of our framework for describing and verifying choreographic communications has been tested by integration into the large scientific cyberinfrastructure developed by the Ocean Observatories Initiative. Asynchronous interrupts have proven expressive enough to represent and verify their main classes of communication patterns, including asynchronous streaming and various timeout-based protocols, without requiring additional synchronisation mechanisms. Benchmarks show conversation programming and monitoring can be realised with little overhead. © 2013 Springer-Verlag."
"De Roover C., Lammel R., Pek E." $ "Multi-dimensional exploration of API usage" $ "This paper is concerned with understanding API usage in a systematic, explorative manner for the benefit of both API developers and API users. There exist complementary, less explorative methods, e.g., based on code search, code completion, or API documentation. In contrast, our approach is highly interactive and can be seen as an extension of what IDEs readily provide today. Exploration is based on multiple dimensions: i) the hierarchically organized scopes of projects and APIs, ii) metrics of API usage (e.g., number of project classes extending API classes), iii) metadata for APIs, iv) project- versus API-centric views. We also provide the QUAATLAS corpus of Java projects which enhances the existing QUALITAS corpus to enable API-usage analysis. We implemented the exploration approach in an open-source, IDE-like, Web-enabled tool EXAPUS. © 2013 IEEE."
"Katayama S.-Y., Goda T., Shiramatsu S., Ozono T., Shintani T." $ "A fast synchronization mechanism for collaborative web applications based on HTML5" $ "We are developing a collaborative web application for editing PDF documents using web browsers. Our system enables users to edit the same document in real-time. Users can share annotations on papers in real-time on web browsers. One of the advantages of our system is very high availability. Users only need to have their own web browsers. To improve the usability of our system, we need to consider synchronization delay. Synchronization delay consists of network delay and drawing delay. Our system draws PDF files by using JavaScript, it is not fast enough for real-time collaborative editing. We propose a new synchronization method using Canvas API to reduce drawing delay. We show how to implement a real-time collaborative editing system by using the method. We present evaluation results that indicate the method is suited for collaborative web applications. © 2013 IEEE."
"Blom S., Kiniry J., Huisman M." $ "How do developers use APIs? A case study in concurrency" $ "With the omnipresent usage of APIs in software development, it has become important to analyse how the routines and functionalities of APIs are actually used. This information is in particular useful for API developers, to make decisions about future updates of the API. However, also for developers of static analysis and verification tools this information is highly important, because it indicates where and how to put the most efficient effort in annotating APIs, to make them usable for the static analysis and verification tools. This paper presents an analysis of the usage of the routines and functionalities of the Java concurrency library java. util. concurrent. It discusses the Histogram tool that we developed for this purpose, i.e., to efficiently analyse a large collection of bytecode classes. The Histogram tool is used on a representative benchmark set, the Qualitas Corpus. The paper discusses the results of the analysis of this benchmark set in detail. This covers both an analysis of the important classes and methods used by the current releases of the benchmark collection, as well as an analysis of the time it took for the Java concurrency library to start being used in released software. © 2013 IEEE."
"Klein F., Rubinsteiny D., Sonsz K., Einabadix F., Herhut S., Slusallek P." $ "Declarative AR and image processing on the Web with Xflow" $ "Recently, modernWeb browser became capable of supporting powerful, interactive 3D graphics both via the low-level, imperative API of WebGL as well as via a high-level, declarative approach like XML3D. The obvious next step (particularly with respect to mobile platforms) is to combine video from the real world with matched virtual content - Augmented or Mixed Reality (AR/MR). However, AR requires extensive image or video processing, feature detection and tracking, and applying the results to 3D rendering - all of which is hard to implement in a Web context. In this paper we present a novel approach that encapsulates lowlevel image-processing and AR operations into re-usable high-level XML3D/Xflow components that are part of the HTML-5 DOM. A Web developer can then easily and flexibly arrange these components into (possibly complex) processing flow-graphs without having to worry about the internal computations and the structure of these modules. Our extended Xflow implementation automatically optimizes, schedules, and synchronizes the processing of the flow graph(s) in the context of real-time 3D rendering. Finally, we provide an integration model that greatly simplifies building AR applications for the browser. We demonstrate this with several simple AR and image processing applications using a polyfill implementation working in all modern browsers and evaluate the performance. Finally, we show how the declarative framework can be optimized with respect to performance and usability using parallelization with Web Workers and RiverTrail. Copyright © ACM 978-1-4503-2133-4/13/06 $15.00."
"Khatoon S., Mahmood A., Li G., Xu J." $ "A novel integrated framework to increase software quality by mining source code" $ "Source code contain lot of structural features that embody latent information that if identified can help software engineers to develop quality software in least amount of time. For instance, many programming rules are hidden in set of function calls, variable usage, data accesses in functions, object interaction etc. that seldom exist outside the minds of developers. Violations of these rules may introduce bugs which are difficult to uncover, report to bug-tracking systems and fix unless the rules are explicitly documented and made available to the development team. In order to address this problem there is a need to apply strong analysis techniques on source code to find latent programming patterns that can be potentially useful for performing various software engineering tasks. This study demonstrates how data mining techniques can be applied on source code to improve software quality and productivity by proposing a framework. This new approach is able to find different programming patterns such as programming rules, variable correlation, code clones and frequent API usage patterns. Furthermore, efficient algorithms are proposed to automatically detect violation to the extracted rules. Proposed framework is validated by developing a prototype and evaluated on various projects of significant size and complexity. Results shows proposed technique greatly reduced time and cost of manually checking defects from source code by programmers. © 2013 Academic Journals Inc."
"Khatoon S., Li G., Mahmood A." $ "Comparison and evaluation of source code mining tools and techniques: A qualitative approach" $ "Program source code substantially is structured and contains semantically rich programming constructs such as variables, functions, data structures, and program structures which indicate patterns. Mining source code by using different data mining techniques to extract the valuable hidden patterns is the new revolution in software engineering. Over last decade many tools and techniques have been proposed by researcher to extract pertinent information and uncover relationships and trends from source code about a particular characteristic of Software Engineering (SE) tasks. These efforts have resulted in wide range of research body but currently there is no comprehensive overview exists. This paper surveys the tools and techniques which rely only on data mining methods to determine patterns from source code in context of programming, bug detection, maintenance, program understanding and software reuse. The work provides comparison and evaluation of the current state-of-the-art source code mining tools and techniques, and organizes the large amount of information into a coherent conceptual way. Thus the survey provides researchers with a concise overview of source code mining techniques and assists practitioners the selection of appropriate techniques for their work. The result of this review shows existing studies focus on one specific pattern being mined from source code such as special kind of bug detection. Thus, there is a need of multiple tools to test and find potential information from software which increase cost and time of development. Hence there is a strong need of tool which helps in developing quality software by automatically detecting different kind of bugs and generates relevant API code automatically to help in decreasing overall software development time. © 2013-IOS Press and the authors. All rights reserved."
"Senseney J., Bokinsky A., Cheng R., McCreedy E., McAuliffe M.J." $ "Java multi-histogram volume rendering framework for medical images" $ "This work extends the multi-histogram volume rendering framework proposed by Kniss et al. [1] to provide rendering results based on the impression of overlaid triangles on a graph of image intensity versus gradient magnitude. The developed method of volume rendering allows for greater emphasis to boundary visualization while avoiding issues common in medical image acquisition. For example, partial voluming effects in computed tomography and intensity inhomogeneity of similar tissue types in magnetic resonance imaging introduce pixel values that will not reflect differing tissue types when a standard transfer function is applied to an intensity histogram. This new framework uses developing technology to improve upon the Kniss multi-histogram framework by using Java, the GPU, and MIPAV, an open-source medical image processing application, to allow multi-histogram techniques to be widely disseminated. The OpenGL view aligned texture rendering approach suffered from performance setbacks, inaccessibility, and usability problems. Rendering results can now be interactively compared with other rendering frameworks, surfaces can now be extracted for use in other programs, and file formats that are widely used in the field of biomedical imaging can be visualized using this multi-histogram approach. OpenCL and GLSL are used to produce this new multi-histogram approach, leveraging texture memory on the graphics processing unit of desktops to provide a new interactive method for visualizing biomedical images. Performance results for this method are generated and qualitative rendering results are compared. The resulting framework provides the opportunity for further applications in medical imaging, both in volume rendering and in generic image processing. © 2013 SPIE."
"Businge J., Serebrenik A., Van Den Brand M." $ "Analyzing the eclipse API usage: Putting the developer in the loop" $ "Eclipse guidelines distinguish between two types of interfaces provided to third-party developers, i.e., APIs and non-APIs. APIs are stable and supported, while non-APIs are unstable, unsupported and discouraged as they are subject to arbitrary change or removal without notice. In our previous work, we found that despite the discouragement of Eclipse, the use of non-APIs in Eclipse third-party plug-ins (ETPs) is not uncommon. Furthermore, we found that these non-APIs are the main cause of ETP incompatibilities in forthcoming releases of the Eclipse. In the current work we conducted a survey aiming at understanding why do the ETP developers use non-APIs. We have observed that developers with a level of education of up to master degree have a tendency not to read product manuals/guidelines. Furthermore, while for less experienced developers instability of the non-APIs overshadows their benefits, more experienced developers prefer to enjoy the benefits of non-APIs despite the instability problem. Finally, we have observed that there are no significant differences between Open Source and commercial Eclipse products in terms of awareness of Eclipse guidelines and interfaces, Eclipse product size and updating of Eclipse product in the new SDK releases. © 2013 IEEE."
"Robillard M.P., Bodden E., Kawrykow D., Mezini M., Ratchford T." $ "Automated API property inference techniques" $ "Frameworks and libraries offer reusable and customizable functionality through Application Programming Interfaces (APIs). Correctly using large and sophisticated APIs can represent a challenge due to hidden assumptions and requirements. Numerous approaches have been developed to infer properties of APIs, intended to guide their use by developers. With each approach come new definitions of API properties, new techniques for inferring these properties, and new ways to assess their correctness and usefulness. This paper provides a comprehensive survey of over a decade of research on automated property inference for APIs. Our survey provides a synthesis of this complex technical field along different dimensions of analysis: properties inferred, mining techniques, and empirical results. In particular, we derive a classification and organization of over 60 techniques into five different categories based on the type of API property inferred: unordered usage patterns, sequential usage patterns, behavioral specifications, migration mappings, and general information. © 1976-2012 IEEE."
"Scheller T., Kühn E." $ "Influence of code completion methods on the usability of APIs" $ "Code completion is an important feature in modern IDEs, helping programmers to find needed classes and methods in external APIs. A code completion mechanism defines the way APIs are presented to the programmer and thereby has a strong influence on their usability. In this paper, we present a study that evaluates the code completion mechanisms of popular Java and .Net IDEs. It shows that there are significant differences between them, and that with a good code completion mechanism, programmers more often find the most optimal methods and overloads, reducing the complexity of the resulting code and improving overall performance. Based on the results we present suggestions to improve the usability of APIs."
"Fischer J.E., Ramchurn S.D., Osborne M.A., Parson O., Huynh T.D., Alam M., Pantidi N., Moran S., Bachour K., Reece S., Costanza E., Rodden T., Jennings N.R." $ "Recommending energy tariffs and load shifting based on smart household usage profiling" $ "We present a system and study of personalized energy-related recommendation. AgentSwitch utilizes electricity usage data collected from users' households over a period of time to realize a range of smart energy-related recommendations on energy tariffs, load detection and usage shifting. The web service is driven by a third party real-time energy tariff API (uSwitch), an energy data store, a set of algorithms for usage prediction, and appliance-level load disaggregation. We present the system design and user evaluation consisting of interviews and interface walkthroughs. We recruited participants from a previous study during which three months of their household's energy use was recorded to evaluate personalized recommendations in AgentSwitch. Our contributions are a) a systems architecture for personalized energy services, and b) findings from the evaluation that reveal challenges in designing energy-related recommender systems. In response to the challenges we formulate design recommendations to mitigate barriers to switching tariffs, to incentivize load shifting, and to automate energy management. Copyright © 2013 ACM."
"Mendez D., Baudry B., Monperrus M." $ "Empirical evidence of large-scale diversity in API usage of object-oriented software" $ "In this paper, we study how object-oriented classes are used across thousands of software packages. We concentrate on ""usage diversity"", defined as the different statically observable combinations of methods called on the same object. We present empirical evidence that there is a significant usage diversity for many classes. For instance, we observe in our dataset that Java's String is used in 2460 manners. We discuss the reasons of this observed diversity and the consequences on software engineering knowledge and research. © 2013 IEEE."
"[No author name available]" $ "IEEE 13th International Working Conference on Source Code Analysis and Manipulation, SCAM 2013" $ "The proceedings contain 24 papers. The topics discussed include: empirical investigation of SEA-based dependence cluster properties, characterization and assessment of the Linux configuration complexity, criticality of defects in cyclic dependent components, code clustering workbench, empirical evidence of large-scale diversity in API usage of object-oriented software, aspectual source code analysis with GASR, driving a sound static software analyzer with branch-and-bound, PtrTracker: pragmatic pointer analysis, tracing with minimal number of probes, a state alteration and inspection-based interactive debugger, Proteum/FL: a mutation-based fault localization Tool, Gecos: an extensible source-to-source compiler for embedded hardware, review efforts reduction by partitioning of static analysis warnings, determining coupling in JavaScript using object type inference, MetricMiner: supporting researchers in mining software repositories, and fix-it: an extensible code auto-fix component in review Bot."
"Khan M.A., Muhammad S., Muhammad T." $ "Runtime invocation analysis of API objects in large code base" $ "Software systems use several third party libraries via their available interfaces popularly known as the application programming interface (API). The runtime usage of the API in an object-oriented software system can be defined by several characteristics including the type and number of API objects created, the methods invoked on those objects, and the source code locations from where the objects were created or invoked during their lifetime. These characteristics can be used to identify the source code locations exhibiting different types of runtime behavior which can be used for program comprehension, debugging, performance monitoring and fault detection. In this paper, we define object invocation model based on above-mentioned characteristics. We also propose an implementation framework that can be used to extract key model parameters from any source code. The Java Collections API is one of the most widely used Java APIs. We demonstrate effectiveness of our proposed approach by analyzing object invocation model for Java Collection API in a large open source project. © 2013 IEEE."
"Lawall J.L., Brunel J., Palix N., Hansen R.R., Stuart H., Muller G." $ "WYSIWIB: Exploiting fine-grained program structure in a scriptable API-usage protocol-finding process" $ "Bug-finding tools rely on specifications of what is correct or incorrect code. As it is difficult for a tool developer or user to anticipate all possible specifications, strategies for inferring specifications have been proposed. These strategies obtain probable specifications by observing common characteristics of code or execution traces, typically focusing on sequences of function calls. To counter the observed high rate of false positives, heuristics have been proposed for ranking or pruning the results. These heuristics, however, can result in false negatives, especially for rarely used functions. In this paper, we propose an alternate approach to specification inference, in which the user guides the inference process using patterns of code that reflect the user's understanding of the conventions and design of the targeted software project. We focus on specifications describing the correct usage of API functions, which we refer to as API protocols. Our approach builds on the Coccinelle program matching and transformation tool, which allows a user to construct patterns that reflect the structure of the code to be matched. We evaluate our approach on the source code of the Linux kernel, which defines a very large number of API functions with varying properties. Linux is also critical software, implying that fixing even bugs involving rarely used protocols is essential. In our experiments, we use our approach to find over 3000 potential API protocols, with an estimated false positive rate of under 15% and use these protocols to find over 360 bugs in the use of API functions. © 2012 John Wiley & Sons, Ltd."
"Ghosh S., Liao T., Calandra H., Chapman B.M." $ "Performance of CPU/GPU compiler directives on ISO/TTI kernels" $ "GPUs are slowly becoming ubiquitous devices in High Performance Computing, as their capabilities to enhance the performance per watt of compute intensive algorithms as compared to multicore CPUs have been identified. The primary shortcoming of a GPU is usability, since vendor specific APIs are quite different from existing programming languages, and it requires a substantial knowledge of the device and programming interface to optimize applications. Hence, lately a growing number of higher level programming models are targeting GPUs to alleviate this problem. The ultimate goal for a high-level model is to expose an easy-to-use interface for the user to offload compute intensive portions of code (kernels) to the GPU, and tune the code according to the target accelerator to maximize overall performance with a reduced development effort. In this paper, we share our experiences of three of the notable high-level directive based GPU programming models—PGI, CAPS and OpenACC (from CAPS and PGI) on an Nvidia M2090 GPU. We analyze their performance and programmability against Isotropic (ISO)/Tilted Transversely Isotropic (TTI) finite difference kernels, which are primary components in the Reverse Time Migration (RTM) application used by oil and gas exploration for seismic imaging of the sub-surface. When ported to a single GPU using the mentioned directives, we observe an average 1.5–1.8x improvement in performance for both ISO and TTI kernels, when compared with optimized multi-threaded CPU implementations using OpenMP. © 2013, Springer-Verlag Wien."
"Störrle H." $ "Improving the usability of OCL as an ad-hoc model querying language" $ "The OCL is often perceived as di-cult to learn and use. In previous research, we have defined experimental query languages exhibiting higher levels of usability than OCL. However, none of these alternatives can rival OCL in terms of adoption and support. In an attempt to leverage the lessons learned from our research and make it accessible to the OCL community, we propose the OCL Query API (OQAPI), a library of query-predicates to improve the user-friendliness of OCL for ad-hoc querying. The usability of OQAPI is studied using controlled experiments. We find considerable evidence to support our claim that OQAPI facilitates user querying using OCL."
"Burns C., Ferreira J., Hellmann T.D., Maurer F." $ "Usable results from the field of API usability: A systematic mapping and further analysis" $ "Modern software development often involves the use of complex, reusable components called Application Programming Interfaces (APIs). Developers use APIs to complete tasks they could not otherwise accomplish in a reasonable time. These components are now vital to mainstream software development. But as APIs have become more important, understanding how to make them more usable is becoming a significant research question. To assess the current state of research in the field, we conducted a systematic mapping. A total of 28 papers were reviewed and categorized based on their research type and on the evaluation method employed by its authors. We extended the analysis of a subset of the papers we reviewed beyond the usual limits of a systematic map in order to more closely examine details of their evaluations - such as their structure and validity - and to summarize their recommendations. Based on these results, common problems in the field are discussed and future research directions are suggested. © 2012 IEEE."
"Munir M.B., Mushtaq A." $ "A framework for extending usability engineering: API usability essentials: Extending usability via component-based platform" $ "Application Programming Interface (API) in software development acts as an important milestone for software productions. It is believed that API usability impacts upon ease-in-use, operationability and acceptability among its audience. Likewise, an ever increasing need for extending and integrating Usability Engineering (UE) has become vital for the success of software products. Earlier researches within this domain do not address API's usability via a component-based framework approach. The proposed framework emphasizes on consolidated formulation of various usability and quality models to derive chunks of dimensional variables. Further the paper highlights API usability practices and heuristics applied in API development process and discusses API product's artifacts component to be used in deriving further product-related components to support enhancing usability. © 2012 IEEE."
"Raemaekers S., Van Deursen A., Visser J." $ "Measuring software library stability through historical version analysis" $ "Backward compatibility is a major concern for any library developer. In this paper, we evaluate how stable a set of frequently used third-party libraries is in terms of method removals, implementation change, the ratio of change in old methods to change in new ones and the percentage of new methods in each snapshot. We provide a motivating example of a commercial company which demonstrates several issues associated with the usage of third-party libraries. To obtain dependencies from software systems we developed a framework which extracts dependencies from Maven build files and which analyzes system and library code. We propose four metrics which provide different insights in the implementation and interface stability of a library. The usage frequency of library methods is utilized as a weight in the final metric and is obtained from a dataset of more than 2300 snapshots of 140 industrial Java systems. We finally describe three scenarios and an example of the application of our metrics. © 2012 IEEE."
"Tapia B., Torres R., Astudillo H., Ortega P." $ "Recommending APIs for mashup completion using association rules mined from real usage data" $ "Mashups are becoming the de facto approach to build customer-oriented Web applications, by combining several Web APIs into a single lightweight, rich, customized Web front-end. To help mashup builders to choose among a plethora of available APIs to assemble in their mashups, some existing recommendation techniques rank candidate APIs using popularity (a social measure) or keyword-based measures (whether semantic or unverified tags). This article proposes to use information on co-usage of APIs in previous mash ups to suggest likely candidate APIs, and introduces a global measure which improves on earlier local co-API measures. The gCAR (global Co-utilization API Ranking) is calculated using association rules inferred from historical API usage data. The MashupRECO tool combines gCAR and a keywordbased measure, to avoid the 'cold-start' problem for new or unused APIs. Evaluation of MashupRECO versus the keyword search of the well-known ProgrammableWeb catalog show that the tool reduces the search time for comparable degree of completeness. © 2011 IEEE."
"Keller R., Brinkmann S., Gracia J., Niethammer C." $ "Temanejo: Debugging of thread-based task-parallel programs in StarSS" $ "To make use of manycore processors and even accelerators, several parallel programming paradigms exist, such as OpenMP, CAPS HMPP and the StarSs programming model. All of these programming models provide the means for programmers to express parallelism in the source code, identifying tasks and for all but OpenMP the dependency between those, allowing the compiler and the runtime to schedule tasks onto multiple concurrent executing entities, like threads in a many-core systems.While the programmermay have a good overview of which parts of the code may be run independently as separate tasks on a fine granular level, the overall execution behavior may not be obvious at first. This paper describes the usability features of the newly developed Temanejo debugger. © Springer-Verlag Berlin Heidelberg 2012."
"Jacob F., Gray J., Carver J.C., Mernik M., Bangalore P." $ "PPModel: A modeling tool for source code maintenance and optimization of parallel programs" $ "As the computation power in desktops advances, parallel programming has emerged as one of the essential skills needed by next generation software engineers. However, programs written in popular parallel programming paradigms have a substantial amount of sequential code mixed with the parallel code. Several such versions supporting different platforms are necessary to find the optimum version of the program for the available resources and problem size. As revealed by our study on benchmark programs, sequential code is often duplicated in these versions. This can affect code comprehensibility and re-usability of the software. In this paper, we discuss a framework named PPModel, which is designed and implemented to free programmers from these scenarios. Using PPModel, a programmer can separate parallel blocks in a program, map these blocks to various platforms, and re-execute the entire program.We provide a graphical modeling tool (PPModel) intended for Eclipse users and a Domain-Specific Language (tPPModel) for non-Eclipse users to facilitate the separation, the mapping, and the re-execution. This is illustrated with a case study from a benchmark program, which involves re-targeting a parallel block to CUDA and another parallel block to OpenMP. The modified program gave almost 5× performance gain compared to the sequential counterpart, and 1.5× gain compared to the existing OpenMP version. © Springer Science+Business Media, LLC 2012."
"Kotowski D., Stacey D.A." $ "Ontology Library: A new approach for storing, searching and discovering ontologies" $ "The backbone of semantic web technologies is the ontology. This is a powerful structure, which allows for the capture, reasoning and storing of expert knowledge across various domains. Ideally these structures should be developed and implemented by experts in a set domain as well as designed with re-usability in mind. However, often due to the lack of availability and difficulties of discovering ontologies, these structures are repeatedly recreated. Current methods for storing, discovering and sharing ontologies employ similar techniques as to those used for software source code or static web pages. These are exposed to the limitation inherent with keyword-based searches, such as ambiguity with the keywords themselves and therefore, the most relevant ontology may not be discovered. This paper will examine some of the existing techniques used for the storing and sharing of ontologies. It will offer a contrasting method analogous to software libraries to develop a standard to store, share, discover, and distribute common ontologies."
"Spycher N., Portmann E." $ "Customized mashups for improved reputation visualization" $ "This document describes a possible use for the YouReputation API. A mashup combining the YouReputation and the Flickr APIs attempts to improve the visualization of reputation. First, this paper gives an introduction to Web services and APIs and further explains the developed prototype. This paper introduces an API that can be easily combined with other APIs to improve the representation of reputation terms and therefore enhance usability and design. © 2012 IEEE."
"[No author name available]" $ "Proceedings of the 1st ACM SIGSPATIAL International Workshop on Mobile Geographic Information Systems, MobiGIS 2012 - In Conjunction with the 20th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems, GIS 2012" $ "The proceedings contain 14 papers. The topics discussed include: interactive traffic-aware route search on smartphones, trafficpulse : a mobile GISystem for transportation, improving unreliable mobile GIS with swarm-based particle filters, mining future spatiotemporal events and their sentiment from online news articles for location-aware recommendation system, evaluation of fine-granular GPS tracking on smartphones, duking it out at the smartphone mobile app mapping API corral: apple, google, and the competition, SALS: semantics-aware location sharing based on cloaking zone in mobile social networks, when and where next: individual mobility prediction, heuristics & usability of virtual attack points for pedestrian navigation: user study using paper-prototyping, a comparison of first- and second-order HMMs in the task of predicting the next locations of mobile individuals, and uncaught signal imputation for accuracy enhancement of WLAN-based positioning systems."
"Mishne A., Shoham S., Yahav E." $ "Typestate-based semantic code search over partial programs" $ "We present a novel code search approach for answering queries focused on API-usage with code showing how the API should be used. To construct a search index, we develop new techniques for statically mining and consolidating temporal API specifications from code snippets. In contrast to existing semanticbased techniques, our approach handles partial programs in the form of code snippets. Handling snippets allows us to consume code from various sources such as parts of open source projects, educational resources (e.g. tutorials), and expert code sites. To handle code snippets, our approach (i) extracts a possibly partial temporal specification from each snippet using a relatively precise static analysis tracking a generalized notion of typestate, and (ii) consolidates the partial temporal specifications, combining consistent partial information to yield consolidated temporal specifications, each of which captures a full(er) usage scenario. To answer a search query, we define a notion of relaxed inclusion matching a query against temporal specifications and their corresponding code snippets. We have implemented our approach in a tool called PRIME and applied it to search for API usage of several challenging APIs. PRIME was able to analyze and consolidate thousands of snippets per tested API, and our results indicate that the combination of a relatively precise analysis and consolidation allowed PRIME to answer challenging queries effectively."
"Grill T., Polacek O., Tscheligi M." $ "Methods towards API usability: A structural analysis of usability problem categories" $ "The usability of Application Programming Interfaces (APIs) is one of the main factors defining the success of a software based framework. Research in the area of human computer interaction (HCI) currently mainly focuses on end-user usability and only little research has been done regarding the usability of APIs. In this paper, we present a methodology on how to use and combine HCI methods with the goal to evaluate the usability of APIs. The methodology consist of three phases - a heuristic evaluation, a developer workshop and interviews. We setup a case-study according to the methodology, in which we are evaluating the usability of a service-oriented framework API. The goal was to explore different HCI methods and compare the applicability of such methods to find usability problems in an API. The case-study combined qualitative and quantitative methods in order to investigate the usability and intuitiveness of the API itself. It allowed us to identify relevant problem areas for usability related issues that could be mapped to specific types of HCI methods. Examples for this are e.g. structural problems, which are identified mainly in inspection methods, while problems regarding errors and exception handling are mainly identified during the hands-on example part of the developer workshops conducted. The resulting problem areas allow us to develop a first classification of API related usability problems that are making the relevancy of usability issues for APIs more explicit and applicable. © 2012 Springer-Verlag."
"Lee M., Jo H., Choi D.H." $ "Towards high performance and usability programming model for heterogeneous HPC platforms" $ "Latest High Performance Computing (HPC) platforms are built with heterogeneous chips such as multicore microprocessors and multicore GPUs (Graphic Processing units), thus they are commonly called as Heterogeneous High Performance Computing (HPC) platforms. Various programming models have been developed and proposed for heterogeneous platforms. However, their wide adoption in the user community is predicted to be limited, because of low performance, low usability due to revealing architectural details in the program which burdens the programmers, and most importantly the limited SIMD execution model which relies on the GPU for most of the computations in the program which can limit the performance. Thus a more general programming model beyond SIMD which is easy to use and leads to high performance needs to be developed. In this paper, we propose methods to achieve this goal by considering all types of parallelism according to Flynn's classification (SIMD, MIMD, MISD). Our proposed methods incorporate these parallelisms in the existing high usability programming models and can lead to significant performance improvements. © 2012 AICIT."
"Mishne A., Shoham S., Yahav E." $ "Typestate-based semantic code search over partial programs" $ "We present a novel code search approach for answering queries focused on API-usage with code showing how the API should be used. To construct a search index, we develop new techniques for statically mining and consolidating temporal API specifications from code snippets. In contrast to existing semanticbased techniques, our approach handles partial programs in the form of code snippets. Handling snippets allows us to consume code from various sources such as parts of open source projects, educational resources (e.g. tutorials), and expert code sites. To handle code snippets, our approach (i) extracts a possibly partial temporal specification from each snippet using a relatively precise static analysis tracking a generalized notion of typestate, and (ii) consolidates the partial temporal specifications, combining consistent partial information to yield consolidated temporal specifications, each of which captures a full(er) usage scenario. To answer a search query, we define a notion of relaxed inclusion matching a query against temporal specifications and their corresponding code snippets. We have implemented our approach in a tool called PRIME and applied it to search for API usage of several challenging APIs. PRIME was able to analyze and consolidate thousands of snippets per tested API, and our results indicate that the combination of a relatively precise analysis and consolidation allowed PRIME to answer challenging queries effectively. Copyright © 2012 ACM."
"Lee M., Jo H., Choi D.H." $ "Towards high performance and usability programming methodology for heterogeneous HPC architectures" $ "Various programming models have been developed and proposed for the latest heterogeneous High Performance Computing (HPC) platforms built using heterogeneous chips such as multicore microprocessors and multicore GPUs (Graphic Processing units). However, their wide adoption in the user community is predicted to be limited, because of low performance, low usability due to revealing architectural details in the program which burdens the programmers, and most importantly the limited SIMD execution model using the GPU as the main computation engine which can limit the performance in non-SIMD friendly applications. A more general programming methodology which is easy to use and leads to high performance by incorporating parallelism beyond SIMD needs to be developed. In this paper, we propose methods to achieve this goal in two ways. First, we leverage existing highly usable parallel programming models such as OpenMP and OpenACC which is recently released to become a new standard API for accelerator programming including GPUs. Second, we consider parallelism other than SIMD (MIMD, MISD) in the heterogeneous parallel program to further the performance beyond what users can currently achieve using existing proprietary APIs such as CUDA. Our proposed methodolody can thus lead to high usability and high performance for programs parallelized on heterogeneous HPC platforms."
"Rupakheti C.R., Hou D." $ "Evaluating forum discussions to inform the design of an API critic" $ "Learning to use a software framework and its API (Application Programming Interfaces) can be a major endeavor for novices. To help, we have built a critic to advise the use of an API based on the formal semantics of the API. Specifically, the critic offers advice when the symbolic state of the API client code triggers any API usage rules. To assess to what extent our critic can help solve practical API usage problems and what kinds of API usage rules can be formulated, we manually analyzed 150 discussion threads from the Java Swing forum. We categorize the discussion threads according to how they can be helped by the critic. We find that API problems of the same nature appear repeatedly in the forum, and that API problems of the same nature can be addressed by implementing a new API usage rule for the critic. We characterize the set of discovered API usage rules as a whole. Unlike past empirical studies that focus on answering why frameworks and APIs are hard to learn, ours is the first designed to produce systematic data that have been directly used to build an API support tool. © 2012 IEEE."
"Rupakheti C.R., Hou D." $ "CriticAL: A critic for APIs and libraries" $ "It is well-known that APIs can be hard to learn and use. Although search tools can help find related code examples, API novices still face other significant challenges such as evaluating the relevance of the search results. To help address the broad problems of finding, understanding, and debugging API-based solutions, we have built a critic system that offers recommendations, explanations, and criticisms for API client code. Our critic takes API usage rules as input, performs symbolic execution to check that the client code has followed these rules properly, and generates advice as output to help improve the client code. We demonstrate our critic by applying it to a real-world example derived from the Java Swing Forum. © 2012 IEEE."
"Nguyen A.T., Nguyen T.T., Nguyen H.A., Tamrawi A., Nguyen H.V., Al-Kofahi J., Nguyen T.N." $ "Graph-based pattern-oriented, context-sensitive source code completion" $ "Code completion helps improve developers' programming productivity. However, the current support for code completion is limited to context-free code templates or a single method call of the variable on focus. Using software libraries for development, developers often repeat API usages for certain tasks. Thus, a code completion tool could make use of API usage patterns. In this paper, we introduce GraPacc, a graph-based, pattern-oriented, context-sensitive code completion approach that is based on a database of such patterns. GraPacc represents and manages the API usage patterns of multiple variables, methods, and control structures via graph-based models. It extracts the context-sensitive features from the code under editing, e.g. the API elements on focus and their relations to other code elements. Those features are used to search and rank the patterns that are most fitted with the current code. When a pattern is selected, the current code will be completed via a novel graph-based code completion algorithm. Empirical evaluation on several real-world systems shows that GraPacc has a high level of accuracy in code completion. © 2012 IEEE."
"Nguyen A.T., Nguyen H.A., Nguyen T.T., Nguyen T.N." $ "GraPacc: A graph-based pattern-oriented, context-sensitive code completion tool" $ "Code completion tool plays an important role in daily development activities. It helps developers by auto-completing tedious and detailed code during an editing session. However, existing code completion tools are limited to recommending only context-free code templates and a single method call of the variable under editing. We introduce GraPacc, an advanced, context-sensitive code completion tool that is based on frequent API usage patterns. It extracts the context-sensitive features from the code under editing, for example, the API elements on focus and the current editing point, and their relations to other code elements. It then ranks the relevant API usage patterns and auto-completes the current code with the proper elements according to the chosen pattern. © 2012 IEEE."
"Buse R.P.L., Weimer W." $ "Synthesizing API usage examples" $ "Key program interfaces are sometimes documented with usage examples: concrete code snippets that characterize common use cases for a particular data type. While such documentation is known to be of great utility, it is burdensome to create and can be incomplete, out of date, or not representative of actual practice. We present an automatic technique for mining and synthesizing succinct and representative human-readable documentation of program interfaces. Our algorithm is based on a combination of path sensitive dataflow analysis, clustering, and pattern abstraction. It produces output in the form of well-typed program snippets which document initialization, method calls, assignments, looping constructs, and exception handling. In a human study involving over 150 participants, 82% of our generated examples were found to be at least as good at human-written instances and 94% were strictly preferred to state of the art code search. © 2012 IEEE."
"Cuibus M., Potolea R." $ "Adaptable swarm intelligence framework" $ "Modern software systems must be continuously adapted to current performance and usability requirements. Indicators like overhead, computational complexity, parameter tuning, or ease of design and implementation are getting increasingly harder to accomplish due to constant increase in system dimensions like code size, API (Application Programming Interface), deployment size, component communication, network lag etc. Furthermore, many entities rely on classic, highly deterministic algorithms that are little or not capable of changing strategies on the fly. Lately, bio-inspired algorithms have successfully tackled this problem with significant, positive results. We propose a framework that may prove useful in obtaining better performance by automatically selecting and combining the best swarm intelligence algorithms with the best parameter selection. Copyright 2012 ACM."
"Tan S.H., Marinov D., Tan L., Leavens G.T." $ "@tComment: Testing javadoc comments to detect comment-code inconsistencies" $ "Code comments are important artifacts in software. Javadoc comments are widely used in Java for API specifications. API developers write Javadoc comments, and API users read these comments to understand the API, e.g., reading a Javadoc comment for a method instead of reading the method body. An inconsistency between the Javadoc comment and body for a method indicates either a fault in the body or, effectively, a fault in the comment that can mislead the method callers to introduce faults in their code. We present a novel approach, called @TCOMMENT, for testing Javadoc comments, specifically method properties about null values and related exceptions. Our approach consists of two components. The first component takes as input source files for a Java project and automatically analyzes the English text in Javadoc comments to infer a set of likely properties for a method in the files. The second component generates random tests for these methods, checks the inferred properties, and reports inconsistencies. We evaluated @TCOMMENT on seven open-source projects and found 29 inconsistencies between Javadoc comments and method bodies. We reported 16 of these inconsistencies, and 5 have already been confirmed and fixed by the developers. © 2012 IEEE."
"Jin H., Kellogg M., Mehrotra P." $ "Using compiler directives for accelerating CFD applications on GPUs" $ "As the current trend of parallel systems is towards a cluster of multi-core nodes enhanced with accelerators, software development for such systems has become a major challenge. Both low-level and high-level programming models have been developed to address complex hierarchical structures at different hardware levels and to ease the programming effort. However, achieving the desired performance goal is still not a simple task. In this study, we describe our experience with using the accelerator directives developed by the Portland Group to port a computational fluid dynamics (CFD) application benchmark to a general-purpose GPU platform. Our work focuses on the usability of this approach and examines the programming effort and achieved performance on two Nvidia GPU-based systems. The study shows very promising results in terms of programmability as well as performance when compared to other approaches such as the CUDA programming model. © 2012 Springer-Verlag."
"Maia R., Cerqueira R., De Souza C.S., Guisasola-Gorham T." $ "A qualitative human-centric evaluation of flexibility in middleware implementations" $ "Today middleware is much more powerful, more reliable and faster than it used to be. Nevertheless, for the application developer, the complexity of using middleware platforms has increased accordingly. The volume and variety of application contexts that current middleware technologies have to support require that developers be able to anticipate the widest possible range of execution environments, desired and undesired effects of different programming strategies, handling procedures for runtime errors, and so on. This paper shows how a generic framework designed to evaluate the usability of notations (the Cognitive Dimensions of Notations Framework, or CDN) has been instantiated and used to analyze the cognitive challenges involved in adapting middleware platforms. This human-centric perspective allowed us to achieve novel results compared to existing middleware evaluation research, typically centered around system performance metrics. The focus of our study is on the process of adapting middleware implementations, rather than in the end product of this activity. Our main contributions are twofold. First, we describe a qualitative CDN-based method to analyze the cognitive effort made by programmers while adapting middleware implementations. And second, we show how two platforms designed for flexibility have been compared, suggesting that certain programming language design features might be particularly helpful for developers. © 2011 Springer Science+Business Media, LLC."
"Scheller T., Kuhn E." $ "Influencing factors on the usability of API classes and methods" $ "Usability is an important quality attribute for APIs. To create APIs with good usability, appropriate measurement methods are needed. But currently available methods are cost- and time-expensive and the results are not objective and therefore hard to quantify. API design guidelines give a good overview about important usability factors, but lack a scientific basis. When looking at scientific API usability studies, only a very small area of API design has been researched yet. Existing results don't give enough basis for a good API usability measurement method. In this paper we identify influencing usability factors for the two most common concepts of APIs: classes and methods. We therefore conduct a study with 20 programmers and 2 different API variants and evaluate how differences between the APIs influence usability when instantiating classes and calling methods. The results build a basis for API usability measurement methods and should help design more usable APIs. © 2012 IEEE."
"Alcock S., Lorier P., Nelson R." $ "Libtrace: A packet capture and analysis library" $ "This paper introduces libtrace, an open-source software li- brary for reading and writing network packet traces. Lib- trace offers performance and usability enhancements com- pared to other libraries that are currently used. We de- scribe the main features of libtrace and demonstrate how the libtrace programming API enables users to easily develop portable trace analysis tools without needing to consider the details of the capture format, file compression or inter- mediate protocol headers. We compare the performance of libtrace against other trace processing libraries to show that libtrace offers the best compromise between development ef- fort and program run time. As a result, we conclude that libtrace is a valuable contribution to the passive measure- ment community that will aid the development of better and more reliable trace analysis and network monitoring tools."
"Edwards H.C., Sunderland D." $ "Kokkos Array performance-portable manycore programming model" $ "Large, complex scientific and engineering application code have a significant investment in computational kernels which implement their mathematical models. Porting these computational kernels to multicore-CPU and manycore-accelerator (e.g., NVIDIA® GPU) devices is a major challenge given the diverse programming models, application programming interfaces (APIs), and performance requirements. The Kokkos Array programming model provides library-based approach for implementing computational kernels that are performance-portable to multicore-CPU and manycore-accelerator devices. This programming model is based upon three fundamental concepts: (1) manycore compute devices each with its own memory space, (2) data parallel computational kernels, and (3) multidimensional arrays. Performance-portability is achieved by decoupling computational kernels from device-specific data access performance requirements (e.g., NVIDIA coalesced memory access) through an intuitive multidimensional array API. The Kokkos Array API uses C++ template meta-programming to, at compile time, transparently insert device-optimal data access maps into computational kernels. With this programming model computational kernels can be written once and, without modification, performance-portably compiled to multicore-CPU and manycore-accelerator devices. © 2012 ACM."
"Akbar R.J., Omori T., Maruyama K." $ "Detecting API usage patterns from software repositories using method categorization" $ "Developers often have difficulties using APIs. To aid developers in efficiently using APIs, API usage patterns can be extracted from source code stored in software repositories. Previous approaches have mined repositories to extract API usage patterns by simply applying a data mining technique to the collection of method invocations of API objects. However, respective roles of invoked methods within API objects are not considered in these approaches. This paper proposes an improved approach that extracts API usage patterns at a higher-level abstraction rather than mining the actual method invocations. Our approach embraces a multilevel sequential mining technique and uses categorization of method invocations to define their concept hierarchy. In the categorization, the method invocations are categorized based on their roles. The extracted API usage patterns represent recurring usages of API objects. Therefore, they are useful to recommend typical usages of APIs. The experimental results show that our approach is practical to discover patterns that reveal characteristics of usages. © 2012 The authors and IOS Press. All rights reserved."
"[No author name available]" $ "4th International Conference on Human-Centered Software Engineering, HCSE 2016" $ "The proceedings contain 28 papers. The special focus in this conference is on Human-Centered Software Engineering. The topics include: Human factors engineering as the methodological Babel fish, translating user needs into software design, improving software effort estimation using an expert-centred approach, a compositional model for gesture definition, a development process for usable large scale interactive critical systems, agile user experience development in a large software organization, Smartphone applications usability evaluation, methods towards API usability, a structural analysis of usability problem categories, requirements sensemaking using concept maps, towards conflict management in user interface composition driven by business needs, a model for assessing organizational learning in software development organizations, a personality based design approach using subgroup discovery, assessing use complexity of software, support for the application of creativity techniques in requirements engineering, exploring local cultural perspectives in user interface development in an Indian offshoring context, improving support for visual task modelling, lessons learned from evaluating the usability of mobile spreadsheet applications, ProtoTask, new task model simulator, the usage of usability techniques in scrum projects, visualizing sensor data and graphical controls based environment for user interface evaluation."
"Kosec G., Trobec R." $ "A parallel meshless numerical approach for the solution of transport phenomena" $ "The application of the local meshless numerical method (LRBFCM) for solving a system of coupled partial differential equations (PDE) is explored. The numerical approach is tested on the natural convection based fluid flow problems. The fluid flow part of the solution procedure is coupled locally despite its global nature. Such an approach makes the computations convenient for an implementation on parallel computers. In this paper, the OpenMP based parallelization of the proposed numerical approach is demonstrated. On two cores, a superlinear speedup of 2.5 is confirmed by the performance analysis. The parallelization performance is explored for the classical de Vahl Davis natural convection case. The usability of the meshless numerical framework is demonstrated on highly non-linear and coupled case of solidification of binary alloy, where energy and solute transport govern double natural convection in a domain filled with porous media and free fluid with moving interphases. © Civil-Comp Press, 2012."
"Cortez R., Vazhenin A., Brine J." $ "Wikipedia miner engine: A re-usable e-learning service based on a virtual MVC design pattern" $ "E-Learning platforms are evolving from monolithic applications with a rigid structure that did not allowed for the exchange of tools or components to applications incorporating service orientation concepts as well as facilitating the dynamic discovery and assembling of e-learning services. Accordingly, the usage of support materials to provide additional guidance to students facilitates the comprehension of learning tasks. Wikipedia is one of the richest sources of human knowledge, encompassing a vast range of topics of all kinds of information, and content, which is in constant change due to its collaborative dynamic nature. The Wikipedia Miner provides a code that can parse a given document identifying main topics and link them to corresponding articles or short definitions from the Wikipedia content. In this paper, we discuss the realization of a reusable Wikipedia Miner service for the e-Learning Computational Cloud (eLC2) Platform designed with the J2EE technology and Service-Oriented (V-MVC) model excluding a direct link between the Model and the View. This allows enhancing the Controller as a middleware, removing the dependency and acting as a single point of contact. In the V-MVC design pattern, the Controller is modeled by the compound design pattern of the Enterprise Service Bus (ESB) supporting higher privacy of the business logic and higher re-usability Architecture standards. The eLC2 is also based on an original Virtual Model-View-Controller of application components. In this framework, Wikipedia Miner services were prototyped as an Application Engine that wraps the logic of the Wikipedia Miner API in order to re-use it for different types of applications. Particularly, we are focusing on two applications in order to demonstrate the usability of the proposed approach. The first application is the WikiGloss tool, which is based on a glossing approach to help learners of English-as-second-language with an extensive reading task. The second application is an Intelligent Hints service for a Task Management Environment which provides explanatory links from relevant Wikipedia articles related to topics of the e-Learning task. This allows re-use of the same problems in different task type modes such as lectures, exercises, and quizzes. © 2012 The authors and IOS Press. All rights reserved."
"Steiner T., Verborgh R., Vallés J.G., Van De Walle R." $ "Adding meaning to facebook microposts via a mash-up API and tracking its data provenance" $ "The social networking website Facebook offers to its users a feature called ""status updates"" (or just ""status""), which allows users to create microposts directed to all their contacts, or a subset thereof. Readers can respond to microposts, or in addition to that also click a ""Like"" button to show their appreciation for a certain micropost. Adding semantic meaning in the sense of unambiguous intended ideas to such microposts can, for example, be achieved via Natural Language Processing (NLP). Therefore, we have implemented a RESTful mash-up NLP API, which is based on a combination of several third party NLP APIs in order to retrieve more accurate results in the sense of emergence. In consequence, our API uses third party APIs opaquely in the background in order to deliver its output. In this paper, we describe how one can keep track of provenance, and credit back the contributions of each single API to the combined result of all APIs. In addition to that, we show how the existence of provenance metadata can help understand the way a combined result is formed, and optimize the result combination process. Therefore, we use the HTTP Vocabulary in RDF and the Provenance Vocabulary. The main contribution of our work is a description of how provenance metadata can be automatically added to the output of mash-up APIs like the one presented here. © 2011 IEEE."
"Khatoon S., Li G., Ashfaq R.M." $ "A Framework for automatically mining source code" $ "Mining source code by using different data mining techniques to extract the informative patterns like programming rules, variable correlation, code clones and frequent API usage is an active area of research. However, no practical framework for integrating these tasks has been attempted. To achieve this objective an integrated framework is designed that can detect different types of bugs to achieve software quality and assist developer in reusing API libraries for rapid software development. Proposed framework automatically extracts large variety of programming patterns and finds the locations where the extracted patterns are violated. Violated patterns are reported as programming rule violation, copy paste code related bugs and inconsistent variable update bugs. Although, the bugs are different but the framework can detect these bugs in one pass and produces higher quality software systems within budget. The framework also helps in code reusing by suggesting the programmer how to write API code to facilitate rapid software development. Proposed framework is validated by developing a prototype that developed in C# (MS Visual Studio, 2008) and evaluated on large application like ERP. Results shows proposed technique greatly reduced time and cost of manually checking defects from source code by programmers. © 2011 Academic Journals Inc."
"Scheller T., Kühn E." $ "Measurable concepts for the usability of software components" $ "While usability has proven to be an important software quality attribute, its application to APIs is still rather uncommon. Available methods for measuring software usability show significant disadvantages when applied to APIs, like the need for test users and experienced evaluators. This makes it difficult to evaluate the usability of software components, as well as to compare different software components. An API usability measurement method is needed that is both machine-computable and objective. This paper takes a first step in the direction of such a measure by identifying measurable concepts for the usability of software components, and validating these concepts against existing studies and guidelines for usability and API design. © 2011 IEEE."
"Ko A.J., Riche Y." $ "The role of conceptual knowledge in API usability" $ "While many studies have investigated the challenges that developers face in finding and using API documentation, few have considered the role of developers' conceptual knowledge in these tasks. We designed a study in which developers were asked to explore the feasibility of two requirements concerning networking protocols and application platforms that most participants were unfamiliar with, observing the effect that a lack of conceptual knowledge had on their use of documentation. Our results show that without conceptual knowledge, developers struggled to formulate effective queries and to evaluate the relevance or meaning of content they found. Our results suggest that API documentation should not only include detailed examples of API use, but also thorough introductions to the concepts, standards, and ideas manifested in an API's data structures and functionality. © 2011 IEEE."
"Prajapati H.B., Vij S.K." $ "Analytical study of parallel and distributed image processing" $ "The available literature on parallel and distributed image processing is scattered and not organized for use to beginners. Thus, there is a need of concise understanding of parallel and distributed image processing area. In this paper, we present analysis of parallel and distributed image processing with comprehensive details, so that it becomes very useful to beginners and to those who are new to parallel or distributed image processing field. We present the outcome of our study of parallel and distributed image processing with emphasis on mechanisms, tools/technology/API used, application domains, and ongoing research work. We examine the research issues in parallel and distributed image processing. We also identify some future research directions for distributed image processing. This study provides concise understanding of the parallel and distributed image processing area to the beginners. © 2011 IEEE."
"Zhong H., Zhang L., Xie T., Mei H." $ "Inferring specifications for resources from natural language API documentation" $ "Many software libraries, especially those commercial ones, provide API documentation in natural languages to describe correct API usages. However, developers may still write code that is inconsistent with API documentation, partially because many developers are reluctant to carefully read API documentation as shown by existing research. As these inconsistencies may indicate defects, researchers have proposed various detection approaches, and these approaches need many known specifications. As it is tedious to write specifications manually for all APIs, various approaches have been proposed to mine specifications automatically. In the literature, most existing mining approaches rely on analyzing client code, so these mining approaches would fail to mine specifications when client code is not sufficient. Instead of analyzing client code, we propose an approach, called Doc2Spec, that infers resource specifications from API documentation in natural languages. We evaluated our approach on the Javadocs of five libraries. The results show that our approach performs well on real scale libraries, and infers various specifications with relatively high precisions, recalls, and F-scores. We further used inferred specifications to detect defects in open source projects. The results show that specifications inferred by Doc2Spec are useful to detect real defects in existing projects. © Springer Science+Business Media, LLC 2011."
"Huang P.-Y., Jan J.-F." $ "Comparison of Google maps API and openlayers for WebGIS development" $ "Many free, open source, web based, Geographic Information Systems (GIS) are shown to be an efficient and inexpensive way to disseminate feature rich and theme orientated map presentations. With web 2.0 technologies to creatively craft web user interfaces coupled with a strong versatile spatial processing backend, the end result of these freeware products are just as compelling to use in predefined use cases as any marketed brands. Putting aside the spatial analytical functionality, the tools to render maps and information ultimately determines the success of any GIS products. There are several free rendering software libraries for developers of WebGIS systems to choose from and the most popularly implemented are Google Maps API and OpenLayers. Both are JavaScript technologies that work seamlessly within the web browsers and can display layers of information at the users' discretion. But which technology should one use? For this report, we will compare and discuss the limitations and usability of these two technologies, and try to identify their usable domains."
"Hosogai E., Mukai T., Jung S., Kowase Y., Bossard A., Xu Y., Ishikawa M., Kaneko K." $ "A multilingual chat system with image presentation for detecting mistranslation" $ "We have designed and developed a multilingual chat system, MCHI (Multilingual Chat with Hint Images), which is based on machine translation and equipped with a presentation function of images related to the contents of the messages by utterers so that listeners are able to notice mistranslation. MCHI accepts English, French, Chinese, Japanese, Korean and Vietnamese languages. It uses the Google API to retrieve related images from the image posting site Flickr. As a result of evaluation experiment, we have observed that participants detected the mismatch of a translated message with its related image. According to the answers of participants for a questionnaire, it turned out that the usability of the MCHI system is good enough though the related images are not satisfactory."
"Hosogai E., Mukai T., Jung S., Kowase Y., Bossard A., Xu Y., Ishikawa M., Kaneko K." $ "A multilingual chat system with image presentation for detecting mistranslation" $ "We have designed and developed a multilingual chat system, MCHI (Multilingual Chat with Hint Images), which is based on machine translation and equipped with a presentation function of images related to the contents of the messages by utterers so that listeners are able to notice the mistranslation. MCHI accepts English, French, Chinese, Japanese, and Korean languages. It uses Google API to retrieve related images from the image posting site Flickr. As a result of evaluation experiment, we have observed that participants detected the mismatch of a translated message with its related image. According to the answers of participants for a question in a questionnaire, it turned out that the usability of the MCHI system is good enough though the related images are not satisfactory."
"Khan R.H., Ylitalo J., Ahmed A.S." $ "OpenID authentication as a service in OpenStack" $ "The evolution of cloud computing is driving the next generation of internet services. OpenStack is one of the largest open-source cloud computing middleware development communities. Currently, OpenStack supports platform specific signatures and tokens for user authentication. In this paper, we aim to introduce a cloud platform independent, flexible, and decentralized authentication mechanism, using OpenID as an open-source authentication mechanism in OpenStack. OpenID allows a decentralized framework for user authentication. It has its own advantages for web services, which include improvements in usability and seamless Single-Sign-On experience for the users. This paper presents the OpenlD-Authentication-as-a-Service APIs in OpenStack for front-end GUI servers, and performs the authentication in the back-end at a single Policy Decision Point (PDP). Our implementation allows users to use their OpenID Identifiers from standard OpenTD providers and log into the Dashboard/Django-Nova graphical interface of OpenStack. © 2011 IEEE."
"Budnik L., Krawczyk H." $ "Dynamic analysis of enterprise business scenarios" $ "DIES system for designing and improving enterprise business scenarios is proposed. Such scenarios are executed and monitored in an SOA environment. Many metrics are gathered, and strong/weak aspects are pointed out. DIES allows the improvement of a scenario's performance, quality, and usability. Due to technology-agnostic API the system supports any extensible business scenario technology, and it utilizes WS-BPEL standard and Apache ODE as its execution engine. A representative case study is considered, and evaluation and modification of the scenario is discussed. © 2011 IEEE."
"Tseng L.C.-H." $ "Developer-friendly annotation-based HTML-to-XML transformation technology" $ "Nowadays, the amount of information accessible on the web is huge. Although web users today expect a more integrated way to access information on the web, it is still rather difficult to ""integrate"" information from different web sites since most web pages are authored in HTML format, which is actually a presentation-oriented language and is usually considered unstructured. Today, there are many research works aiming at extracting information from web pages. Existing works typically transform the extracting results into structured or semi-structured data formats, thus other applications can further process the results to discover more useful information. Nevertheless, the unstructured nature of HTML makes the transformation process complex and can hardly be widely adopted. In this paper, an annotation-based HTML-to-XML ransformation technology is proposed. The mechanism is developed with both usability and simplicity in mind. With the proposed mechanism, ordinary web site developers simply add annotations to their web pages. Annotated web pages can then be processed by our software libraries and transformed into XML documents, which are machine-understandable. Software agents thus can be developed based on our technology. © 2011 ACM."
"Kawagoi K., Tominaga H." $ "Library management system in a laboratory scale cooperated with book seller sites" $ "A laboratory in an engineering college possesses many books about technology and science. While members in the laboratory mainly use the books, outside students sometimes borrow them. Members must manage the collection by oneself. We propose a library management system for a laboratory scale. The system cooperates with some book seller sites. It reads an ISBN of a book by a barcode reader to acquire the information by Amazon Web service. It adopts an IC chip reader for user check with a student card. The system offers purchase helping functions. It gathers book requests of members and tells a teacher to buy by a cart method of API. It applies adequate lending rules according to access permission. We also consider learning support functions, especially for books about information engineering. A user who have read a book submits his comment for understanding. He may upload his program as sample of practice. The following users can access restrictively for the educational purpose. We developed a prototype of the system, which has some database and basic functions. We carried out an experiment of user operation for usability evaluation to get some ideas for improvement. © 2011 IEEE."
"Thamrin N.M., Ahmad I., Hani M.K." $ "A secure field programmable gate array based System-on-Chip for Telemedicine application" $ "In Telemedicine, confidential information is transferred through an unsecure channel from one party to another. In this paper, a field programmable gate array (FPGA) based approach to protect the data in the Telemedicine system, the mySECURE II is developed. There are two security schemes on a crypto System-on-Chip (SoC) proposed in this paper namely hybrid encryption scheme and Rivest-Shamir-Adleman (RSA) based digital signature scheme. It focuses on the development of 128-bit Advanced Encryption Standard (AES) subsystem, 2048-bit RSA crypto subsystem and Secure Hash Algorithm (SHA-1) crypto subsystem. In AES encryption and RSA crypto subsystems, the strength of these cryptosystems relies on keys. Therefore, a hybrid random number generator (RNG) is designed to provide on-chip key generation operation in this work. The crypto SOC is designed using hardware-software codesign technique. The hardware subsystems design are implemented on Altera Stratix 1S40F780C5 FPGA development board and integrated with Nios II processor to form a complete cryptosystem in System of Programmable Chip (SoPC) environment. The software design consists of the development of device drivers for hardware subsystem communication, and implementation of Cryptographic Service Provider (CSP), serves as the Application Programming Interface (API) in host PC. As a result, a prototype has been developed to test the functionality of the crypto hardware subsystem as well as the usability of the CSP. © 2011 IEEE."
"Zhang H., Wu G., Chow K., Yu Z., Xing X." $ "Detecting resource leaks through dynamical mining of resource usage patterns" $ "Resource management is crucial to software productions. Resources must be carefully acquired and released, or a resource leak might occur. For open source projects, resource leaks can be easily introduced during code check-in, and it is laborious to review, identify, report, and fix such leaks. Recently, there has been a growing interest in data mining API usage patterns to discover potential bugs such as resource leaks. However, the usage patterns mined are specific to a certain library, which cannot be applied to detect bugs in other libraries. In this paper, we present an idea called MODE, Mine Once, Detect Everywhere, to address the universality of such patterns, and use them to detect potential resource leaks automatically before code check-in. We propose an efficient algorithm to record the most valuable API calls that are related to resource usage during program execution, and mine resource usage patterns from the traces with a sequence miner. To verify the effectiveness of the patterns, experiments are given to use them to detect real resource leaks in large open source projects. © 2011 IEEE."
"Ameddah H., Assas M." $ "Bio-CAD reverse engineering of free-form surfaces by planar contours" $ "In this paper, an interactive application tool has been developed for creating 3D models of anatomical organs and other body structures from 2D medical imaging data. 3D models are generated by using reverse engineering algorithm and Planar Contour method by SolidWorks developed in Visual Basic Language. The research includes transferring Computed Tomography (CT) and Magnetic Resonance Imaging (MRI) images into digital matrixes, entering digital matrixes into SolidWorks environment, building feature library for 3D reconstruction, creating medical rapid prototyping models. 3D reconstruction is created by edge configuration generation and triangulated cube configuration generation in capturing section contour points from medical image per slice, creating B-spline curve with the control points in each layer, producing solid model construction in Planar Contours method. Medical rapid prototyping models are performed in SolidWorks. The results of this paper are to develop image processing 3D visualization in SolidWorks Application Programming Interface (API) using Visual Basic Language. The results reveal that the accuracy of 3D reconstruction is acceptable. © 2011 CAD Solutions, LLC."
"Dross C., Filliâtre J.-C., Moy Y." $ "Correct code containing containers" $ "For critical software development, containers such as lists, vectors, sets or maps are an attractive alternative to ad-hoc data structures based on pointers. As standards like DO-178C put formal verification and testing on an equal footing, it is important to give users the ability to apply both to the verification of code using containers. In this paper, we present a definition of containers whose aim is to facilitate their use in certified software, using modern proof technology and novel specification languages. Correct usage of containers and user-provided correctness properties can be checked either by execution during testing or by formal proof with an automatic prover. We present a formal semantics for containers and an axiomatization of this semantics targeted at automatic provers. We have proved in Coq that the formal semantics is consistent and that the axiomatization thereof is correct. © 2011 Springer-Verlag Berlin Heidelberg."
"Lämmel R., Pek E., Starek J." $ "Large-scale, AST-based API-usage analysis of open-source Java projects" $ "Research on API migration and language conversion can be informed by empirical data about API usage. For instance, such data may help with designing and defending mapping rules for API migration in terms of relevance and applicability. We describe an approach to large-scale API-usage analysis of open-source Java projects, which we also instantiate for the Source-Forge open-source repository in a certain way. Our approach covers checkout, building, tagging with metadata, fact extraction, analysis, and synthesis with a large degree of automation. Fact extraction relies on resolved (type-checked) ASTs. We describe a few examples of API-usage analysis, they are motivated by API migration. These examples are concerned with analysing API footprint (such as the numbers of distinct APIs used in a project), API coverage (such as the percentage of methods of an API used in a corpus), and framework-like vs. class-library-like usage. © 2011 ACM."
"Hsu S.-K., Lin S.-J." $ "MACs: Mining API code snippets for code reuse" $ "We apply data mining to source code projects to guide developers through related API usage patterns: ""Developers who code the program statement also code."" Given a set of source code files, the mined association rules suggest related code snippets to form the components of object-oriented programs. The mined sequential rules predict likely additional API sequences within a method. After an initial program statement is given, our MACs prototype can correctly predict useful related API code snippets. In our evaluation, we present two studies investigating the usefulness of MACs in software development tasks. One study evaluated the utility of MACs's association pattern recommendations. The other evaluated usefulness of sequential pattern recommendations, and both drew from a sample of eight source code projects from SourceForge.net. Our experimental evaluation shows that MACs has significant potential to assist developers, especially API newcomers, and provides an alternative method for code reuse. © 2010 Elsevier Ltd. All rights reserved."
"Devriese D., Piessens F." $ "Information flow enforcement in monadic libraries" $ "In various scenarios, there is a need to expose a certain API to client programs which are not fully trusted. In cases where the client programs need access to sensitive data, confidentiality can be enforced using an information flow policy. This is a general and powerful type of policy that has been widely studied and implemented. Previous work has shown how information flow policy enforcement can be implemented in a lightweight fashion in the form of a library. However, these approaches all suffer from a number of limitations. Often, the policy and its enforcement are not cleanly separated from the underlying API, and the user of the API is exposed to a strongly and unnaturally modified interface. Some of the approaches are limited to functional APIs and have difficulty handling imperative features like I/O and mutable state variables. In addition, this previous work uses classic static information flow enforcement techniques, and does not consider more recent dynamic information flow enforcement techniques. In this paper, we show that information flow policies can be enforced on imperative-style monadic APIs in a modular and reasonably general way with only a minor impact on the interface provided to API users. The main idea of this paper is that we implement the policy enforcement in a monad transformer while the underlying monadic API remains unaware and unmodified. The policy is specified through the lifting of underlying monad operations. We show the generality of our approach by presenting implementations of three important information flow enforcement techniques, including a purely dynamic, a purely static and a hybrid technique. Two of the techniques require the use of a generalisation of the Monad type class, but impact on the API interface stays limited. We show that our technique lends itself to formal reasoning by sketching a proof that our implementation of the static technique is faithful to the original presentation. Finally, we discuss fundamental limitations of our approach and how it fits in general information flow enforcement theory. © 2011 ACM."
"Iwai G., Kawai Y., Sasaki T., Watase Y." $ "SAGA-based user environment for distributed computing resources: A universal grid solution over multi-middleware infrastructures" $ "This paper demonstrates practical applications based on SAGA -A Simple API for Grid Applications- for distributed computing resources over multi-middleware infrastructures. SAGA provides a high-level programming interface that bridges between applications and Grids as well as local schedulers such as PBS. At the Computing Research Center of KEK, we are playing a role to support not only on-site users, but also domestic university groups in the High Energy and Nuclear Physics (HENP) community. In order to provide a more effective and practical client environment to users, we have developed Grid-adaptive applications based on SAGA as a part of activity in the REsources liNKage for E-scIence (RENKEI) for the general purpose e-Infrastructure using National Research Grid Initiative (NAREGI) middleware. We present the technical details for the user environment demonstrator and discuss the usability by real HENP applications."
"Nguyen H.A., Nguyen T.T., Wilson Jr. G., Nguyen A.T., Kim M., Nguyen T.N." $ "A graph-based approach to API usage adaptation" $ "Reusing existing library components is essential for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls. This paper presents LIBSYNC that guides developers in adapting API usage code by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library's test code). LIBSYNC uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LIBSYNC recommends the locations and edit operations for adapting API usages. The evaluation of LIBSYNC on real-world software systems shows that it is highly correct and useful with a precision of 100% and a recall of 91%. © 2010 ACM."
"Kawai Y., Iwai G., Sasaki T., Watase Y." $ "SAGA-based file access application over multi-filesystem middleware" $ "This paper describes practical file access applications based on SAGA -A Simple API for Grid Applications- for distributed storage resources over multi-file-system middleware. SAGA provides a high-level programming interface to bridge between network file-system middleware as well as accessing a local file-system. The Computing Research Center of KEK uses many data files from physics experiments. For example, large numbers of bubble chamber image files are shared between KEK and King's College in UK. Our research problem involves displaying a single bubble chamber image file that is divided and stored in the different kinds of file-systems. We use the two types of file-systems that are iRODS -The Integrated Rule-Oriented Data System- and Gfarm -Grid Data Farm-. To access the middleware, we are developing the SAGA adaptors for the iRODS and Gfarm file-systems. We present the technical details for the user environments and show the usability with real bubble chamber image files. Copyright 2010 ACM."
"Wu Y.-C., Mar L.W., Jiau H.C." $ "CoDocent: Support API usage with code example and API documentation" $ "API documentation and code example are two major resources to support API usage. To find the best way to use APIs within specific programming tasks, an effective strategy to link related APIs becomes critical. Currently, many code search engines have been proposed to solve this issue. Through those search results, programmers must manually traverse across all API documents to learn the referred API calls. To ensure the productivity in the style of programming with APIs, this work provides CoDocent to help programmers review code examples found by search engines. For each found code example, CoDocent can automatically link related API documents to provide diagrams as abstractions to reflect the semantics of API calls. Two evaluations are conducted to show the effectiveness of CoDocent in investigating and adapting API calls from code examples. © 2010 IEEE."
"Lozano A., Kellens A., Mens K., Arevalo G." $ "Mining source code for structural regularities" $ "During software development, design rules and contracts in the source code are often encoded through regularities, such as API usage protocols, coding idioms and naming conventions. The structural regularities that govern a program can aid in comprehension and maintenance of the application, but are often implicit or undocumented. Tool support for extracting these regularities from the source code can provide developers useful insights. But building such tool support is not trivial, in particular, because the informal nature of regularities results in frequent deviations and exceptions to these regularities. We propose an automated approach, based on association rule mining, to discover the structural regularities that govern the source code of a software system. We chose this technique because of its resilience to exceptions. In general, tool support for mining regularities tends to discover a huge amount of rules, making interpretation of the results hard and time-consuming. To ease the interpretation, we reduce the results to a minimal canonical form, and group them to obtain a more rational description of the discovered regularities. As an initial feasibility study of our approach, we applied it on two open-source systems, namely IntensiVE (Smalltalk) and FreeCol (Java). © 2010 IEEE."
"O'Callaghan P." $ "The API walkthrough method: A lightweight method for getting early feedback about an API" $ "We propose a method for evaluating the usability of an Application Programming Interface (API) in the context of MATLAB, a high-level programming language. The primary goal is to evaluate whether the participant can develop an accurate mental model of the API based on the code alone. Like traditional usability testing, this method takes place in a lab setting with a facilitator and observers, and a single participant is exposed to a prototype. Unlike traditional usability testing, the prototype is a static text document containing a series of programmatic statements. Rather than performing a task, the participant ""walks through"" the code line by line in an attempt to gain understanding of the system. Using standard usability testing protocols, the facilitators are able to assess whether the participant understands the API, as well as gather preference data between two designs. © 2010 ACM."
"Suikkola V." $ "Open exposure of telco capabilities: Identification of critical success factors for location-based services in open telco" $ "As of late, open exposure of telco capabilities has been a target of interest - much due to the success of open application programming interfaces on the Internet services market. Due to the innate ability of the mobile networks to know its users' locations, the location-based services market is an especially interesting area from the operator point of view. Operators could possibly create success in this market by implementing the Open Telco framework, however, key service areas and critical success factors have not been identified yet. This paper reviews the existing literature on Open Telco, location-based services, and network-based positioning technologies and identifies the key location-based service application areas for network-based positioning. Based on this analysis, we present a list of critical success factors for location-based services in Open Telco. The findings indicate that the key application areas in network-positioning based location-based services are social networking, information, and productivity services. The critical success factors were found to be standard interfaces, operator cooperation, and the handling of privacy, security, as well as usability issues with location-based services. © 2010 IEEE."
"Ramkumar S., Kumar S., Shiroor R." $ "Process centric guidance and tools for next generation network services API design" $ "The growth in the number and variety of Network Application Programming Interfaces (APIs) like location, messaging, entertainment, personal storage and computing available to developers today and their rapid evolution has led to increased complexity of use in terms of adoption and keeping up with the incremental changes. Operators thus face an increasing need to roll out new Network Service APIs effectively and seamlessly. Well designed APIs not only make user adoption easier but also increase the probability that the user of the API will choose the Network Services API over other competing APIs in areas where standards are not available. The success Network Services APIs will to a large extent drive the external business case for Service Delivery Platforms in IMS in terms of ease of creation of new services leveraging operator services and capabilities. There is a lack of process centric guidance targeted at all important stakeholders like architects, designers, testers, the governance bodies and marketing personnel for the design of effective Network Services APIs which can help alignment with initiatives like SOA. This paper attempts to remedy the same by providing process centric and empirically grounded guidance for their creation and usage based on the practitioner engagements with leading operators and provides tools for automation. ©2010 IEEE."
"Carstoiu B., Carstoiu D." $ "Web4Desktop, a framework for improving the usability of web applications" $ "The cloud computing model leads to the increased penetration of the web applications in the office environment. Designed in many cases to replace traditional desktop software, web applications still lack many of the valuable features present on the desktop that increase usability and productivity. Due to the highly isolated design of the browser, it is currently impossible for web applications to communicate with desktop environment, which usually means sending messages or receiving event notifications. This is often required in order to let the person using the application know about the important events happening in the minimized browser window. By contrast traditional applications can take the control of the desktop at any time. The paper introduces the Web4Desktop framework, a browser/client based architecture designed to overcome these limitations by proving a secure infrastructure that allows web applications to communicate with any desktop software implementing the Web4Desktop API. The framework can be utilized to add desktop integration to existing web applications, a step that requires only minimal changes in the web application's code and greatly improve the user experience because these applications will start to behave more like desktop software. © 2010 Springer-Verlag."
"Maaser M., Ortmann S." $ "Remote medical treatment at home using the Java Mobile Sensor API" $ "Since wireless sensor networks are successfully deployed in real life scenarios, applications in medical health-care, structural control, homeland security etc. become feasible. In those envisioned applications, easy maintenance and usability become crucial to staff members, e.g., to doctors or nurses. Not only for widespread distribution of hundreds of sensors, but also in tele-medical applications, remotely-controlled sensing and maintenance without direct access to sensors is required. For this purpose we present a middleware abstraction based on the standard Java Mobile Sensor API (JSR-256). It allows transparent access to sensor measurements, sensor information and maintenance data, which appear as local sensor resources to the user even if the sensors are connected via network. Hence, the user neither requires technical skills nor location information to request sensor data. This paper gives an architectural and functional overview of our middleware within the context of telemedicine. We demonstrate how our middleware approach supports patient monitoring for pre- and post-operative treatment at home. ©2010 IEEE."
"Andrews K., Lessacher M." $ "Liquid diagrams: Information visualisation gadgets" $ "Information visualisation techniques have sometimes been slow to diffuse into more widespread public use. Recent advances in cloud computing have opened up opportunities to bring information visualisation to the masses in ways previously not possible. Liquid diagrams are a suite of information visualisation gadgets written in Flex, which visualise live data contained in Google Docs spreadsheets through the Google Visualization API. Users can interactively configure the visualisation and any changes in the online spreadsheet data are reflected immediately in the display. In contrast to other solutions, liquid diagrams gadgets specifically support the printing and export of both vector (SVG) and raster (PNG) graphics versions of the visualisations, allowing users to construct and export high-quality diagrams for inclusion into other works. The suite of visualisation gadgets currently available includes: area charts, bar charts, heat maps (choropleths), line charts, pie charts, treemaps, and parallel coordinates plots. Star plots and voronoi treemaps are coming soon. © 2010 IEEE."
"Den Burger M., Jacobs C., Kielmann T., Merzky A., Weidner O., Kaiser H." $ "What is the price of simplicity? A cross-platform evaluation of the SAGA API" $ "The abundance of middleware to access grids and clouds and their often complex APIs hinders ease of programming and portability. The Open Grid Forum (OGF) has therefore initiated the development and standardization of SAGA: a Simple API for Grid Applications. SAGA provides a simple yet powerful API with high-level constructs that abstract from the details of the underlying infrastructure. In this paper we investigate the price that possibly comes with such an API. We discuss the effects on expressiveness and ease of programming, and analyze the performance overhead of three different SAGA implementations (written in Java, Python, and C++) on various middleware. We conclude that SAGA is a good pragmatic approach to make grids easily accessible. The API considerably improves usability and uniformity, but offers a compromise between expressiveness and runtime dependencies. The overall performance of the tested implementations is acceptable, but the strict API semantics require various runtime checks that occasionally cause significant overhead, depending on the underlying infrastructure. © 2010 Springer-Verlag."
"Nguyen H.A., Nguyen T.T., Wilson Jr. G., Nguyen A.T., Kim M., Nguyen T.N." $ "A graph-based approach to API usage adaptation" $ "Reusing existing library components is essential for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls. This paper presents LibSync that guides developers in adapting API usage code by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library's test code). LibSync uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LibSync recommends the locations and edit operations for adapting API usages. The evaluation of LibSync on real-world software systems shows that it is highly correct and useful with a precision of 100% and a recall of 91%. Copyright © 2010 ACM."
"Hsu S.-K., Lin S.-J." $ "Mining source codes to guide software development" $ "The reuse of software library and application framework is an important activity for rapid software development. However, due to rapid software changes, software libraries and application frameworks are usually not well-documented. To deal with this issue, we have developed a tool, named MACs, that provides developers with efficient and effective access to the API pattern databases for a software development project that are form by relevant source files. After an initial program statement is given, our MACs prototype can correctly predict useful relevant API code snippets. In our evaluation, we present a study investigating the usefulness of MACs in software development tasks. Our experimental evaluation shows that MACs has significant potential to assist developers, especially project newcomers, and provides a reuse method for code reuse from relevant source codes files. © 2010 Springer-Verlag Berlin Heidelberg."
"[No author name available]" $ "2010 ICSE Workshop on Search-Driven Development: Users, Infrastructure, Tools and Evaluation, SUITE 2010" $ "The proceedings contain 12 papers. The topics discussed include: towards integrating e-mail communication in the IDE, searching API usage examples in code repositories with sourcerer API search, behavior model based component search: an initial assessment, enhancing static source code search with dynamic data, facilitating the comparison of software retrieval systems through a reference reuse collection, more archetypal usage scenarios for software search engines, immediate search in the IDE as an example of socio-technical congruence in search-driven development, searching across paths, towards query formulation and visualization of structural search results, searching and using external types in an extensible software development environment, a trustability metric for code search based on developer karma, and fostering synergies - how semantic web technology could influence software repositories."
"Bajracharya S., Ossher J., Lopes C." $ "Searching API usage examples in code repositories with sourcerer API search" $ "We present Sourcerer API Search (SAS), a search interface to find API usage examples in large code repositories. SAS facilitates finding API usage examples by providing three unique features: (i) code snippets view for each result that shows the portions of code where APIs are used, (ii) Tag-cloud view of popular words to facilitate query reformulation, and (iii) filtering results using APIs to narrow search results. Furthermore, SAS uses a code index where each code entity is indexed with terms not only found in the entity but also in other entities having similar API usage. These features make SAS a novel search interface to find API usage examples in code repositories. © 2010 ACM."
"Farooq U., Welicki L., Zirkler D." $ "API usability peer reviews: A method for evaluating the usability of application programming interfaces" $ "We describe a usability inspection method to evaluate Application Programming Interfaces (APIs). We found the method useful as it identified usability defects in Microsoft's .NET Framework, of which 59% were new and 21% were fixed. Based on a comparison of usability defects identified between API usability peer reviews and API usability tests, API usability tests were found to expose design issues related to actually using an API whereas API usability peer reviews were found to expose the design rationale of an API. We reflect on the efficiency and productivity of each method: each API usability test is equivalent to 16 API usability peer reviews with the former having a 2.5x productivity advantage. We discuss how API usability peer reviews can be used in conjunction with API usability tests to increase usability coverage on APIs. © 2010 ACM."
"Eisenberg D.S., Stylos J., Myers B.A." $ "Apatite: A new interface for exploring APIs" $ "We present Apatite, a new tool that aids users in learning and understanding a complex API by visualizing the common associations between its various components. Current object-oriented API documentation is usually navigated in a fixed tree structure, starting with a package and then filtering by a specific class. For large APIs, this scheme is overly restrictive, because it prevents users from locating a particular action without first knowing which class it belongs to. Apatite's design instead enables users to search across any level of an API's hierarchy. This is made possible by the introduction of a novel interaction technique that presents popular items from multiple categories simultaneously, determining their relevance by approximating the strength of their association using search engine data. The design of Apatite was refined through iterative usability testing, and it has been released publicly as a web application. © 2010 ACM."
"Gerken J., Jetter H.-C., Reiterer H." $ "Using concept maps to evaluate the usability of APIs" $ "Application programming interfaces (APIs) are the interfaces to existing code structures, such as widgets, frameworks, or toolkits. Therefore, they very much do have an impact on the quality of the resulting system. So ensuring that developers can make the most out of them is an important challenge. However standard usability evaluation methods as known from HCI have limitations in grasping the interaction between developer and API - the GUI, which makes this interaction obvious, is missing. In this paper we present a longitudinal approach using concept maps and a question diary to make this interaction visible and study the usability of an API over time. © 2010 Copyright is held by the author/owner(s)."
"Zhou J., Ji Y., Zhao D., Liu J." $ "Using AOP to ensure component interactions in component-based software" $ "Component-based software development (CBSD) has been got considerable adoption in software industry, but it is still lack of language support to ensure proper interactions among components, i.e. modularity assurance, which usually causes the software hard to maintain and evolve because of the improper dependencies among the components. In this paper, we propose an AOP approach to ensure that the interactions among components are strictly conformed to the sated API usage policies of the components. Also, by using AOP, we can separate the constraints violation checking code from the normal functional code via the so called aspects, thus improving the software quality by separation of concern. Experiment using AspectJ as the AOP implementation technique shows that the performance is comparable to the non embedded code. ©2010 IEEE."
"Hurst A., Hudson S.E., Mankoff J." $ "Automatically identifying targets users interact with during real world tasks" $ "Information about the location and size of the targets that users interact with in real world settings can enable new innovations in human performance assessment and soft-ware usability analysis. Accessibility APIs provide some information about the size and location of targets. How-ever this information is incomplete because it does not sup-port all targets found in modern interfaces and the reported sizes can be inaccurate. These accessibility APIs access the size and location of targets through low-level hooks to the operating system or an application. We have developed an alternative solution for target identification that leverages visual affordances in the interface, and the visual cues produced as users interact with targets. We have used our novel target identification technique in a hybrid solution that combines machine learning, computer vision, and accessibility API data to find the size and location of targets users select with 89% accuracy. Our hybrid approach is superior to the performance of the accessibility API alone: in our dataset of 1355 targets covering 8 popular applications, only 74% of the targets were correctly identified by the API alone. Copyright 2010 ACM."
"Farooq U., Zirkler D." $ "API peer reviews: A method for evaluating usability of application programming interfaces" $ "API usability tests in the lab are time and resource intensive, thus allowing a relatively small percentage of the API namespace to be evaluated. We describe a group-based usability inspection method - API Peer Reviews - to evaluate API usability. Based on an analysis of usability breakdowns from API Peer Reviews and API usability tests, results show that API Peer Reviews identified breakdowns across several cognitive dimensions, some of which were different than what was identified by API usability tests. We reflect on the adoption of API Peer Reviews as a collaborative practice in organizations for evaluating API usability. Copyright 2010 ACM."
"Teófilo M., Martini A., Cruz P." $ "Ulmo: A system to enable mobile applications personalization by binary SMS" $ "Usability and user interfaces play a huge and important role in today's mobile application. Besides a good design, acceptable performance, scalability, and robustness, a mobile application needs to be easy to use and, to some extent, customizable. To create a system able to custom the mobile application's user interface and mirror it immediately to final users is the purpose of this article. Ulmo is such system, which is composed by a web site that enables user to comfortably executes change in mobile application user interface, a mobile application compliant (providing API that facilitates mobile application Ulmo compliance development) and the communication module to mirror web adjustments in mobile phone, which was made using SMS technology. Its availability and low cost are also considered and its high penetration in emergent markets. Some aspects as security, data compression and reliability are taken in account. © 2009 IEEE."
"Pradel M." $ "Dynamically inferring, refining, and checking API usage protocols" $ "Using a set of API methods often requires compliance with a protocol, whose violation can lead to errors in the program. However, most APIs lack explicit and formal definitions of these protocols. We propose a dynamic program analysis for automatically inferring and refining specifications of correct method call sequences. Our experiments with several Java programs show that we can infer meaningful protocols, such as widely respected programming rules. Furthermore, our analysis finds violations of the inferred specifications that point out potential bugs to the programmer."
"Kawrykow D., Robillard M.P." $ "Improving API usage through automatic detection of redundant code" $ "Software projects often rely on third-party libraries made accessible through Application Programming Interfaces (APIs). We have observed many cases where APIs are used in ways that are not the most effective. We developed a technique and tool support to automatically detect such patterns of API usage in software projects. The main hypothesis underlying our technique is that client code imitating the behavior of an API method without calling it may not be using the API effectively because it could instead call the method it imitates. Our technique involves analyzing software systems to detect cases of API method imitations. In addition to warning developers of potentially reimplemented API methods, we also indicate how to improve the use of the API. Applying our approach on 10 Java systems revealed over 400 actual cases of potentially suboptimal API usage, leading to many improvements to the quality of the code we studied. © 2009 IEEE."
"Lo D., Ramalingam G., Ranganath V.P., Vaswani K." $ "Mining quantified temporal rules: Formalism, algorithms, and evaluation" $ "Libraries usually impose constraints on how clients should use them. Often these constraints are not well-documented. In this paper, we address the problem of recovering such constraints automatically, a problem referred to as specification mining. Given some client programs that use a given library, we identify constraints on the library usage that are (almost) satisfied by the given set of clients. The class of rules we target for mining combines simple binary temporal operators with state predicates (involving equality constraints) and quantification. This is a simple yet expressive subclass of temporal properties that allows us to capture many common API usage rules.We focus on recovering rules from execution traces and apply classical data mining concepts to be robust against bugs (API usage rule violations) in clients. We present new algorithms for mining rules from execution traces. We show how a propositional rule mining algorithm can be generalized to treat quantification and state predicates in a unified way. Our approach enables the miner to be complete - mine all rules within the targeted class that are satisfied by the given traces - while avoiding an exponential blowup. We have implemented these algorithms and used them to mine API usage rules for several Windows APIs. Our experiments show the efficiency and effectiveness of our approach. © 2009 IEEE."
"Blum N., Dutkowski S., Magedanz T." $ "InSeRt - An intent-based service request API for service exposure in Next Generation Networks" $ "Modern telecommunication networks and classical roles of operators are subject to fundamental change. Many network operators are currently seeking for new sources to generate revenue by exposing network capabilities to 3rd party service providers. At the same time we can observe that applications on the World Wide Web (WWW) are becoming more mature in terms of the definition of APIs that are offered towards other services. The combinations of those services are commonly referred to as Web 2.0 mash-ups. This report describes our approach to prototype a policy-based service broker function for Next Generation Networks (NGN)-based telecommunications service delivery platforms to provide flexible service exposure anchor points for service integration into so called mash-ups. The defined exposure API uses Intent-based request constructs to allow a description of services in business terms, i.e. intentions and strategies to achieve them and to organize their publication, search and composition on the basis of these descriptions. © 2009 IEEE."
"Stylos J., Faulring A., Yang Z., Myers B.A." $ "Improving API documentation using API usage information" $ "Jadeite is a new Javadoc-like API documentation system that takes advantage of multiple users' aggregate experience to reduce difficulties that programmers have learning new APIs. Previous studies have shown that programmers often guessed that certain classes or methods should exist, and looked for these in the API. Jadeite's ""placeholders"" let users add new ""pretend"" classes or methods that are displayed in the actual API documentation, and can be annotated with the appropriate APIs to use instead. Since studies showed that programmers had difficulty finding the right classes from long lists in documentation, Jadeite takes advantage of usage statistics to display commonly used classes more prominently. Programmers had difficulty discovering how to instantiate objects, so Jadeite uses a large corpus of sample code to automatically the most common ways to construct an instance of any given class. An evaluation showed that programmers were about three times faster at performing common tasks with Jadeite than with standard Javadoc. ©2009 IEEE."
"Lefohn A., Houston M., Andersson J., Assarsson U., Everitt C., Fatahalian K., Foley T., Hensley J., Lalonde P., Luebke D." $ "Beyond programmable shading (parts I and II)" $ "There are strong indications that the future of interactive graphics programming is a more flexible model than today's OpenGL/Direct3D pipelines. Graphics developers need a basic understanding of how to combine emerging parallel programming techniques and more flexible graphics processors with the traditional interactive rendering pipeline. As the first in a series, this course introduces the trends and directions in this emerging field. Topics include: parallel graphics architectures, parallel programming models for graphics, and game-developer investigations of the use of these new capabilities in future rendering engines. This second course in the series Beyond Programmable Shading presents the state of the art in combining traditional rendering API usage with advanced task- and data-parallel computation to increase the image quality of interactive graphics. Leaders from graphics hardware vendors, game development, and academic research present case studies that show how general parallel computation is being combined with the traditional graphics pipeline to boost image quality and spur new graphics algorithm innovation. Each case study discusses the mix of parallel programming constructs, details of the graphics algorithm, and how the rendering pipeline and computation interact to achieve the technical goals. Presenters also discuss integrating a combination of GPU and CPU techniques for more efficient and flexible algorithms. The focus is on what currently can be done, how it is done, and near-future trends. Topics include: interactive realistic lighting, advanced geometry-processing pipelines, in-frame data structure construction, complex image processing, and rasterization versus ray tracing."
"Parreiras F.S., Saathoff C., Walter T., Franz T., Staab S." $ "APIs à gogo: Automatic generation of ontology APIs" $ "When developing application programming interfaces of ontologies that include many instances of ontology design patterns, developers of semantic web applications usually have to handle complex mappings between descriptions of information given by ontologies and object oriented representations of the same information. In current approaches, annotations on API source code handle these mappings, leading to problems with reuse and maintenance. We propose a domain-specific language to tackle these mappings in a platform independent way - agogo. Agogo provides improvements on software engineering quality attributes like usability, reusability, maintainability, and portability. © 2009 IEEE."
"Ghoul O.E., Jemni M." $ "A sign language screen reader for deaf" $ "Screen reader technology has appeared first to allow blind and people with reading difficulties to use computer and to access to the digital information. Until now, this technology is exploited mainly to help blind community. During our work with deaf people, we noticed that a screen reader can facilitate the manipulation of computers and the reading of textual information. In this paper, we propose a novel screen reader dedicated to deaf. The output of the reader is a visual translation of the text to sign language. The screen reader is composed by two essential modules: the first one is designed to capture the activities of users (mouse and keyboard events). For this purpose, we adopted Microsoft MSAA application programming interfaces. The second module, which is in classical screen readers a text to speech engine (TTS), is replaced by a novel text to sign (TTSign) engine. This module converts text into sign language animation based on avatar technology. © Springer-Verlag Berlin Heidelberg 2009."
"Dekel U., Herbsleb J.D." $ "Improving API documentation usability with knowledge pushing" $ "The documentation of API functions typically conveys detailed specifications for the benefit of interested readers. In some cases, however, it also contains usage directives, such as rules or caveats, of which authors of invoking code must be made aware to prevent errors and inefficiencies. There is a risk that these directives may be ""lost"" within the verbose text, or that the text would not be read because there are so many invoked functions. To address these concerns for Java, an Eclipse plug-in named eMoose decorates method invocations whose targets have associated directives. Our goal is to lead readers to investigate further, which we aid by highlighting the tagged directives in the JavaDoc hover. We present a lab study that demonstrates the directive awareness problem in traditional documentation use and the potential benefits of our approach. © 2009 IEEE."
"Lawall J.L., Brunel J., Palix N., Hansen R.R., Stuart H., Muller G." $ "WYSIWIB: A declarative approach to finding API protocols and bugs in linux code" $ "Eliminating OS bugs is essential to ensuring the reliability of infrastructures ranging from embedded systems to servers. Several tools based on static analysis have been proposed for finding bugs in OS code. They have, however, emphasized scalability over usability, making it difficult to focus the tools on specific kinds of bugs and to relate the results to patterns in the source code. We propose a declarative approach to bug finding in Linux OS code using a control-flow based program search engine. Our approach is WYSIWIB (What You See Is Where It Bugs), since the programmer expresses specifications for bug finding using a syntax close to that of ordinary C code. The key advantage of our approach is that search specifications can be easily tailored, to eliminate false positives or catch more bugs. We present three case studies that have allowed us to find hundreds of potential bugs. © 2009 IEEE."
"Harrison W., Lievens D., Simeoni F." $ "Safer typing of complex API usage through java generics" $ "When several incompatible implementations of a single API are in use in a Java program, the danger exists that instances from different implementations may inadvertently be mixed, leading to errors. In this paper we show how to use generics to prevent such mixing. The core idea of the approach is to add a type parameter to the interfaces of the API, and tie the classes that make up an implementation to a unique choice of type parameter. In this way methods of the API can only be invoked with arguments that belong to the same implementation. We show that the presence of a type parameter in the interfaces does not violate the principle of interface-based programming: clients can still completely abstract over the choice of implementation. In addition, we demonstrate how code can be reused between different implementations, how implementations can be defined as extensions of other implementations, and how different implementations may be mixed in a controlled and safe manner. To explore the feasibility of the approach, gauge its usability, and identify any issues that may crop up in practical usage, we have refactored a fairly large existing API-based application suite, and we report on the experience gained in the process. Copyright 2009 ACM."
"Robillard M.P." $ "What makes APIs hard to learn? answers from developers" $ "Most software projects reuse components exposed through APIs, which provide developers access to implemented functionality. APIs have grown large and diverse, which raises questions regarding their usability. This article reports on a study of the obstacles professional developers at Microsoft faced when learning how to use APIs. The study was grounded in developers' experience, collected through a survey and interviews. The resulting data showed that learning resources for APIs are critically important and shed light on three issues: the need to discover the design and rationale of the API when needed, the challenge of finding credible usage API examples at the right level of complexity, and the challenge of understanding inexplicable API behavior. The article describes each of these challenges in detail and discusses associated implications for API users and designers. © 2009 IEEE."
"Schoeberlein J.G., Wang Y." $ "Evaluating groupware accessibility" $ "Accessibility has been one of the biggest problems that people with disabilities face in the work place, due to today's rapid change in computer technology. This paper presents the evaluation of several console-based and web-based groupware applications including Outlook, AIM, Google Blog, and Group System's ThinkTank in terms of their accessibility. These applications were evaluated for accessibility based on various characteristics of the applications such as accessible front-end, hierarchy or list structures, input support, output support, screen reader adaptability, and keyboard access. Additionally, web-based groupware applications were evaluated using Web Content Accessibility Guidelines (WCAG) and U.S. Government's Section 508 guidelines. Fujitsu's Web Accessibility Inspector tool was also utilized to help evaluate the web-based applications. It is found that groupware applications have very limited accessibility through the support of keyboard access. Additional audio support and flattened hierarchies should be considered, to enable some persons with disabilities easy access to groupware applications. Future research should include persons with disabilities in evaluating groupware applications, to determine preferences. Since many groupware applications provide Application Program Interfaces (API), custom front-ends should be developed to include audio content and to flatten hierarchies and lists. © 2009 Springer Berlin Heidelberg."
"Fröschle S., Steel G." $ "Analysing PKCS#11 key management APIs with unbounded fresh data" $ "We extend Delaune, Kremer and Steel's framework for analysis of PKCS#11-based APIs from bounded to unbounded fresh data. We achieve this by: formally defining the notion of an attribute policy, showing that a well-designed API should have a certain class of policy we call complete, showing that APIs with complete policies may be safely abstracted to APIs where the attributes are fixed, and proving that these static APIs can be analysed in a small bounded model such that security properties will hold for the unbounded case. We automate analysis in our framework using the SAT-based security protocol model checker SATMC. We show that a symmetric key management subset of the Eracom PKCS#11 API, used in their ProtectServer product, preserves the secrecy of sensitive keys for unbounded numbers of fresh keys and handles, i.e. pointers to keys. We also show that this API is not robust: if an encryption key is lost to the intruder, SATMC finds an attack whereby all the keys may be compromised. © 2009 Springer Berlin Heidelberg."
"Daughtry J.M., Farooq U., Stylos J., Myers B.A." $ "API usability: CHI'2009 special interest group meeting" $ "Programmers of all types from novice end-user developers to professional software engineers make use of application programming interfaces (API) within their various designs. And, while the use of these interfaces is ubiquitous, there is little research about their design. Recently, a number of researchers and practitioners have begun to treat API design as a first-order object of study and practice. The purpose of this special interest group meeting is to bring together the community of usability researchers and professionals interested in API usability. The time will be used to discuss attendees' ideas and opinions in order to stimulate this new and exciting emerging field that crosses the boundaries between human-computer interaction and software engineering."
"De F. O. Araújo T., De S. Falc̃ao M.A., Lima A.M.N., Loureiro C.F.C.L." $ "MaeRobot: An open source test platform for prototyping robots" $ "MaeRobot is a platform for studying robotic systems that interact with wireless networks. MaeRobot's main goal is to provide a simple way to create and test different robotic configurations build using the Mindstorm NXT Robotics kit. A wireless mobile device running Embedded Linux OS is used as the robot controller. The architecture of the proposed platform whereas the API used to exploit its resources are described in the paper. Moreover, we provide some useful examples of applications implemented with MaeRobot. © 2008 IEEE."
"Jeong S.Y., Xie Y., Beaton J., Myers B.A., Stylos J., Ehret R., Karstens J., Efeoglu A., Busse D.K." $ "Improving documentation for eSOA APIs through user studies" $ "All software today is written using libraries, toolkits, frameworks and other application programming interfaces (APIs). We performed a user study of the online documentation a large and complex API for Enterprise Service-Oriented Architecture (eSOA), which identified many issues and recommendations for making API documentation easier to use. eSOA is an appropriate testbed because the target user groups range from high-level business experts who do not have significant programming expertise (and thus are end-participant developers), to professional programmers. Our study showed that the participants' background influenced how they navigated the documentation. Lack of familiarity with business terminology was a barrier we observed for developers without business application experience. Participants with business software experience had difficulty differentiating similarly named services. Both groups avoided areas of the documentation that had an inconsistent visual design. A new design for the documentation that supports flexible navigation strategies seem to be required to support the wide range of users for eSOA. This paper summarizes our study and provides recommendations for future documentation for developers. © 2009 Springer Berlin Heidelberg."
"Bierhoff K., Aldrich J." $ "PLURAL: Checking protocol compliance under aliasing" $ "Enforcing compliance to API usage protocols is notoriously hard due to possible aliasing of objects through multiple references. In previous work we proposed a sound, modular approach to checking protocol compliance based on types-tates that offers a great deal of flexibility in aliasing [1]. In our approach, API protocols are defined based on type states. Every reference is associated with a permission, and reasoning about permissions is appropriately conservative for the ""degree"" of possible aliasing admitted by a permission. This paper describes Plural, a tool to automatically enforce type state-based protocols using permissions in Java. API developers can specify protocols with simple annotations on methods and method parameters. A static flow analysis tracks permissions in code that uses specified APIs and issues warnings for possible protocol violations."
"Bollacker K., Evans C., Paritosh P., Sturge T., Taylor J." $ "Freebase: A collaboratively created graph database for structuring human knowledge" $ "Freebase is a practical, scalable tuple database used to structure general human knowledge. The data in Freebase is collaboratively created, structured, and maintained. Free-base currently contains more than 125,000,000 tuples, more than 4000 types, and more than 7000 properties. Public read/write access to Freebase is allowed through an HTTP-based graph-query API using the Metaweb Query Language (MQL) as a data query and manipulation language. MQL provides an easy-to-use object-oriented interface to the tuple data in Freebase and is designed to facilitate the creation of collaborative, Web-based data-oriented applications."
"Glek T., Mandelin D." $ "Using GCC instead of grep and sed" $ "Large codebases benefit from automatic assistance when enforcing correct API usage and performing large-scale refactoring. To make large-scale refactoring of the Mozilla codebase successful, we developed a static analysis framework based on a time-tested GCC compiler infrastructure featuring the expressiveness and ease of prototyping of a general-purpose scripting language. The presentation will describe our GCC plugin system and two generic static analysis plugins, Dehydra and Treehydra. Dehydra exposes a simplified view of the GCC AST, suitable for novice users and semantic-grep-style analyses. Treehydra exposes the GCC GIMPLE API. We also describe our static analysis applications and experience with the system."
"Khoroshilov A.V., Rubanov V.V., Shatokhin E.A." $ "Automated formal testing of C API using T2C framework" $ "A problem of automated test development for checking basic functionality of program interfaces (API) is discussed. Different technologies and corresponding tools are surveyed. And T2C technology developed in ISPRAS is presented. The technology and associated tools facilitate development of ""medium quality"" (and ""medium cost"") tests. An important feature of T2C technology is that it enforces that each check in a developed test is explicitly linked to the corresponding place in the standard. T2C tools provide convenient means to create such linkage. The results of using T2C are considered by example of a project for testing interfaces of Linux system libraries defined by the LSB standard. © 2008 Springer-Verlag."
"Clausse J.-M., Fizeau A.H." $ "Software structure for Vega/Chara instrument" $ "VEGA (Visible spEctroGraph and polArimeter) is one of the focal instruments of the CHARA array at Mount Wilson near Los Angeles. Its control system is based on techniques developed on the GI2T interferometer (Grand Interféromètre à 2 Télescopes) and on the SIRIUS fibered hyper telescope testbed at OCA (Observatoire de la Côte d'Azur). This article describes the software and electronics architecture of the instrument. It is based on local network architecture and uses also Virtual Private Network connections. The server part is based on Windows XP (VC++). The control software is on Linux (C, GTK). For the control of the science detector and the fringe tracking systems, distributed API use real-time techniques. The control software gathers all the necessary informations of the instrument. It allows an automatic management of the instrument by using an original task scheduler. This architecture intends to drive the instrument from remote sites, such as our institute in Sou h of France."
"[No author name available]" $ "3rd International Symposium on Leveraging Applications of Formal Methods, Verification and Validation, ISoLA 2008" $ "The proceedings contain 61 papers. The special focus in this conference is on Leveraging Applications of Formal Methods, Verification and Validation. The topics include: Architecture based specification and verification of embedded software systems, information system engineering supporting observation, orientation, decision, and compliant action, modelling coordination and compensation, animating event B models by formal data models, automated formal testing of C API using T2C framework, tailoring and optimising software for automotive multicore system, timing validation of automotive software, towards using reo for compliance-aware business process modeling, a use-case driven approach to formal service-oriented modelling, safety and response-time analysis of an automotive accident assistance service, a framework for analyzing and testing the performance of software services, assuring the satisfiability of sequential extended regular expressions, computing must and may alias to detect null pointer dereference, program verification by reduction to semi-algebraic systems solving, debugging statecharts via model-code traceability, formal use of design patterns and refactoring, a component-based access control monitor, navigating the requirements jungle, non-functional avionics requirements, measurement-based timing analysis, weaving a formal methods education with problem-based learning, encouraging the uptake of formal methods training in an industrial context, computer-supported collaborative learning with mind-maps, thinking in user-centric models, specialization and instantiation aspects of a standard process for developing educational modules, contexts and context awareness in view of the diagram predicate framework, the use of adaptive semantic hypermedia for ubiquitous collaboration systems, the use of formal ontology to specify context in ubiquitous computing, high service availability in MaTRICS for the OCS, the ASK system and the challenge of distributed knowledge discovery, requirements for ontology based design project assessment, organizing the worlds machine learning information, workflow testing, directed generation of test data for static semantics checker, optimizing the system observability level for diagnosability, weaving authentication and authorization requirements into the functional model of a system using Z promotion, simple gedanken experiments in leveraging applications of formal methods and composition of web services using wrappers."
"Wagner S., Nielsen C.C." $ "Usability and implementation experiences with cots products used as a distributed client platform" $ "This paper conveys some of the experiences with using commercial of the-shel (COTS) products as clients to Bluetooth enabled devices, which have no user interface of their own, but relies on the COTS products for user interaction. The COTS devices used include several different vendors' models of the Microsoft Pocket PCplatform (also known as Windows Mobile Professional or Classic) running NET Compact Framework, as well as a number of different models of Java enabled cell phones from Nokia, Siemens and Sony-Ericsson. The specific case study is with the Taxmaster4 Windows Mobile product used with BMW automobiles as a driving log application. The paper concludes that many usability problems exist when using COTS products. These may to some extend be overcome by pragmatic design decisions, but it is necessary that the COTS products hardware platform and application programming interfaces should become better suited to support distributed user interfaces than is the case today. This includes better support for basic user interface elements as well as supporting Bluetooth and other wireless technologies more reliably. These issues should be addressed by the vendors and manufactures of these platforms, not the application programmers. © 2008 IEEE."
"Eggen R., Jones C., Eggen M." $ "Ruby, PHP, Perl, Python: A web efficiency comparison" $ "In our modern world with so much emphasis being placed on the web and on web services it is fitting to evaluate the most popular web based API for speed, usability, reliability and general over all productivity. This paper seeks to analyze and demarcate Ruby, Perl, Python, and PHP. Several web services are simultaneously requested via the Apache web server. The server accesses scripts in each language to generate data served to the client. Attention is given to ease of use, programmer difficulty, and performance of the applications once completed. A client-server scenario is constructed, timings are taken, and appropriate conclusions drawn."
"Stylos J., Graf B., Busse D.K., Ziegler C., Ehret R., Karstens J." $ "A case study of API redesign for improved usability" $ "As software grows more complex, software developers' productivity is increasingly defined by their ability to effectively reuse code. Even APIs (application programming interfaces) and other code explicitly intended for reuse are often difficult and time consuming for developers to use. This paper describes the user-centered design and evaluation process we evolved in redesigning SAP's BRFplus - a business rules engine, whose API was created for platform development, but which is now also increasingly being used by application developers - even though it was not initially designed with their specific needs in mind. Our API redesign attempts to take both the initial as well as the new emergent user requirements into account. A usability evaluation of our proposed changes to the API suggests that our user-centered design process was successful in helping to create an API that significantly improved users' productivity and better matches the different users' needs. © 2008 IEEE."
"Lobato C., Garcia A., Romanovsky A., Lucena C." $ "An aspect-oriented software architecture for code mobility" $ "Mobile agents have come forward as a technique for tackling the complexity of open distributed applications. However, the pervasive nature of code mobility implies that it cannot be modularized using only object-oriented (OO) concepts. In fact, developers frequently evidence the presence of mobility scattering in their system's modules. Despite these problems, they usually rely on OO application programming interfaces (APIs) offered by the mobility platforms. Such classical API-oriented designs suffer a number of architectural restrictions, and there is a pressing need for empowering developers with an architectural framework supporting a flexible incorporation of code mobility in the agent applications. This work presents an aspect-oriented software architecture, called ArchM, ensuring that code mobility has an enhanced modularization and variability in agent systems, and is straightforwardly introduced in otherwise stationary agents. It addresses OO APIs' restrictions and is independent of specific platforms and applications. An ArchM implementation also overcomes fine-grained problems related to mobility tangling and scattering at the implementation level. The usefulness and usability of ArchM are assessed within the context of two case studies and through its composition with two mobility platforms. Copyright © 2008 John Wiley & Sons, Ltd."
"González-Vélez H., Cole M." $ "An adaptive parallel pipeline pattern for grids" $ "This paper introduces an adaptive parallel pipeline pattern which follows the GRASP (Grid-Adaptive Structured Parallelism) methodology. GRASP is a generic methodology to incorporate structural information at compile time into a parallel program that enables it to adapt automatically to dynamic variations in resource performance. GRASP instruments the pipeline with a series of pragmatic rules, which depend on particular performance thresholds based on the computation/communication patterns of the program and the availability of resources in the grid. Our parallel pipeline pattern is implemented as a parameterisable C/MPI API using a variable-size input data vector and a stage function array. We have evaluated its efficiency using a numerical benchmark stage function in a non-dedicated computational grid environment. ©2008 IEEE."
"Hoefler T., Lumsdaine A." $ "Optimizing non-blocking collective operations for InfiniBand" $ "Non-blocking collective operations have recently been shown to be a promising complementary approach for overlapping communication and computation in parallel applications. However, in order to maximize the performance and usability of these operations it is important that they progress concurrently with the application without introducing CPU overhead and without requiring explicit user intervention. While studying non-blocking collective operations in the context of our portable library (libNBC), we found that most MPI implementations do not sufficienctly support overlap over the InfiniBand network. To address this issue, we developed a low-level communication layer for libNBC based on the Open Fabrics InfiniBand verbs API. With this layer we are able to achieve high degrees of overlap without the need to explicitly progress the communication operations. We show that the communication overhead of parallel application kernels can be reduced up to 92% while not requiring user intervention to make progress. ©2008 IEEE."
"Homan M., Amor R., Tempero E." $ "Indexing the Java API using source code" $ "The basic idea behind software reuse is that software developers use reusable components found in software repositories to reduce the amount of code that has to be written and so increase productivity. A problem arises, however, if the repository is too big - it becomes difficult to find relevant components. What is needed is an effective means to query repositories. Most approaches to developing such means involves creating a good index to which the queries can be applied. Developing a good index requires identifying the relevant information on which to base the index. In this paper, we present the results of a project that used source code as the basis for the index. © 2008 IEEE."
"Vaughan R." $ "Massively multi-robot simulation in stage" $ "Stage is a C++ software library that simulates multiple mobile robots. Stage version 2, as the simulation backend for the Player/Stage system, may be the most commonly used robot simulator in research and university teaching today. Development of Stage version 3 has focused on improving scalability, usability, and portability. This paper examines Stage's scalability. We propose a simple benchmark for multi-robot simulator performance, and present results for Stage. Run time is shown to scale approximately linearly with population size up to 100,000 robots. For example, Stage simulates 1 simple robot at around 1,000 times faster than real time, and 1,000 simple robots at around real time. These results suggest that Stage may be useful for swarm robotics researchers who would otherwise use custom simulators, with their attendant disadvantages in terms of code reuse and transparency. © Springer Science + Business Media, LLC 2008."
"Fink S.J., Yahav E., Dor N., Ramalingam G., Geay E." $ "Effective typestate verification in the presence of aliasing" $ "This article addresses the challenge of sound typestate verification, with acceptable precision, for real-world Java programs. We present a novel framework for verification of typestate properties, including several new techniques to precisely treat aliases without undue performance costs. In particular, we present a flow-sensitive, context-sensitive, integrated verifier that utilizes a parametric abstract domain combining typestate and aliasing information. To scale to real programs without compromising precision, we present a staged verification system in which faster verifiers run as early stages which reduce the workload for later, more precise, stages. We have evaluated our framework on a number of real Java programs, checking correct API usage for various Java standard libraries. The results show that our approach scales to hundreds of thousands of lines of code, and verifies correctness for 93% of the potential points of failure. © 2008 ACM."
"Song Y., Tanaka Y., Nakada H., Sekiguchi S." $ "Towards simplifying grid enablement for scientific applications" $ "It is very complex to implement and execute grid applications in a dynamic grid environment due to scale and heterogeneity. Consequently, we propose a solution to lower the barrier to implement and execute grid applications in this paper. In order to facilitate adapting scientific applications to a grid environment, GridRPC has been standardized by OGF (Open Grid Forum) for remote procedure calls over the grid. However, the GridRPC standard defines API in C only, while most scientific and engineering applications are implemented in Fortran. To avoid the cumbersome development of Fortran wrappers for such applications, we then have proposed GricRPC Fortran90 bindings and implemented the Fortran90 API based on Ninf-G which is one of the reference implementations of the GridRPC standard. As for the execution, we have developed a resource allocator called GRPLib. The GRPLib can provide applications with availability-guaranteed and reliability-evaluated resources, which frees users from dealing with faults to some extent during executions. A framework which combines the Ninf-G and GRPLib in Fortran90 has also been developed. This framework has been successfully used to gridify a Fortran application called MD/QM (molecular dynamics/quantum mechanical application) simulation program. This paper therefore presents the Fortran90 bindings of the GridRPC, describes the GRPLib, discusses the integrated framework, reports a case study, and concludes the simplicity and usability of this solution. © 2008 Global Information Publisher (H.K) Co., Limited. All rights reserved."
"Lee S.-Y., Choi B.-U." $ "Certification tools of ubiquitous mobile platform" $ "The Wireless Internet Platform for Interoperability (WIPI) is a wireless Internet standard platform in Korea. The WIPI is composed of four main parts including the hardware abstraction layer (HAL), a runtime engine, and two standard application programming interfaces (APIs, WIPI-C and WIPIJava). A certification process is required to ensure the interoperability of the developed WIPI platform. In this paper, we propose the platform certification toolkit (PCT) and HAL certification toolkit (HCT) as WIPI specification certification tools. The PCT certifies the functions of the platform and standard APIs, whereas The HCT certifies the HAL API. Users can find precisely where an error occurred by using the tools, which facilitate the debugging processes and reduce development time. We describe the architecture of the PCT and the HCT and show the implementations. And, we introduce the case study applying them to the real WIPI reference implementations. © Springer-Verlag Berlin Heidelberg 2007."
"Acharya M., Xie T., Pei J., Xu J." $ "Mining API patterns as partial orders from source code: From usage scenarios to specifications" $ "A software system interacts with third-party libraries through various APIs. Using these library APIs often needs tofollow certain usage patterns. Furthermore, ordering rules (specifications) exist between APIs, and these rules govern the secure and robust operation of the system using these APIs. But these patterns and rules may not be well documented by the API developers. Previous approaches mine frequent association rules, itemsets, or subsequences that capture API call patterns shared by API client code. However, these frequent API patterns cannot completely capture some useful orderings shared by APIs, especially when multiple APIs are involved across different procedures. In this paper, we present a framework to automatically extract usage scenarios among user-specified APIs as partial orders, directly from the source code (API client code). We adapt a model checker to generate interprocedural control-flow-sensitive static traces related to the APIs of interest. Different API usage scenarios are extracted from the static traces by our scenario extraction algorithm and fed to a miner. The miner summarizes different usage scenarios as compact partial orders. Specifications are extracted from the frequent partial orders using our specification extraction algorithm. Our experience of applying the framework on 72 X11 clients with 200K LOC in total has shown that theextracted API partial orders are useful in assisting effective API reuse and checking. Copyright 2007 ACM."
"Xu G., Lu F., Yu H., Xu Z." $ "A distributed parallel computing environment for bioinformatics problems" $ "Certain bioinformatics research, such as sequence alignment, alternative splicing, protein function/structure prediction, gene identify, bio-chip data analysis, and so on, requires massive computing power, which is hardly available in a single computing node. In order to facilitate bioinformatics research, we have designed and implemented a distributed and parallel computing environment with grid technology, in which, biologists can solve bioinformatics problems using distributed computing resources in parallel and reduce execution time. In this environment, the computing power and program information of computing nodes are described with XML documents. A web service named Local Resource Management Service is deployed on each computing node so that the distributed resources can be accessed in a uniform manner. With an API suite, biologists can use distributed computing resources in parallel easily in their applications. Further more, users can monitor the status of distributed resources dynamically on the portal. A real use case of alternative splicing is also presented, through which we have analyzed the usability, efficiency, and stability of the environment. ©2007 IEEE."
"Woemdl W., Yousef H." $ "An adaptation manager for personalized mobile web searches" $ "Context-aware and personalized information access becomes more and more important, especially in a mobile scenario. In this paper, we present an Adaptation Manager which customizes Web searches to a user's context and profile attributes. The approach allows for reuse of personal information for different services such as the Google Web Service API. We identify personalization components as parts of our Adaptation Manager and explain the design of the system. We have also implemented the most important parts of the system and thereby show the usability of the approach. Our solution is extensible, for example to incorporate a rule system to (semi-)automatically switch between services."
"Ellis B., Stylos J., Myers B." $ "The factory pattern in API design: A usability evaluation" $ "The usability of software APIs is an important and infrequently researched topic. A user study comparing the usability of the factory pattern and constructors in API designs found highly significant results indicating that factories are detrimental to API usability in several varied situations. The results showed that users require significantly more time (p = 0.005) to construct an object with a factory than with a constructor while performing both context-sensitive and contextfree tasks. These results suggest that the use of factories can and should be avoided in many cases where other techniques, such as constructors or class clusters, can be used instead. ©2007 IEEE."
"Stylos J., Clarke S." $ "Usability implications of requiring parameters in objects' constructors" $ "The usability of APIs is increasingly important to programmer productivity. Based on experience with usability studies of specific APIs, techniques were explored for studying the usability of design choices common to many APIs. A comparative study was performed to assess how professional programmers use APIs with required parameters in objects' constructors as opposed to parameterless ""default"" constructors. It was hypothesized that required parameters would create more usable and self-documenting APIs by guiding programmers toward the correct use of objects and preventing errors. However, in the study, it was found that, contrary to expectations, programmers strongly preferred and were more effective with APIs that did not require constructor parameters. Participants' behavior was analyzed using the cognitive dimensions framework, and revealing that required constructor parameters interfere with common learning strategies, causing undesirable premature commitment. © 2007 IEEE."
"Mitter F., Stopper M." $ "Advantages of using language integrated queries technology" $ "Current object oriented programming languages require additional application programming interfaces (API's) to access the stored data in relational databases. Therefore an investment of learning-overhead is necessary. Additionally missing compiler support and IntelliSense feature do not simplify the situation as well as the case for doubling-up possible error sources regarding to be on the way in two worlds. A combination of features in upcoming Microsoft C# 3.0 (generics, anonymous delegates, lambda expressions, query expressions - LINQ) can achieve the desired goals without facing these disadvantages. While in beta phase this solution lacks usability, but Microsoft company announced to implement LINQ in Visual Studio 2008 (Codename Orcas) with many more upgrades like a control element for an appropriate data source. Substitutional there are different object relational mappers available that image database tables in objects, but if the company's development progress will be as expected, after all LINQ technology would be the most effective solution for the creation of data driven applications."
"Xie T., Pei J." $ "MAPO: Mining API usages from open source repositories" $ "To improve software productivity, when constructing new software systems, developers often reuse existing class libraries or frameworks by invoking their APIs. Those APIs, however, are often complex and not well documented, posing barriers for developers to use them in new client code. To get familiar with how those APIs are used, developers may search the Web using a general search engine to find relevant documents or code examples. Developers can also use a source code search engine to search open source repositories for source files that use the same APIs. Nevertheless, the number of returned source files is often large. It is difficult for developers to learn API usages from a large number of returned results. In order to help developers understand API usages and write API client code more effectively, we have developed an API usage mining framework and its supporting tool called MAPO (for Mining API usages from Open source repositories). Given a query that describes a method, class, or package for an API, MAPO leverages the existing source code search engines to gather relevant source files and conducts data mining. The mining leads to a short list of frequent API usages for developers to inspect. MAPO currently consists of five components: a code search engine, a source code analyzer, a sequence preprocessor, a frequent sequence miner, and a frequent sequence post processor. We have examined the effectiveness of MAPO using a set of various queries. The preliminary results show that the framework is practical for providing informative and succinct API usage patterns. Copyright 2006 ACM."
"Sormaz D.N., Pisipati D.V., Borse P.A." $ "Virtual manufacturing of milling operations with multiple tool paths" $ "Virtual manufacturing (visualisation and animation of a manufacturing process) provide the user with visual feed back in order to understand relations between the data in the process plan. The paper presents a framework, a procedure and an object-oriented prototype for virtual manufacturing of milling processes. Visualisation model is generated through three steps: geometric model, kinematic model and animation model. In the first step, geometric model, the feature geometry is analysed and corresponding tool path patterns are generated, and initial and final work piece geometry computed using stock and feature geometric models. Kinematic model is generated by segmentation of end milling processing time into intervals for each tool path segment and identification of part/tool engagement and disengagement relations. The third step, animation model, creates objects necessary for virtual manufacturing of the process in virtual 3D world. The user-friendly prototype has been implemented in java using java3d API. User is able to experiment with different values of the tool path parameters and visually inspect results in order to select the most suitable ones. Copyright © 2006 Inderscience Enterprises Ltd."
"Holmes R., Walker R.J., Murphy G.C." $ "Approximate structural context matching: An approach to recommend relevant examples" $ "When coding to an application programming interface (API), developers often encounter difficulties, unsure of which class to subclass, which objects to instantiate, and which methods to call. Example source code that demonstrates the use of the API can help developers make progress on their task. This paper describes an approach to provide such examples in which the structure of the source code that the developer is writing is matched heuristically to a repository of source code that uses the API. The structural context needed to query the repository is extracted automatically from the code, freeing the developer from learning a query language or from writing their code in a particular style. The repository is generated automatically from existing applications, avoiding the need for handcrafted examples. We demonstrate that the approach is effective, efficient, and more reliable than traditional alternatives through four empirical studies. © 2006 IEEE."
"Gokhale P.S." $ "Innovative approach for emission monitoring and control" $ "This paper will describe the implementation of Membrane-based vapor recovery system and unconventional CEMS applied in Methyl Tertiary Butyl ether (MTBE) and Methanol plants which was commissioned and in operation at Jubail, Saudi Arabia. MTBE is highly volatile and hazardous fuel additive used as oxygenate to boost the octane number of gasoline. A project was commissioned for loading MTBE tankers to comply with API using bottom-loading methodology. Local environmental regulations mandated that HC loading with a rate equal or more than should have Vapor control to avoid release of hydrocarbon to atmosphere during loading operation. This paper will describe how the environmental control was achieved and the system functionality. CEMS was required to be installed on four auxiliary Boilers to comply with the local environmental regulations for MTBE & Methanol plant Boilers for monitoring Carbon monoxide (CO) emission thru flue gas stack. CO emission monitoring was necessary since the code dictated that any fired furnace burning hazardous hydrocarbon waste as fuel shall monitor and maintain CO emission below 100 PPM. Paper will describe how an unconventional CEMS. System was installed and in operation for last two years and benefits realized. Copyright 2006 by ISA."
"Lobato C., Garcia A., Lucena C., Romanovsky A." $ "A modular implementation framework for code mobility" $ "With the growing popularity of open distributed applications, mobile agents have naturally emerged as the fundamental technique for tackling the complexity of the emerging applications. However, the pervasive nature of code mobility issues implies that their implementation cannot be modularized based only on object-oriented (OO) abstractions and mechanisms. In fact, programmers of complex mobile agent systems frequently evidence the presence of mobility tangling and scattering in the modules of their systems. Despite these modularity breakdowns caused by code mobility, the developers have mostly relied on OO application programming interfaces (APIs) from mobility platforms and on the Java programming language. As a consequence, there is a pressing need for empowering developers with a modular implementation framework that supports a transparent, flexible incorporation of code mobility-specific capabilities into their applications. This paper presents an aspect-oriented software framework, called AspectM, that ensures: (1) improved modularization of the code mobility issues, (2) a seamless introduction of code mobility into stationary agents, and (3) overall enhanced variability of the mobile agent systems, such as flexible integration of these systems with distinct mobility platforms. The usefulness and usability of the AspectM framework has been assessed in the context of two medium-sized case studies from different application domains, and through its composition with two mobility platforms. Copyright 2006 ACM."
"Sun C., Xia S., Sun D., Chen D., Shen H., Cai W." $ "Transparent adaptation of single-user applications for multi-user real-time collaboration" $ "Single-user interactive computer applications are pervasive in our daily lives and work. Leveraging single-user applications for supporting multi-user collaboration has the potential to significantly increase the availability and improve the usability of collaborative applications. In this article, we report an innovative Transparent Adaptation (TA) approach and associated supporting techniques that can be used to convert existing and new single-user applications into collaborative ones, without changing the source code of the original application. The cornerstone of the TA approach is the operational transformation (OT) technique and the method of adapting the single-user application programming interface to the data and operation models of OT. This approach and supporting techniques were developed and tested in the process of transparently converting two commercial off-the-shelf single-user applications (Microsoft Word and PowerPoint) into real-time collaborative applications, called CoWord and CoPowerPoint, respectively. CoWord and CoPowerPoint not only retain the functionalities and look-and-feel of their single-user counterparts, but also provide advanced multi-user collaboration capabilities for supporting multiple interaction paradigms, ranging from concurrent and free interaction to sequential and synchronized interaction, and for supporting detailed workspace awareness, including multi-user telepointers and radar views. The TA approach and generic collaboration engine software component developed from this work are potentially applicable and reusable in adapting a wide range of single-user applications. © 2006 ACM."
"[No author name available]" $ "Proceedings of the 3rd International Conference on Mobile Technology, Applications and Systems" $ "The proceedings contain 70 papers. The topics discussed include: conception and simulation of energy-efficient AODV protocol in ad hoc networks, enabling seamless vertical handovers using unified link-layer API, context handling in a pervasive computing system framework, backbone-based location-aided routing algorithm to reduce control packets of AODV protocol, performance of a multiband impulse radio UWB architecture, design and applications of wireless SET protocol, challenges in multi-mode transmitter design, towards implicit interaction by using wearable interaction device sensors for more than one task, mobile phones as tool to increase communication and location awareness of users, cyberanthropology of mobility, developing design guidelines for context-aware mobile applications, usability guidelines for designing mobile learning portals, network centric photorealistic mixed reality on mobile devices, and signwriting on mobile phones for the deaf."
"Wang C., Lin Y., Sohraby K., Li B." $ "An adaptive algorithm for active queue management" $ "This paper proposes an adaptive proportional integral (API) algorithm for active queue management. API uses mean packet loss ratio and mean queue length as control error to adaptively adjust packet drop probability in order to expedite congestion control. The extensive simulations validate that API achieves faster control response and improved performance in terms of goodput, average queue length, and packet loss ratio."
"Worringen J." $ "Self-adaptive hints for collective I/O" $ "The processing of MPI-IO operations can be controlled via the MPI API using file hints, which are passed to the MPI library as MPI info objects. A file hint can affect how the MPI library accesses the file on the file system level, it can set buffer sizes, turn special optimizations on and off or whatever parameters the MPI implementation provides. However, experience shows that file hints are rarely used for reasons that will be discussed in the paper. We present a new approach which dynamically determines the optimal setting for file hints related to collective MPI-IO operations. The chosen settings adapt to the actual file access pattern, the topology of the MPI processes and the available memory resources and consider the characteristics of the underlying file system. We evaluate our approach which has been implemented in MPI/SX, NEC's MPI implementation for the SX series of vector supercomputers. © Springer-Verlag Berlin Heidelberg 2006."
"Mathieu P., Verrons M.-H." $ "GeNGA, a generic contract negotiation model [GeNGA, un modèle général de négociation de contrats]" $ "Modelisation of group phenomena is the core of the multi-agent problematic. Among them are automatic negotiation systems which have been largely studied in the electronic commerce field in order to modelise especially auctions. In this paper, we present a generic negotiation model for multi-agent systems, called GeNCA, built on three levels: a communication level, a negotiation level and a strategic level, which is the only level specific to a particular application. The negotiation model presented here aims to be general and parameterable for different kinds of negotiations. It has been implemented by a Java API used to build our applications. GeNCA is the only platform which enables the use of different communication systems and of negotiation strategies specific to the applications achieved."
"Sunderraman R., Dogdu E., Madiraju P., Malladi L." $ "A java API for global querying and updates for a system of databases" $ "In this paper, we present the design of system of databases (SyDb). We also give the design and implementation of a Java API for global querying and updates on the SyDb. The databases may be heterogeneous. The API allows for queries and updates that have global references to schema elements of multiple databases to be executed in a seamless manner. The API can be used to develop collaborative applications that need access to several independent databases on the network. One such collaborative application, called the Calendar application, is illustrated in the paper. In this application each individual keeps their schedule information in their personal database. The users can schedule meetings with others, view others schedules, cancel meetings, etc. We implement the API using direct JDBC connections to databases. Copyright 2005 ACM."
"Kennedy C." $ "Development of a new interchangeable virtual instrument class specification" $ "In today's world, rapidly changing technology and high costs associated with developing and maintaining ATE software push the need for reusability and ease of upgrading or replacing components in test systems intended to be used over a long period of time. The Interchangeable Virtual Instrument (IVI) Foundation is tackling these issues by: ""Promoting specifications for programming test instruments that simplify interchangeability, provide better performance, and reduce program development and maintenance cost."" An Interchangeable Virtual Instrument (IVI) class specification defines the base capabilities and extensions for an instrument type (such as a Function Generator or Oscilloscope). This specification defines the Application Programming Interface (API) used to develop an IVI Class-compliant driver. Systems & Electronics Inc. and Boeing are jointly chairing an IVI Foundation working group to define an IVI class specification for a Counter/Timer. Based on the experiences of characterizing the Counter/Timer specification, this paper explores the process of creating a new class specification for an instrument type that does not already have a specification defined. Topics such as steps to effective specification development, obstacles encountered, and how to keep the specification moving forward are discussed. © 2005 IEEE."
"Bruni R., Ferrari G., Melgratti H., Montanari U., Strollo D., Tuosto E." $ "From theory to practice in transactional composition of Web Services" $ "We address the problem of composing Web Services in long-running transactional business processes, where compensations must be dealt with appropriately. The framework presented in this paper is a Java API called Java Transactional Web Services (JTWS), which provides suitable primitives for wrapping and invoking Web Services as activities in long-running transactions. JTWS adheres to a process calculi formalisation of long-running transactions, called Naïve Sagas, which fixes unambiguously the implemented compensation policy. In particular, the primitives provided by JTWS are in one-to-one correspondence with the primitives of Sagas, and they are abstract enough to hide the complex details of their realization, thus favouring usability. Moreover, JTWS orchestrates business processes in a distributed way. © Springer-Verlag Berlin Heidelberg 2005."
"Guthe M., Balázs Á., Klein R." $ "GPU-based trimming and tessellation of NURBS and T-Spline surfaces" $ "As there is no hardware support neither for rendering trimmed NURBS - the standard surface representation in CAD - nor for T-Spline surfaces the usability of existing rendering APIs like OpenGL, where a run-time tessellation is performed on the CPU, is limited to simple scenes. Due to the irregular mesh data structures required for trimming no algorithms exists that exploit the GPU for tessellation. Therefore, recent approaches perform a pretessellation and use level-of-detail techniques. In contrast to a simple API these methods require tedious preparation of the models before rendering and hinder interactive editing. Furthermore, due to the tremendous amount of triangle data smooth zoom-ins from long shot to close-up are not possible. In this paper we show how the trimming region can be defined by a trim-texture that is dynamically adapted to the required resolution and allows for an efficient trimming of surfaces on the GPU. Combining this new method with GPU-based tessellation of cubic rational surfaces allows a new rendering algorithm for arbitrary trimmed NURBS and T-Spline surfaces with prescribed error in screen space on the GPU. The performance exceeds current CPU-based techniques by a factor of up to 1000 and makes real-time visualization of real-world trimmed NURBS and T-Spline models possible on consumer-level graphics cards. © 2005 ACM 0730-0301/05/0700-1016 $5.00."
"Marchesini J., Smith S.W., Zhao M." $ "Keyjacking: The surprising insecurity of client-side SSL" $ "In theory, PKI can provide a flexible and strong way to authenticate users in distributed information systems. In practice, much is being invested in realizing this vision via client-side SSL and various client keystores. However, whether this works depends on whether what the machines do with the private keys matches what the humans think they do: whether a server operator can conclude from an SSL request authenticated with a user's private key that the user was aware of and approved that request. Exploring this vision, we demonstrate via a series of experiments that this assumption does not hold with standard desktop tools, even if the browser user does all the right things. A fundamental rethinking of the trust, usage, and storage model might result in more effective tools for achieving the PKI vision. © 2004 Elsevier Ltd. All rights reserved."
"McGuinness D.L., Da Silva P.P." $ "Explaining answers from the semantic web: The inference web approach" $ "The Semantic Web lacks support for explaining answers from web applications. When applications return answers, many users do not know what information sources were used, when they were updated, how reliable the source was, or what information was looked up versus derived. Many users also do not know how implicit answers were derived. The Inference Web (IW) aims to take opaque query answers and make the answers more transparent by providing infrastructure for presenting and managing explanations. The explanations include information concerning where answers came from (knowledge provenance) and how they were derived (or retrieved). In this article we describe an infrastructure for IW explanations. The infrastructure includes: IWBase - an extensible web-based registry containing details about information sources, reasoners, languages, and rewrite rules, PML - the Proof Markup Language specification and API used for encoding portable proofs, IW browser - a tool supporting navigation and presentations of proofs and their explanations, and a new explanation dialogue component. Source information in the IWBase is used to convey knowledge provenance. Representation and reasoning language axioms and rewrite rules in the IWBase are used to support proofs, proof combination, and Semantic Web agent interoperability. The Inference Web is in use by four Semantic Web agents, three of them using embedded reasoning engines fully registered in the IW. Inference Web also provides explanation infrastructure for a number of DARPA and ARDA projects. © 2004 Elsevier B.V. All rights reserved."
"Clarke S." $ "Measuring API Usability" $ "The techniques used to design the usability of APIs that move with .NET are described. The best way to design usable graphical user interfaces (GUI) or APIs is to follow a user-centered design approach. APIs are reviewed periodically by examining the code samples and determining whether or not developers would be comfortable writing the code in each of the samples. The cognitive dimensions framework can also be used to describe the usability of APIs and to gather feedback from customers."
"Simonds C." $ "Software for the Next-Generation Automobile" $ "The features of Ford devised intelligent transportation system (ITS) are discussed. Ford's prototype software provides aid in rapid tailoring of automobile features and handles diverse communication modes. The flexible XML-based software architecture, Vehicle User-Interface Mark-up Language (VUML), offers customers a high degree of personalization including real-time information, facilitated by off-board services. In this regard, the specifications of application programming interface (API) used in the designing of Vehicle Consumer Services Interface (VCSI) are also discussed."
"Jones H., Snyder M." $ "Robotic control & 3D GUIs" $ "A graphical user interface (GUI) based on the open GL 3D API used to operate global-positioning system (GPS)-enabled robots, is discussed. This basic technique is used to operate helicopters, submarines and space systems. The position sensing of the robot is accomplished with four GPS antennae that provide both position and altitude using differential carrier phase (DCPGPS) techniques."
"Umlauf E.J., Piringer H., Reitmayr G., Schmalstieg D." $ "ARLib: The augmented library" $ "ARLib is a location-based application for a mobile Augmented Reality system based on a notebook computer, a head-mounted display fitted with a FireWire camera, and powered by Sludierstube 2.0 software. The application aims to aid the user in typical tasks that are done in a library by augmenting a book's position on a shelf. The system utilizes an optical tracking approach, relying on ARToolKit for recognising markers. Markers are attached to bookshelves and walls to determine the viewer's position, as well as to books themselves. A powerful multi-criteria search engine combined with an interface that supports grafitti text input grants a maximum of usability and speed. © 2002 IEEE."
"Bubak M., Kurzyniec D., Luszczek P., Sunderam V." $ "Creating Java to native code interfaces with Janet" $ "Java is growing in appropriateness and usability for high performance computing. With this increasing adoption, issues relating to combining Java with existing codes in other languages become more important. The Java Native Interface (JNI) API is portable but too inconvenient to be used directly owing to its low-level API. This paper presents Janet - a highly expressive Java language extension and preprocessing tool that enables convenient integration of native code with Java programs. The Janet methodology overcomes some of the limitations of JNI and generates Java programs that execute with little or no degradation despite the flexibility and generality of the interface."
"Bunn J.J., Holtman K., Newman H.B., Wilkinson R.P." $ "The GIOD project - Globally interconnected object databases" $ "The GIOD (Globally Interconnected Object Databases) Project, a joint effort between Caltech and CERN, funded by Hewlett Packard Corporation, has investigated the use of WAN-distributed Object Databases and Mass Storage systems for LHC data. A prototype small-scale LHC data analysis center has been constructed using computing resources at Caltechs Centre for Advanced Computing Research (CACR). These resources include a 256 CPU HP Exemplar of ∼4600 SPECfp95, a 600 TByte High Performance Storage System (HPSS), and local/wide area links based on OC3 ATM. Using the Exemplar, a large number of fully simulated CMS events were produced, and used to populate an object database with a complete schema for raw, reconstructed and analysis objects. The reconstruction software used for this task was based on early codes developed in preparation for the current CMS reconstruction program, ORCA. Simple analysis software was then developed in Java, and integrated with SLACs Java Analysis Studio tool. An event viewer was constructed with the Java 3D API. Using this suite of software, tests were made in collaboration with researchers at FNAL and SDSC, that focused on distributed access to the database by numerous clients, and measurements of peak bandwidths were made and interpreted. In this paper, some significant findings from the GIOD Project are presented, such as the achievement of the CMS experiment's 100 MB/s database I/O milestone. © 2001 Elsevier Science B.V. All rights reserved."
"Whittaker J.A." $ "Software's invisible users" $ "The challenges of dealing with different types of users are discussed, which provide software systems with input. These include human users, operating systems (OS) users, API users, and file system users. When designing software, programmers must decide on the inputs to verify. Testers must also simulate anomalous inputs that create problems for the system."
"North C., Shneiderman B." $ "Snap-together visualization: Can users construct and operate coordinated visualizations?" $ "Multiple coordinated visualizations enable users to rapidly explore complex information. However, users often need unforeseen combinations of coordinated visualizations. Snap-together visualization (Snap) enables users to rapidly and dynamically construct coordinated-visualization interfaces, customized for their data, without programming. Users load data into desired visualizations, then construct coordinations between them for brushing and linking, overview and detail view, drill down, etc. Snap formalizes a conceptual model of visualization coordination based on the relational data model. Visualization developers can easily Snap-enable their independent visualizations using a simple API. Empirical evaluation reveals benefits, cognitive issues and usability concerns with coordination concepts and Snap. Two user studies explore coordination construction and operation. Data-savvy users successfully, enthusiastically and rapidly constructed powerful coordinated-visualization interfaces of their own. Operating an overview-and-detail coordination reliably improved user performance by 30-80% over detail-only and uncoordinated interfaces for most tasks."
"Hale M.A., Mavris D.N." $ "Lean-server foundation for collaborative design" $ "The design framework research community utilizes the Internet as a facilitator for collaborative activities. The ability to support coordination and high-level communication is imperative in any collaboratory. A novel approach using lean-servers is an alternative method for providing a functional server-side computing model that meets the implementation requirements for a collaboratory. The server brokers Internet requests directly within a design application by providing a gateway to the application's programming interface using a HyperText Transfer Protocol compliant layer. This allows requests to be managed directly by the application rather than requiring auxiliary services. Macros are used to provide content and context sensitive responses. A prototype system, called the Systems Programming Architecture for Collaborative Engineering, is described as one scenario for implementing the lean-server technology. Usability of the approach is demonstrated through a Design of Experiments example that is representative of modern design methods. This example also demonstrates coordination because it executes asynchronously with multi-user intervention at any time during the process. In hindsight, the lean-server approach is an enabling technology for collaborative design and focuses future research on methods for communicating reasoning, experience, and other information during design decision-making processes."
"North Chris, Shneiderman Ben" $ "Snap-Together Visualization: A user interface for coordinating visualizations via relational schemata" $ "Multiple coordinated visualizations enable users to rapidly explore complex information. However, users often need unforeseen combinations of coordinated visualizations that are appropriate for their data. Snap-Together Visualization enables data users to rapidly and dynamically mix and match visualizations and coordinations to construct custom exploration interfaces without programming. Snap's conceptual model is based on the relational database model. Users load relations into visualizations then coordinate them based on the relational joins between them. Users can create different types of coordinations such as: brushing, drill down, overview and detail view, and synchronized scrolling. Visualization developers can make their independent visualizations snap-able with a simple API. Evaluation of Snap revealed benefits, cognitive issues, and usability concerns. Data savvy users were very capable and thrilled to rapidly construct powerful coordinated visualizations. A snapped overview and detail-view coordination improved user performance by 30-80%, depending on task."
"Succi G., Eberlein A., Yip J., Luc K., Nguy M., Tan Y." $ "Design of Holmes: a tool for domain analysis and engineering" $ "Holmes is a collection of tools that support the Sherlock domain analysis & engineering (DA&E) methodology. Holmes plans to improve on existing DA&E tools by providing a more usable interface and making better use of existing technologies and standards. Usability is achieved through automation and the use of a critiquing system. The tool is developed in Java to allow easier upgrading to new technologies and standards by updating a server to deploy new versions. Internal data exchange is achieved using the JavaSpaces API while external data exchange uses the Extensible Markup Language (XML)."
"[No author name available]" $ "Proceedings of the 1998 International Conference on Intelligent User Interfaces, IUI" $ "The proceedings contains 24 papers from the 1998 International Conference on Intelligent User Interfaces. Topics discussed include: intelligent user interfaces, life-like pedagogical agents, dynamically generated hypermedia presentations, multi-model interactive improvisational agent, speech research, integrating user interface agents, self-integrating context-aware services, multimodal tools, standardized task models, intelligent agents, user task models, task-sensitive cinematography interfaces, text editing task automation, context-sensitive filtering, knowledge-rich interface, construction planning information, software architectures critics, intelligent educational systems, adaptive forms, and agent-assisted interfaces."
"McCartney T.P." $ "A usability study of end-user construction of distributed multimedia applications" $ "This paper describes an empirical study of end-users that tested the usability of The Programmers' Playground graphical environment. The Programmers' Playground is a software library and run-time system for constructing distributed multimedia applications. Playground's graphical environment enables end-users to create direct-manipulation graphical user interfaces (GUIs) and to dynamically configure communication among distributed application components. In this study, 28 end-users with no prior experience in distributed computing or user interface construction were timed and evaluated on several tasks using our graphical environment. Tasks included the use of direct and indirect constraint relationships, visual configuration of distributed applications, and graphical user interface construction. The results show that a wide variety of end-users (i.e., not just programmers) can learn and apply these concepts, utilizing our graphical environment to construct distributed multimedia applications. © Springer-Verlag 1997."
"Castelli G." $ "Software development environments for massively parallel systems" $ "The commercial offer of massively parallel systems has now reached a wide variety, with well engineered products offered by European and American manufacturers. Furthermore, both the American government and the Commission of the European Communities have clearly identified the important role that High Performance Computing may play in science and industry in the near future. To be successful, HPC needs to improve greatly the quality attributes of its software. This paper investigates the status of the software environments for massively parallel systems. In fact, whilst the hardware technology improvements in the past few years have been very rapid, the technology has suffered because of a substantial misalignment between the potential user's expectations and the actual usability of software for massively parallel computer systems. Actions and serious industrialisation efforts are needed to bring the system software and the basic programming environments to a level of real usability, because it is time for these systems to get rid of the ancestral equation: massive parallel systems = number crunching. Many potential markets could be addressed by massively parallel systems if they were able to offer to the users the same ease of use, quality, completeness, and portability of conventional sequential systems. © 1994."
"Oliveira J.L., Martins J.A." $ "A management architecture based on network topology information" $ "This paper describes the development of a formalism to represent Network Topology Information that provides hierarchical views of the network elements distribution, usable with advantage by management applications. It reviews some topology discovery tools and emphasizes the lack of a common methodology to represent the network cabling and organize the agent distribution information. The formalism, consisting on a descriptive language and on an object-oriented topology base, is described and some application areas, where this information can be used, are pointed. Finally it presents a Management API, as part of the overall architecture, that helps to show the usability of the Topology Information Base. © 1994, Plenum Publishing Corporation. All rights reserved."
